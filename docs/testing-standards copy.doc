# Testing Standards

## Overview

This document defines our testing standards and best practices, with specific considerations for our tech stack including Chakra UI v3.

## Definition of Done (DoD) Guidelines

### All Tests Must

- Pass consistently without flakiness
- Include proper documentation with clear descriptions
- Follow naming convention: `*.test.ts` or `*.spec.ts`
- Avoid unnecessary dependencies
- Handle cleanup properly

### Unit Tests Must

- Remain isolated (no external dependencies)
- Cover single functionality per test
- Implement mocks/stubs properly
- Consider edge cases
- Meet coverage target for priority level

### Integration Tests Must

- Cover happy path scenarios
- Handle common error scenarios
- Mock external dependencies appropriately
- Verify data consistency
- Implement proper cleanup

### E2E Tests Must

- Test complete user flows
- Run in all specified browsers
- Capture screenshots/videos on failure
- Collect performance metrics
- Handle environmental cleanup

## Component Testing Standards

### UI Component Tests

- Use React Testing Library with Chakra UI v3 providers
- Test component rendering, interactions, and accessibility
- Include dark mode testing where relevant

```typescript
// Example of proper Chakra UI v3 component test setup
import { render, screen } from '@testing-library/react';
import { ChakraProvider } from '@chakra-ui/react';
import { theme } from '@/theme';

const renderWithChakra = (ui: React.ReactElement) => {
  return render(<ChakraProvider theme={theme}>{ui}</ChakraProvider>);
};

describe('Button Component', () => {
  it('renders with correct Chakra UI styles', () => {
    renderWithChakra(<Button colorScheme="brand">Click me</Button>);
    const button = screen.getByRole('button');
    expect(button).toBeInTheDocument();
  });
});
```

### Theme Testing

- Test theme token applications
- Verify responsive design breakpoints
- Validate color scheme transitions
- Test accessibility contrast ratios

## Test Categories

### 1. Unit Tests

- Individual component logic
- Utility functions
- Custom hooks
- State management
- Data transformations

### 2. Integration Tests

- Component interactions
- API integration
- State management flow
- Theme inheritance
- Layout composition

### 3. E2E Tests

- Critical user flows
- Form submissions
- Navigation paths
- Authentication flows
- Offline functionality

## Testing Tools

### Frontend Testing Stack

- Vitest for unit/integration tests
- React Testing Library
- MSW for API mocking
- Playwright for E2E
- Lighthouse for performance
- Axe for accessibility

### Required Test Utilities

```typescript
// src/test-utils/index.ts
import { ChakraProvider } from '@chakra-ui/react';
import { theme } from '@/theme';

export const TestWrapper = ({ children }: { children: React.ReactNode }) => (
  <ChakraProvider theme={theme}>{children}</ChakraProvider>
);

export const renderWithProviders = (ui: React.ReactElement) => {
  return render(ui, { wrapper: TestWrapper });
};
```

## Code Quality Requirements

### Testing Standards

- TypeScript strict mode enabled
- ESLint testing plugins configured
- Proper type assertions
- Meaningful test descriptions
- Isolated test cases
- Proper cleanup

### Coverage Requirements

- Overall coverage: 80%+
- Critical paths: 100%
- Components: 85%+
- Utilities: 90%+
- API services: 85%+

## Performance Testing

### Load Time Metrics

- First Contentful Paint: < 1.5s
- Time to Interactive: < 3s
- Total Blocking Time: < 300ms

### Runtime Performance

- Frame rate: 60fps
- Input latency: < 100ms
- Memory leaks: None
- Bundle size limits enforced

## Accessibility Testing

### Requirements

- WCAG 2.1 AA compliance
- Keyboard navigation
- Screen reader compatibility
- Color contrast validation
- Focus management

### Tools

- Axe-core for automated checks
- Manual screen reader testing
- Keyboard navigation testing
- Color contrast analyzers

## Test Infrastructure Requirements

### Basic Setup

- Test configuration
- Mock system
- Test helpers
- Test data factories
- Custom matchers
- Coverage reporting

### CI/CD Requirements

- CI/CD integration
- Automated test runs
- Performance monitoring
- Security scanning
- Accessibility checking

## Test Documentation Requirements

### Test Cases

- Document test purpose
- Document test steps
- Document expected results
- Document test data
- Document assumptions
- Document dependencies
- Document cleanup

### Test Reports

- Coverage reports
- Performance metrics
- Security findings
- Accessibility results
- Test execution logs
- Error reports
- Improvement suggestions

## Resources

- [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/)
- [Cypress Documentation](https://docs.cypress.io/guides/overview/why-cypress)
- [MSW Documentation](https://mswjs.io/docs/)
- [Testing Best Practices](https://testing-library.com/docs/guiding-principles)
- [Performance Testing Guide](https://web.dev/performance-testing/)
