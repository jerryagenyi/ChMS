import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { getToken } from 'next-auth/jwt';
import { encode } from 'next-auth/jwt';

export async function middleware(request: NextRequest) {
  const token = await getToken({ req: request });
  
  if (process.env.NEXT_PUBLIC_AUTO_LOGIN === 'true' && 
      process.env.NODE_ENV === 'development' && 
      !token) {
    
    // Create a proper JWT token
    const devToken = await encode({
      token: {
        name: 'Development User',
        email: 'dev@example.com',
        picture: null,
        sub: '1',
        organizationId: '1',
        role: 'ADMIN',
      },
      secret: process.env.NEXTAUTH_SECRET!,
      maxAge: 30 * 24 * 60 * 60, // 30 days
    });

    const response = NextResponse.next();
    response.cookies.set({
      name: 'next-auth.session-token',
      value: devToken,
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      path: '/',
      maxAge: 30 * 24 * 60 * 60, // 30 days
    });

    return response;
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
