---
description: Core context rules for ChMS Africa project
globs: ["**/*"]
alwaysApply: true
---
# ChMS Project Context

## Source of Truth Documents
The following documents are the source of truth for the ChMS project:

1. Project Overview: `/docs/project-overview.md`
   - Core features and MVP requirements
   - Technical stack and architecture
   - Development guidelines
   - Project structure

2. Technical Documentation:
   - Architecture: `/docs/architecture.md`
   - Testing Strategy: `/docs/testing-strategy.md`
   - Component Library: `/docs/component-library.md`
   - API Documentation: `/docs/api-docs.md`

3. Project Management:
   - Project Tracker: `/docs/project-tracker.md`
   - Sprint Planning: `/docs/sprint-planning.md`
   - Development Workflow: `/docs/development-workflow.md`

## Project Structure
```
ChMS/
├── src/
│   ├── components/         # React components
│   │   └── ComponentName/
│   │       ├── index.ts
│   │       ├── ComponentName.tsx
│   │       ├── ComponentName.test.tsx
│   │       └── types.ts
│   ├── hooks/             # Custom React hooks
│   ├── pages/             # Next.js pages
│   ├── services/          # External service integrations
│   ├── store/             # State management
│   ├── styles/            # Global styles
│   ├── types/             # TypeScript types
│   └── utils/             # Utility functions
├── docs/                  # Documentation
├── prisma/               # Database schema
├── public/              # Static assets
└── tests/               # Test utilities and setup
```

## Development Standards

### Code Organization
1. Feature-based structure
2. Atomic design principles
3. Clear separation of concerns
4. Type-safe implementations
5. Test-driven development

### Testing Requirements
1. Unit tests for all components
2. Integration tests for features
3. E2E tests for critical paths
4. Minimum 85% coverage
5. Performance testing

### Performance Standards
1. Page load < 2s
2. API response < 200ms
3. First contentful paint < 1.5s
4. Time to interactive < 2s
5. Offline capability

### Security Requirements
1. Role-based access control
2. Data encryption
3. Input validation
4. XSS protection
5. CSRF protection
6. Rate limiting

## Development Workflow
1. Feature branch creation
2. TDD approach
3. Code review
4. CI/CD pipeline
5. Documentation updates

## Technical Stack
1. Frontend:
   - Next.js 14
   - TypeScript 5
   - Chakra UI
   - React Hook Form
   - Zod validation
   - SWR for data fetching

2. Backend:
   - Next.js API routes
   - Prisma ORM
   - PostgreSQL
   - NextAuth.js

3. Testing:
   - Jest
   - React Testing Library
   - MSW
   - Cypress
   - Playwright

4. DevOps:
   - GitHub Actions
   - Docker
   - Vercel
   - Railway (Database)

## Implementation Phases

### Phase 1: Foundation
1. Project setup
2. Core components
3. Authentication
4. Basic routing
5. Database setup

### Phase 2: Core Features
1. Organization management
2. Member management
3. Attendance system
4. Basic reporting

### Phase 3: Advanced Features
1. Family management
2. Communication system
3. Advanced reporting
4. Mobile optimization

## Documentation Requirements
1. Component documentation
2. API documentation
3. Testing documentation
4. Deployment guides
5. User guides
