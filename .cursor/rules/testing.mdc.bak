---
description: Testing rules and guidelines
globs: 
alwaysApply: false
---

# Testing Rules

## Workflow Requirements

1. Use @docs/test-checklist.md as primary working document
   - Focus on P0 components first
   - Track progress systematically
   - Update checklist after each component completion

2. Component/Feature Analysis Requirements
   - Reference principles from @docs/testing-strategy.md
   - Apply standards from @docs/testing-standards.md (especially DoD guidelines)
   - Track progress in @docs/test-checklist.md
   - Follow documentation requirements from @docs/test-tracking.md

3. Test Validation Requirements
   - Verify coverage targets per priority level
   - Ensure all DoD criteria are met
   - Confirm documentation standards compliance

4. Test Implementation Process
   Before starting any test:
   ```
   Component: [COMPONENT_NAME]
   Priority: [P0/P1/P2]
   Goal: [STATE_GOAL]
   Success Criteria: [PROOF OF TEST PASSED]
   ```
   - Request and await approval
   - Execute test implementation
   - Verify success criteria
   - Update documentation

5. UI Standards
   - Icons: Use react-icons exclusively (no @chakra-ui/icons)
   - Styling: Use Chakra UI v3 exclusively (no Tailwind CSS)

## Example Test Goals

### Authentication (P0)
- Component: `LoginForm`
- Goal: "Ensure secure user authentication with proper error handling"
- Success: "Tests verify successful login, invalid credentials handling, and session creation"

### Data Operations (P0)
- Component: `DataOperations`
- Goal: "Validate CRUD operations maintain data integrity"
- Success: "All CRUD operations pass with proper validation, error handling, and database state verification"

### UI Components (P1)
- Component: `DataTable`
- Goal: "Verify table sorting, filtering, and pagination work correctly"
- Success: "Tests confirm all table operations work with various data sets and edge cases"

### Integration (P0)
- Component: `AttendanceRecorder`
- Goal: "Verify complete attendance recording flow"
- Success: "End-to-end flow passes including QR scanning, validation, and database update"

### Error Handling (P1)
- Component: `ErrorBoundary`
- Goal: "Ensure proper error capture and display"
- Success: "Tests verify error catching, logging, and user-friendly display"

### Performance (P2)
- Component: `ReportGenerator`
- Goal: "Verify report generation meets performance criteria"
- Success: "Large dataset processing completes within specified time limits"

## Testing Stack

Our testing stack consists of:
- Vitest: Primary test runner for unit and integration tests
- React Testing Library: Testing utility for React components
- MSW: API mocking
- Cypress: E2E testing
- Chakra UI Testing Library: UI component testing utilities

## Test File Naming

- Unit/Integration tests: `*.test.ts` or `*.spec.ts`
- E2E tests: `*.cy.ts`
- Test utilities: `*.test.utils.ts`

## Coverage Requirements

### By Priority
- P0 Features: 90%+
- P1 Features: 80%+
- P2 Features: 60%+

### By Test Type
- Unit Tests: 85%
- Integration Tests: 75%
- E2E Tests: 60%

## Testing Standards

1. Use Vitest's built-in assertions and utilities
2. Implement proper cleanup after each test
3. Mock external dependencies appropriately
4. Follow React Testing Library's best practices
5. Use MSW for API mocking
6. Implement proper error boundary testing
7. Test both success and error paths
8. Include accessibility testing where applicable

## Component Testing

1. Use React Testing Library's render and testing utilities
2. Implement proper Chakra UI provider wrapping
3. Test component interactions and state changes
4. Verify proper error handling
5. Test loading states
6. Verify accessibility requirements

## Example Test Setup

```typescript
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import { ChakraProvider } from '@chakra-ui/react';
import { theme } from '@/theme';

const renderWithChakra = (ui: React.ReactElement) => {
  return render(
    <ChakraProvider theme={theme}>
      {ui}
    </ChakraProvider>
  );
};
```

## Required Test Documentation

Each test file should include:
1. Brief description of what's being tested
2. Any special setup requirements
3. Clear test case descriptions
4. Documentation of edge cases
5. Any assumptions made

## Performance Testing

1. Component render performance
2. State update performance
3. Event handling performance
4. Network request handling
5. Loading state management

## Accessibility Testing

1. ARIA attributes
2. Keyboard navigation
3. Screen reader compatibility
4. Color contrast
5. Focus management
