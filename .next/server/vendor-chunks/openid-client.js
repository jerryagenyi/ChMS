/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/openid-client";
exports.ids = ["vendor-chunks/openid-client"];
exports.modules = {

/***/ "(rsc)/./node_modules/openid-client/lib/client.js":
/*!**************************************************!*\
  !*** ./node_modules/openid-client/lib/client.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst _excluded = [\n    \"id_token_hint\"\n], _excluded2 = [\n    \"initialAccessToken\",\n    \"jwks\"\n];\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for(i = 0; i < sourceSymbolKeys.length; i++){\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\nfunction ownKeys(e, r) {\n    var t = Object.keys(e);\n    if (Object.getOwnPropertySymbols) {\n        var o = Object.getOwnPropertySymbols(e);\n        r && (o = o.filter(function(r) {\n            return Object.getOwnPropertyDescriptor(e, r).enumerable;\n        })), t.push.apply(t, o);\n    }\n    return t;\n}\nfunction _objectSpread(e) {\n    for(var r = 1; r < arguments.length; r++){\n        var t = null != arguments[r] ? arguments[r] : {};\n        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {\n            _defineProperty(e, r, t[r]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {\n            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n        });\n    }\n    return e;\n}\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\nconst { inspect } = __webpack_require__(/*! util */ \"util\");\nconst stdhttp = __webpack_require__(/*! http */ \"http\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst { strict: assert } = __webpack_require__(/*! assert */ \"assert\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst { URL, URLSearchParams } = __webpack_require__(/*! url */ \"url\");\nconst jose = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js\");\nconst tokenHash = __webpack_require__(/*! oidc-token-hash */ \"(rsc)/./node_modules/oidc-token-hash/lib/index.js\");\nconst isKeyObject = __webpack_require__(/*! ./helpers/is_key_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_key_object.js\");\nconst decodeJWT = __webpack_require__(/*! ./helpers/decode_jwt */ \"(rsc)/./node_modules/openid-client/lib/helpers/decode_jwt.js\");\nconst base64url = __webpack_require__(/*! ./helpers/base64url */ \"(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\");\nconst defaults = __webpack_require__(/*! ./helpers/defaults */ \"(rsc)/./node_modules/openid-client/lib/helpers/defaults.js\");\nconst parseWwwAuthenticate = __webpack_require__(/*! ./helpers/www_authenticate_parser */ \"(rsc)/./node_modules/openid-client/lib/helpers/www_authenticate_parser.js\");\nconst { assertSigningAlgValuesSupport, assertIssuerConfiguration } = __webpack_require__(/*! ./helpers/assert */ \"(rsc)/./node_modules/openid-client/lib/helpers/assert.js\");\nconst pick = __webpack_require__(/*! ./helpers/pick */ \"(rsc)/./node_modules/openid-client/lib/helpers/pick.js\");\nconst isPlainObject = __webpack_require__(/*! ./helpers/is_plain_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\");\nconst processResponse = __webpack_require__(/*! ./helpers/process_response */ \"(rsc)/./node_modules/openid-client/lib/helpers/process_response.js\");\nconst TokenSet = __webpack_require__(/*! ./token_set */ \"(rsc)/./node_modules/openid-client/lib/token_set.js\");\nconst { OPError, RPError } = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst now = __webpack_require__(/*! ./helpers/unix_timestamp */ \"(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\");\nconst { random } = __webpack_require__(/*! ./helpers/generators */ \"(rsc)/./node_modules/openid-client/lib/helpers/generators.js\");\nconst request = __webpack_require__(/*! ./helpers/request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nconst { CLOCK_TOLERANCE } = __webpack_require__(/*! ./helpers/consts */ \"(rsc)/./node_modules/openid-client/lib/helpers/consts.js\");\nconst { keystores } = __webpack_require__(/*! ./helpers/weak_cache */ \"(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js\");\nconst KeyStore = __webpack_require__(/*! ./helpers/keystore */ \"(rsc)/./node_modules/openid-client/lib/helpers/keystore.js\");\nconst clone = __webpack_require__(/*! ./helpers/deep_clone */ \"(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\");\nconst { authenticatedPost, resolveResponseType, resolveRedirectUri } = __webpack_require__(/*! ./helpers/client */ \"(rsc)/./node_modules/openid-client/lib/helpers/client.js\");\nconst { queryKeyStore } = __webpack_require__(/*! ./helpers/issuer */ \"(rsc)/./node_modules/openid-client/lib/helpers/issuer.js\");\nconst DeviceFlowHandle = __webpack_require__(/*! ./device_flow_handle */ \"(rsc)/./node_modules/openid-client/lib/device_flow_handle.js\");\nconst [major, minor] = process.version.slice(1).split('.').map((str)=>parseInt(str, 10));\nconst rsaPssParams = major >= 17 || major === 16 && minor >= 9;\nconst retryAttempt = Symbol();\nconst skipNonceCheck = Symbol();\nconst skipMaxAgeCheck = Symbol();\nfunction pickCb(input) {\n    return pick(input, 'access_token', // OAuth 2.0\n    'code', // OAuth 2.0\n    'error_description', // OAuth 2.0\n    'error_uri', // OAuth 2.0\n    'error', // OAuth 2.0\n    'expires_in', // OAuth 2.0\n    'id_token', // OIDC Core 1.0\n    'iss', // draft-ietf-oauth-iss-auth-resp\n    'response', // FAPI JARM\n    'session_state', // OIDC Session Management\n    'state', // OAuth 2.0\n    'token_type' // OAuth 2.0\n    );\n}\nfunction authorizationHeaderValue(token, tokenType = 'Bearer') {\n    return `${tokenType} ${token}`;\n}\nfunction getSearchParams(input) {\n    const parsed = url.parse(input);\n    if (!parsed.search) return {};\n    return querystring.parse(parsed.search.substring(1));\n}\nfunction verifyPresence(payload, jwt, prop) {\n    if (payload[prop] === undefined) {\n        throw new RPError({\n            message: `missing required JWT property ${prop}`,\n            jwt\n        });\n    }\n}\nfunction authorizationParams(params) {\n    const authParams = _objectSpread({\n        client_id: this.client_id,\n        scope: 'openid',\n        response_type: resolveResponseType.call(this),\n        redirect_uri: resolveRedirectUri.call(this)\n    }, params);\n    Object.entries(authParams).forEach(([key, value])=>{\n        if (value === null || value === undefined) {\n            delete authParams[key];\n        } else if (key === 'claims' && typeof value === 'object') {\n            authParams[key] = JSON.stringify(value);\n        } else if (key === 'resource' && Array.isArray(value)) {\n            authParams[key] = value;\n        } else if (typeof value !== 'string') {\n            authParams[key] = String(value);\n        }\n    });\n    return authParams;\n}\nfunction getKeystore(jwks) {\n    if (!isPlainObject(jwks) || !Array.isArray(jwks.keys) || jwks.keys.some((k)=>!isPlainObject(k) || !('kty' in k))) {\n        throw new TypeError('jwks must be a JSON Web Key Set formatted object');\n    }\n    return KeyStore.fromJWKS(jwks, {\n        onlyPrivate: true\n    });\n}\n// if an OP doesnt support client_secret_basic but supports client_secret_post, use it instead\n// this is in place to take care of most common pitfalls when first using discovered Issuers without\n// the support for default values defined by Discovery 1.0\nfunction checkBasicSupport(client, properties) {\n    try {\n        const supported = client.issuer.token_endpoint_auth_methods_supported;\n        if (!supported.includes(properties.token_endpoint_auth_method)) {\n            if (supported.includes('client_secret_post')) {\n                properties.token_endpoint_auth_method = 'client_secret_post';\n            }\n        }\n    } catch (err) {}\n}\nfunction handleCommonMistakes(client, metadata, properties) {\n    if (!metadata.token_endpoint_auth_method) {\n        // if no explicit value was provided\n        checkBasicSupport(client, properties);\n    }\n    // :fp: c'mon people... RTFM\n    if (metadata.redirect_uri) {\n        if (metadata.redirect_uris) {\n            throw new TypeError('provide a redirect_uri or redirect_uris, not both');\n        }\n        properties.redirect_uris = [\n            metadata.redirect_uri\n        ];\n        delete properties.redirect_uri;\n    }\n    if (metadata.response_type) {\n        if (metadata.response_types) {\n            throw new TypeError('provide a response_type or response_types, not both');\n        }\n        properties.response_types = [\n            metadata.response_type\n        ];\n        delete properties.response_type;\n    }\n}\nfunction getDefaultsForEndpoint(endpoint, issuer, properties) {\n    if (!issuer[`${endpoint}_endpoint`]) return;\n    const tokenEndpointAuthMethod = properties.token_endpoint_auth_method;\n    const tokenEndpointAuthSigningAlg = properties.token_endpoint_auth_signing_alg;\n    const eam = `${endpoint}_endpoint_auth_method`;\n    const easa = `${endpoint}_endpoint_auth_signing_alg`;\n    if (properties[eam] === undefined && properties[easa] === undefined) {\n        if (tokenEndpointAuthMethod !== undefined) {\n            properties[eam] = tokenEndpointAuthMethod;\n        }\n        if (tokenEndpointAuthSigningAlg !== undefined) {\n            properties[easa] = tokenEndpointAuthSigningAlg;\n        }\n    }\n}\nclass BaseClient {\n    #metadata;\n    #issuer;\n    #aadIssValidation;\n    #additionalAuthorizedParties;\n    constructor(issuer, aadIssValidation, metadata = {}, jwks, options){\n        this.#metadata = new Map();\n        this.#issuer = issuer;\n        this.#aadIssValidation = aadIssValidation;\n        if (typeof metadata.client_id !== 'string' || !metadata.client_id) {\n            throw new TypeError('client_id is required');\n        }\n        const properties = _objectSpread(_objectSpread(_objectSpread({\n            grant_types: [\n                'authorization_code'\n            ],\n            id_token_signed_response_alg: 'RS256',\n            authorization_signed_response_alg: 'RS256',\n            response_types: [\n                'code'\n            ],\n            token_endpoint_auth_method: 'client_secret_basic'\n        }, this.fapi1() ? {\n            grant_types: [\n                'authorization_code',\n                'implicit'\n            ],\n            id_token_signed_response_alg: 'PS256',\n            authorization_signed_response_alg: 'PS256',\n            response_types: [\n                'code id_token'\n            ],\n            tls_client_certificate_bound_access_tokens: true,\n            token_endpoint_auth_method: undefined\n        } : undefined), this.fapi2() ? {\n            id_token_signed_response_alg: 'PS256',\n            authorization_signed_response_alg: 'PS256',\n            token_endpoint_auth_method: undefined\n        } : undefined), metadata);\n        if (this.fapi()) {\n            switch(properties.token_endpoint_auth_method){\n                case 'self_signed_tls_client_auth':\n                case 'tls_client_auth':\n                    break;\n                case 'private_key_jwt':\n                    if (!jwks) {\n                        throw new TypeError('jwks is required');\n                    }\n                    break;\n                case undefined:\n                    throw new TypeError('token_endpoint_auth_method is required');\n                default:\n                    throw new TypeError('invalid or unsupported token_endpoint_auth_method');\n            }\n        }\n        if (this.fapi2()) {\n            if (properties.tls_client_certificate_bound_access_tokens && properties.dpop_bound_access_tokens) {\n                throw new TypeError('either tls_client_certificate_bound_access_tokens or dpop_bound_access_tokens must be set to true');\n            }\n            if (!properties.tls_client_certificate_bound_access_tokens && !properties.dpop_bound_access_tokens) {\n                throw new TypeError('either tls_client_certificate_bound_access_tokens or dpop_bound_access_tokens must be set to true');\n            }\n        }\n        handleCommonMistakes(this, metadata, properties);\n        assertSigningAlgValuesSupport('token', this.issuer, properties);\n        [\n            'introspection',\n            'revocation'\n        ].forEach((endpoint)=>{\n            getDefaultsForEndpoint(endpoint, this.issuer, properties);\n            assertSigningAlgValuesSupport(endpoint, this.issuer, properties);\n        });\n        Object.entries(properties).forEach(([key, value])=>{\n            this.#metadata.set(key, value);\n            if (!this[key]) {\n                Object.defineProperty(this, key, {\n                    get () {\n                        return this.#metadata.get(key);\n                    },\n                    enumerable: true\n                });\n            }\n        });\n        if (jwks !== undefined) {\n            const keystore = getKeystore.call(this, jwks);\n            keystores.set(this, keystore);\n        }\n        if (options != null && options.additionalAuthorizedParties) {\n            this.#additionalAuthorizedParties = clone(options.additionalAuthorizedParties);\n        }\n        this[CLOCK_TOLERANCE] = 0;\n    }\n    authorizationUrl(params = {}) {\n        if (!isPlainObject(params)) {\n            throw new TypeError('params must be a plain object');\n        }\n        assertIssuerConfiguration(this.issuer, 'authorization_endpoint');\n        const target = new URL(this.issuer.authorization_endpoint);\n        for (const [name, value] of Object.entries(authorizationParams.call(this, params))){\n            if (Array.isArray(value)) {\n                target.searchParams.delete(name);\n                for (const member of value){\n                    target.searchParams.append(name, member);\n                }\n            } else {\n                target.searchParams.set(name, value);\n            }\n        }\n        // TODO: is the replace needed?\n        return target.href.replace(/\\+/g, '%20');\n    }\n    authorizationPost(params = {}) {\n        if (!isPlainObject(params)) {\n            throw new TypeError('params must be a plain object');\n        }\n        const inputs = authorizationParams.call(this, params);\n        const formInputs = Object.keys(inputs).map((name)=>`<input type=\"hidden\" name=\"${name}\" value=\"${inputs[name]}\"/>`).join('\\n');\n        return `<!DOCTYPE html>\n<head>\n<title>Requesting Authorization</title>\n</head>\n<body onload=\"javascript:document.forms[0].submit()\">\n<form method=\"post\" action=\"${this.issuer.authorization_endpoint}\">\n  ${formInputs}\n</form>\n</body>\n</html>`;\n    }\n    endSessionUrl(params = {}) {\n        assertIssuerConfiguration(this.issuer, 'end_session_endpoint');\n        const { 0: postLogout, length } = this.post_logout_redirect_uris || [];\n        const { post_logout_redirect_uri = length === 1 ? postLogout : undefined } = params;\n        let id_token_hint;\n        var _params = params;\n        ({ id_token_hint } = _params);\n        params = _objectWithoutProperties(_params, _excluded);\n        _params;\n        if (id_token_hint instanceof TokenSet) {\n            if (!id_token_hint.id_token) {\n                throw new TypeError('id_token not present in TokenSet');\n            }\n            id_token_hint = id_token_hint.id_token;\n        }\n        const target = url.parse(this.issuer.end_session_endpoint);\n        const query = defaults(getSearchParams(this.issuer.end_session_endpoint), params, {\n            post_logout_redirect_uri,\n            client_id: this.client_id\n        }, {\n            id_token_hint\n        });\n        Object.entries(query).forEach(([key, value])=>{\n            if (value === null || value === undefined) {\n                delete query[key];\n            }\n        });\n        target.search = null;\n        target.query = query;\n        return url.format(target);\n    }\n    callbackParams(input) {\n        const isIncomingMessage = input instanceof stdhttp.IncomingMessage || input && input.method && input.url;\n        const isString = typeof input === 'string';\n        if (!isString && !isIncomingMessage) {\n            throw new TypeError('#callbackParams only accepts string urls, http.IncomingMessage or a lookalike');\n        }\n        if (isIncomingMessage) {\n            switch(input.method){\n                case 'GET':\n                    return pickCb(getSearchParams(input.url));\n                case 'POST':\n                    if (input.body === undefined) {\n                        throw new TypeError('incoming message body missing, include a body parser prior to this method call');\n                    }\n                    switch(typeof input.body){\n                        case 'object':\n                        case 'string':\n                            if (Buffer.isBuffer(input.body)) {\n                                return pickCb(querystring.parse(input.body.toString('utf-8')));\n                            }\n                            if (typeof input.body === 'string') {\n                                return pickCb(querystring.parse(input.body));\n                            }\n                            return pickCb(input.body);\n                        default:\n                            throw new TypeError('invalid IncomingMessage body object');\n                    }\n                default:\n                    throw new TypeError('invalid IncomingMessage method');\n            }\n        } else {\n            return pickCb(getSearchParams(input));\n        }\n    }\n    async callback(redirectUri, parameters, checks = {}, { exchangeBody, clientAssertionPayload, DPoP } = {}) {\n        let params = pickCb(parameters);\n        if (checks.jarm && !('response' in parameters)) {\n            throw new RPError({\n                message: 'expected a JARM response',\n                checks,\n                params\n            });\n        } else if ('response' in parameters) {\n            const decrypted = await this.decryptJARM(params.response);\n            params = await this.validateJARM(decrypted);\n        }\n        if (this.default_max_age && !checks.max_age) {\n            checks.max_age = this.default_max_age;\n        }\n        if (params.state && !checks.state) {\n            throw new TypeError('checks.state argument is missing');\n        }\n        if (!params.state && checks.state) {\n            throw new RPError({\n                message: 'state missing from the response',\n                checks,\n                params\n            });\n        }\n        if (checks.state !== params.state) {\n            throw new RPError({\n                printf: [\n                    'state mismatch, expected %s, got: %s',\n                    checks.state,\n                    params.state\n                ],\n                checks,\n                params\n            });\n        }\n        if ('iss' in params) {\n            assertIssuerConfiguration(this.issuer, 'issuer');\n            if (params.iss !== this.issuer.issuer) {\n                throw new RPError({\n                    printf: [\n                        'iss mismatch, expected %s, got: %s',\n                        this.issuer.issuer,\n                        params.iss\n                    ],\n                    params\n                });\n            }\n        } else if (this.issuer.authorization_response_iss_parameter_supported && !('id_token' in params) && !('response' in parameters)) {\n            throw new RPError({\n                message: 'iss missing from the response',\n                params\n            });\n        }\n        if (params.error) {\n            throw new OPError(params);\n        }\n        const RESPONSE_TYPE_REQUIRED_PARAMS = {\n            code: [\n                'code'\n            ],\n            id_token: [\n                'id_token'\n            ],\n            token: [\n                'access_token',\n                'token_type'\n            ]\n        };\n        if (checks.response_type) {\n            for (const type of checks.response_type.split(' ')){\n                if (type === 'none') {\n                    if (params.code || params.id_token || params.access_token) {\n                        throw new RPError({\n                            message: 'unexpected params encountered for \"none\" response',\n                            checks,\n                            params\n                        });\n                    }\n                } else {\n                    for (const param of RESPONSE_TYPE_REQUIRED_PARAMS[type]){\n                        if (!params[param]) {\n                            throw new RPError({\n                                message: `${param} missing from response`,\n                                checks,\n                                params\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if (params.id_token) {\n            const tokenset = new TokenSet(params);\n            await this.decryptIdToken(tokenset);\n            await this.validateIdToken(tokenset, checks.nonce, 'authorization', checks.max_age, checks.state);\n            if (!params.code) {\n                return tokenset;\n            }\n        }\n        if (params.code) {\n            const tokenset = await this.grant(_objectSpread(_objectSpread({}, exchangeBody), {}, {\n                grant_type: 'authorization_code',\n                code: params.code,\n                redirect_uri: redirectUri,\n                code_verifier: checks.code_verifier\n            }), {\n                clientAssertionPayload,\n                DPoP\n            });\n            await this.decryptIdToken(tokenset);\n            await this.validateIdToken(tokenset, checks.nonce, 'token', checks.max_age);\n            if (params.session_state) {\n                tokenset.session_state = params.session_state;\n            }\n            return tokenset;\n        }\n        return new TokenSet(params);\n    }\n    async oauthCallback(redirectUri, parameters, checks = {}, { exchangeBody, clientAssertionPayload, DPoP } = {}) {\n        let params = pickCb(parameters);\n        if (checks.jarm && !('response' in parameters)) {\n            throw new RPError({\n                message: 'expected a JARM response',\n                checks,\n                params\n            });\n        } else if ('response' in parameters) {\n            const decrypted = await this.decryptJARM(params.response);\n            params = await this.validateJARM(decrypted);\n        }\n        if (params.state && !checks.state) {\n            throw new TypeError('checks.state argument is missing');\n        }\n        if (!params.state && checks.state) {\n            throw new RPError({\n                message: 'state missing from the response',\n                checks,\n                params\n            });\n        }\n        if (checks.state !== params.state) {\n            throw new RPError({\n                printf: [\n                    'state mismatch, expected %s, got: %s',\n                    checks.state,\n                    params.state\n                ],\n                checks,\n                params\n            });\n        }\n        if ('iss' in params) {\n            assertIssuerConfiguration(this.issuer, 'issuer');\n            if (params.iss !== this.issuer.issuer) {\n                throw new RPError({\n                    printf: [\n                        'iss mismatch, expected %s, got: %s',\n                        this.issuer.issuer,\n                        params.iss\n                    ],\n                    params\n                });\n            }\n        } else if (this.issuer.authorization_response_iss_parameter_supported && !('id_token' in params) && !('response' in parameters)) {\n            throw new RPError({\n                message: 'iss missing from the response',\n                params\n            });\n        }\n        if (params.error) {\n            throw new OPError(params);\n        }\n        if (typeof params.id_token === 'string' && params.id_token.length) {\n            throw new RPError({\n                message: 'id_token detected in the response, you must use client.callback() instead of client.oauthCallback()',\n                params\n            });\n        }\n        delete params.id_token;\n        const RESPONSE_TYPE_REQUIRED_PARAMS = {\n            code: [\n                'code'\n            ],\n            token: [\n                'access_token',\n                'token_type'\n            ]\n        };\n        if (checks.response_type) {\n            for (const type of checks.response_type.split(' ')){\n                if (type === 'none') {\n                    if (params.code || params.id_token || params.access_token) {\n                        throw new RPError({\n                            message: 'unexpected params encountered for \"none\" response',\n                            checks,\n                            params\n                        });\n                    }\n                }\n                if (RESPONSE_TYPE_REQUIRED_PARAMS[type]) {\n                    for (const param of RESPONSE_TYPE_REQUIRED_PARAMS[type]){\n                        if (!params[param]) {\n                            throw new RPError({\n                                message: `${param} missing from response`,\n                                checks,\n                                params\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        if (params.code) {\n            const tokenset = await this.grant(_objectSpread(_objectSpread({}, exchangeBody), {}, {\n                grant_type: 'authorization_code',\n                code: params.code,\n                redirect_uri: redirectUri,\n                code_verifier: checks.code_verifier\n            }), {\n                clientAssertionPayload,\n                DPoP\n            });\n            if (typeof tokenset.id_token === 'string' && tokenset.id_token.length) {\n                throw new RPError({\n                    message: 'id_token detected in the response, you must use client.callback() instead of client.oauthCallback()',\n                    params\n                });\n            }\n            delete tokenset.id_token;\n            return tokenset;\n        }\n        return new TokenSet(params);\n    }\n    async decryptIdToken(token) {\n        if (!this.id_token_encrypted_response_alg) {\n            return token;\n        }\n        let idToken = token;\n        if (idToken instanceof TokenSet) {\n            if (!idToken.id_token) {\n                throw new TypeError('id_token not present in TokenSet');\n            }\n            idToken = idToken.id_token;\n        }\n        const expectedAlg = this.id_token_encrypted_response_alg;\n        const expectedEnc = this.id_token_encrypted_response_enc;\n        const result = await this.decryptJWE(idToken, expectedAlg, expectedEnc);\n        if (token instanceof TokenSet) {\n            token.id_token = result;\n            return token;\n        }\n        return result;\n    }\n    async validateJWTUserinfo(body) {\n        const expectedAlg = this.userinfo_signed_response_alg;\n        return this.validateJWT(body, expectedAlg, []);\n    }\n    async decryptJARM(response) {\n        if (!this.authorization_encrypted_response_alg) {\n            return response;\n        }\n        const expectedAlg = this.authorization_encrypted_response_alg;\n        const expectedEnc = this.authorization_encrypted_response_enc;\n        return this.decryptJWE(response, expectedAlg, expectedEnc);\n    }\n    async decryptJWTUserinfo(body) {\n        if (!this.userinfo_encrypted_response_alg) {\n            return body;\n        }\n        const expectedAlg = this.userinfo_encrypted_response_alg;\n        const expectedEnc = this.userinfo_encrypted_response_enc;\n        return this.decryptJWE(body, expectedAlg, expectedEnc);\n    }\n    async decryptJWE(jwe, expectedAlg, expectedEnc = 'A128CBC-HS256') {\n        const header = JSON.parse(base64url.decode(jwe.split('.')[0]));\n        if (header.alg !== expectedAlg) {\n            throw new RPError({\n                printf: [\n                    'unexpected JWE alg received, expected %s, got: %s',\n                    expectedAlg,\n                    header.alg\n                ],\n                jwt: jwe\n            });\n        }\n        if (header.enc !== expectedEnc) {\n            throw new RPError({\n                printf: [\n                    'unexpected JWE enc received, expected %s, got: %s',\n                    expectedEnc,\n                    header.enc\n                ],\n                jwt: jwe\n            });\n        }\n        const getPlaintext = (result)=>new TextDecoder().decode(result.plaintext);\n        let plaintext;\n        if (expectedAlg.match(/^(?:RSA|ECDH)/)) {\n            const keystore = await keystores.get(this);\n            const protectedHeader = jose.decodeProtectedHeader(jwe);\n            for (const key of keystore.all(_objectSpread(_objectSpread({}, protectedHeader), {}, {\n                use: 'enc'\n            }))){\n                plaintext = await jose.compactDecrypt(jwe, await key.keyObject(protectedHeader.alg)).then(getPlaintext, ()=>{});\n                if (plaintext) break;\n            }\n        } else {\n            plaintext = await jose.compactDecrypt(jwe, this.secretForAlg(expectedAlg === 'dir' ? expectedEnc : expectedAlg)).then(getPlaintext, ()=>{});\n        }\n        if (!plaintext) {\n            throw new RPError({\n                message: 'failed to decrypt JWE',\n                jwt: jwe\n            });\n        }\n        return plaintext;\n    }\n    async validateIdToken(tokenSet, nonce, returnedBy, maxAge, state) {\n        let idToken = tokenSet;\n        const expectedAlg = this.id_token_signed_response_alg;\n        const isTokenSet = idToken instanceof TokenSet;\n        if (isTokenSet) {\n            if (!idToken.id_token) {\n                throw new TypeError('id_token not present in TokenSet');\n            }\n            idToken = idToken.id_token;\n        }\n        idToken = String(idToken);\n        const timestamp = now();\n        const { protected: header, payload, key } = await this.validateJWT(idToken, expectedAlg);\n        if (typeof maxAge === 'number' || maxAge !== skipMaxAgeCheck && this.require_auth_time) {\n            if (!payload.auth_time) {\n                throw new RPError({\n                    message: 'missing required JWT property auth_time',\n                    jwt: idToken\n                });\n            }\n            if (typeof payload.auth_time !== 'number') {\n                throw new RPError({\n                    message: 'JWT auth_time claim must be a JSON numeric value',\n                    jwt: idToken\n                });\n            }\n        }\n        if (typeof maxAge === 'number' && payload.auth_time + maxAge < timestamp - this[CLOCK_TOLERANCE]) {\n            throw new RPError({\n                printf: [\n                    'too much time has elapsed since the last End-User authentication, max_age %i, auth_time: %i, now %i',\n                    maxAge,\n                    payload.auth_time,\n                    timestamp - this[CLOCK_TOLERANCE]\n                ],\n                now: timestamp,\n                tolerance: this[CLOCK_TOLERANCE],\n                auth_time: payload.auth_time,\n                jwt: idToken\n            });\n        }\n        if (nonce !== skipNonceCheck && (payload.nonce || nonce !== undefined) && payload.nonce !== nonce) {\n            throw new RPError({\n                printf: [\n                    'nonce mismatch, expected %s, got: %s',\n                    nonce,\n                    payload.nonce\n                ],\n                jwt: idToken\n            });\n        }\n        if (returnedBy === 'authorization') {\n            if (!payload.at_hash && tokenSet.access_token) {\n                throw new RPError({\n                    message: 'missing required property at_hash',\n                    jwt: idToken\n                });\n            }\n            if (!payload.c_hash && tokenSet.code) {\n                throw new RPError({\n                    message: 'missing required property c_hash',\n                    jwt: idToken\n                });\n            }\n            if (this.fapi1()) {\n                if (!payload.s_hash && (tokenSet.state || state)) {\n                    throw new RPError({\n                        message: 'missing required property s_hash',\n                        jwt: idToken\n                    });\n                }\n            }\n            if (payload.s_hash) {\n                if (!state) {\n                    throw new TypeError('cannot verify s_hash, \"checks.state\" property not provided');\n                }\n                try {\n                    tokenHash.validate({\n                        claim: 's_hash',\n                        source: 'state'\n                    }, payload.s_hash, state, header.alg, key.jwk && key.jwk.crv);\n                } catch (err) {\n                    throw new RPError({\n                        message: err.message,\n                        jwt: idToken\n                    });\n                }\n            }\n        }\n        if (this.fapi() && payload.iat < timestamp - 3600) {\n            throw new RPError({\n                printf: [\n                    'JWT issued too far in the past, now %i, iat %i',\n                    timestamp,\n                    payload.iat\n                ],\n                now: timestamp,\n                tolerance: this[CLOCK_TOLERANCE],\n                iat: payload.iat,\n                jwt: idToken\n            });\n        }\n        if (tokenSet.access_token && payload.at_hash !== undefined) {\n            try {\n                tokenHash.validate({\n                    claim: 'at_hash',\n                    source: 'access_token'\n                }, payload.at_hash, tokenSet.access_token, header.alg, key.jwk && key.jwk.crv);\n            } catch (err) {\n                throw new RPError({\n                    message: err.message,\n                    jwt: idToken\n                });\n            }\n        }\n        if (tokenSet.code && payload.c_hash !== undefined) {\n            try {\n                tokenHash.validate({\n                    claim: 'c_hash',\n                    source: 'code'\n                }, payload.c_hash, tokenSet.code, header.alg, key.jwk && key.jwk.crv);\n            } catch (err) {\n                throw new RPError({\n                    message: err.message,\n                    jwt: idToken\n                });\n            }\n        }\n        return tokenSet;\n    }\n    async validateJWT(jwt, expectedAlg, required = [\n        'iss',\n        'sub',\n        'aud',\n        'exp',\n        'iat'\n    ]) {\n        const isSelfIssued = this.issuer.issuer === 'https://self-issued.me';\n        const timestamp = now();\n        let header;\n        let payload;\n        try {\n            ({ header, payload } = decodeJWT(jwt, {\n                complete: true\n            }));\n        } catch (err) {\n            throw new RPError({\n                printf: [\n                    'failed to decode JWT (%s: %s)',\n                    err.name,\n                    err.message\n                ],\n                jwt\n            });\n        }\n        if (header.alg !== expectedAlg) {\n            throw new RPError({\n                printf: [\n                    'unexpected JWT alg received, expected %s, got: %s',\n                    expectedAlg,\n                    header.alg\n                ],\n                jwt\n            });\n        }\n        if (isSelfIssued) {\n            required = [\n                ...required,\n                'sub_jwk'\n            ];\n        }\n        required.forEach(verifyPresence.bind(undefined, payload, jwt));\n        if (payload.iss !== undefined) {\n            let expectedIss = this.issuer.issuer;\n            if (this.#aadIssValidation) {\n                expectedIss = this.issuer.issuer.replace('{tenantid}', payload.tid);\n            }\n            if (payload.iss !== expectedIss) {\n                throw new RPError({\n                    printf: [\n                        'unexpected iss value, expected %s, got: %s',\n                        expectedIss,\n                        payload.iss\n                    ],\n                    jwt\n                });\n            }\n        }\n        if (payload.iat !== undefined) {\n            if (typeof payload.iat !== 'number') {\n                throw new RPError({\n                    message: 'JWT iat claim must be a JSON numeric value',\n                    jwt\n                });\n            }\n        }\n        if (payload.nbf !== undefined) {\n            if (typeof payload.nbf !== 'number') {\n                throw new RPError({\n                    message: 'JWT nbf claim must be a JSON numeric value',\n                    jwt\n                });\n            }\n            if (payload.nbf > timestamp + this[CLOCK_TOLERANCE]) {\n                throw new RPError({\n                    printf: [\n                        'JWT not active yet, now %i, nbf %i',\n                        timestamp + this[CLOCK_TOLERANCE],\n                        payload.nbf\n                    ],\n                    now: timestamp,\n                    tolerance: this[CLOCK_TOLERANCE],\n                    nbf: payload.nbf,\n                    jwt\n                });\n            }\n        }\n        if (payload.exp !== undefined) {\n            if (typeof payload.exp !== 'number') {\n                throw new RPError({\n                    message: 'JWT exp claim must be a JSON numeric value',\n                    jwt\n                });\n            }\n            if (timestamp - this[CLOCK_TOLERANCE] >= payload.exp) {\n                throw new RPError({\n                    printf: [\n                        'JWT expired, now %i, exp %i',\n                        timestamp - this[CLOCK_TOLERANCE],\n                        payload.exp\n                    ],\n                    now: timestamp,\n                    tolerance: this[CLOCK_TOLERANCE],\n                    exp: payload.exp,\n                    jwt\n                });\n            }\n        }\n        if (payload.aud !== undefined) {\n            if (Array.isArray(payload.aud)) {\n                if (payload.aud.length > 1 && !payload.azp) {\n                    throw new RPError({\n                        message: 'missing required JWT property azp',\n                        jwt\n                    });\n                }\n                if (!payload.aud.includes(this.client_id)) {\n                    throw new RPError({\n                        printf: [\n                            'aud is missing the client_id, expected %s to be included in %j',\n                            this.client_id,\n                            payload.aud\n                        ],\n                        jwt\n                    });\n                }\n            } else if (payload.aud !== this.client_id) {\n                throw new RPError({\n                    printf: [\n                        'aud mismatch, expected %s, got: %s',\n                        this.client_id,\n                        payload.aud\n                    ],\n                    jwt\n                });\n            }\n        }\n        if (payload.azp !== undefined) {\n            let additionalAuthorizedParties = this.#additionalAuthorizedParties;\n            if (typeof additionalAuthorizedParties === 'string') {\n                additionalAuthorizedParties = [\n                    this.client_id,\n                    additionalAuthorizedParties\n                ];\n            } else if (Array.isArray(additionalAuthorizedParties)) {\n                additionalAuthorizedParties = [\n                    this.client_id,\n                    ...additionalAuthorizedParties\n                ];\n            } else {\n                additionalAuthorizedParties = [\n                    this.client_id\n                ];\n            }\n            if (!additionalAuthorizedParties.includes(payload.azp)) {\n                throw new RPError({\n                    printf: [\n                        'azp mismatch, got: %s',\n                        payload.azp\n                    ],\n                    jwt\n                });\n            }\n        }\n        let keys;\n        if (isSelfIssued) {\n            try {\n                assert(isPlainObject(payload.sub_jwk));\n                const key = await jose.importJWK(payload.sub_jwk, header.alg);\n                assert.equal(key.type, 'public');\n                keys = [\n                    {\n                        keyObject () {\n                            return key;\n                        }\n                    }\n                ];\n            } catch (err) {\n                throw new RPError({\n                    message: 'failed to use sub_jwk claim as an asymmetric JSON Web Key',\n                    jwt\n                });\n            }\n            if (await jose.calculateJwkThumbprint(payload.sub_jwk) !== payload.sub) {\n                throw new RPError({\n                    message: 'failed to match the subject with sub_jwk',\n                    jwt\n                });\n            }\n        } else if (header.alg.startsWith('HS')) {\n            keys = [\n                this.secretForAlg(header.alg)\n            ];\n        } else if (header.alg !== 'none') {\n            keys = await queryKeyStore.call(this.issuer, _objectSpread(_objectSpread({}, header), {}, {\n                use: 'sig'\n            }));\n        }\n        if (!keys && header.alg === 'none') {\n            return {\n                protected: header,\n                payload\n            };\n        }\n        for (const key of keys){\n            const verified = await jose.compactVerify(jwt, key instanceof Uint8Array ? key : await key.keyObject(header.alg)).catch(()=>{});\n            if (verified) {\n                return {\n                    payload,\n                    protected: verified.protectedHeader,\n                    key\n                };\n            }\n        }\n        throw new RPError({\n            message: 'failed to validate JWT signature',\n            jwt\n        });\n    }\n    async refresh(refreshToken, { exchangeBody, clientAssertionPayload, DPoP } = {}) {\n        let token = refreshToken;\n        if (token instanceof TokenSet) {\n            if (!token.refresh_token) {\n                throw new TypeError('refresh_token not present in TokenSet');\n            }\n            token = token.refresh_token;\n        }\n        const tokenset = await this.grant(_objectSpread(_objectSpread({}, exchangeBody), {}, {\n            grant_type: 'refresh_token',\n            refresh_token: String(token)\n        }), {\n            clientAssertionPayload,\n            DPoP\n        });\n        if (tokenset.id_token) {\n            await this.decryptIdToken(tokenset);\n            await this.validateIdToken(tokenset, skipNonceCheck, 'token', skipMaxAgeCheck);\n            if (refreshToken instanceof TokenSet && refreshToken.id_token) {\n                const expectedSub = refreshToken.claims().sub;\n                const actualSub = tokenset.claims().sub;\n                if (actualSub !== expectedSub) {\n                    throw new RPError({\n                        printf: [\n                            'sub mismatch, expected %s, got: %s',\n                            expectedSub,\n                            actualSub\n                        ],\n                        jwt: tokenset.id_token\n                    });\n                }\n            }\n        }\n        return tokenset;\n    }\n    async requestResource(resourceUrl, accessToken, { method, headers, body, DPoP, tokenType = DPoP ? 'DPoP' : accessToken instanceof TokenSet ? accessToken.token_type : 'Bearer' } = {}, retry) {\n        if (accessToken instanceof TokenSet) {\n            if (!accessToken.access_token) {\n                throw new TypeError('access_token not present in TokenSet');\n            }\n            accessToken = accessToken.access_token;\n        }\n        if (!accessToken) {\n            throw new TypeError('no access token provided');\n        } else if (typeof accessToken !== 'string') {\n            throw new TypeError('invalid access token provided');\n        }\n        const requestOpts = {\n            headers: _objectSpread({\n                Authorization: authorizationHeaderValue(accessToken, tokenType)\n            }, headers),\n            body\n        };\n        const mTLS = !!this.tls_client_certificate_bound_access_tokens;\n        const response = await request.call(this, _objectSpread(_objectSpread({}, requestOpts), {}, {\n            responseType: 'buffer',\n            method,\n            url: resourceUrl\n        }), {\n            accessToken,\n            mTLS,\n            DPoP\n        });\n        const wwwAuthenticate = response.headers['www-authenticate'];\n        if (retry !== retryAttempt && wwwAuthenticate && wwwAuthenticate.toLowerCase().startsWith('dpop ') && parseWwwAuthenticate(wwwAuthenticate).error === 'use_dpop_nonce') {\n            return this.requestResource(resourceUrl, accessToken, {\n                method,\n                headers,\n                body,\n                DPoP,\n                tokenType\n            });\n        }\n        return response;\n    }\n    async userinfo(accessToken, { method = 'GET', via = 'header', tokenType, params, DPoP } = {}) {\n        assertIssuerConfiguration(this.issuer, 'userinfo_endpoint');\n        const options = {\n            tokenType,\n            method: String(method).toUpperCase(),\n            DPoP\n        };\n        if (options.method !== 'GET' && options.method !== 'POST') {\n            throw new TypeError('#userinfo() method can only be POST or a GET');\n        }\n        if (via === 'body' && options.method !== 'POST') {\n            throw new TypeError('can only send body on POST');\n        }\n        const jwt = !!(this.userinfo_signed_response_alg || this.userinfo_encrypted_response_alg);\n        if (jwt) {\n            options.headers = {\n                Accept: 'application/jwt'\n            };\n        } else {\n            options.headers = {\n                Accept: 'application/json'\n            };\n        }\n        const mTLS = !!this.tls_client_certificate_bound_access_tokens;\n        let targetUrl;\n        if (mTLS && this.issuer.mtls_endpoint_aliases) {\n            targetUrl = this.issuer.mtls_endpoint_aliases.userinfo_endpoint;\n        }\n        targetUrl = new URL(targetUrl || this.issuer.userinfo_endpoint);\n        if (via === 'body') {\n            options.headers.Authorization = undefined;\n            options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n            options.body = new URLSearchParams();\n            options.body.append('access_token', accessToken instanceof TokenSet ? accessToken.access_token : accessToken);\n        }\n        // handle additional parameters, GET via querystring, POST via urlencoded body\n        if (params) {\n            if (options.method === 'GET') {\n                Object.entries(params).forEach(([key, value])=>{\n                    targetUrl.searchParams.append(key, value);\n                });\n            } else if (options.body) {\n                // POST && via body\n                Object.entries(params).forEach(([key, value])=>{\n                    options.body.append(key, value);\n                });\n            } else {\n                // POST && via header\n                options.body = new URLSearchParams();\n                options.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n                Object.entries(params).forEach(([key, value])=>{\n                    options.body.append(key, value);\n                });\n            }\n        }\n        if (options.body) {\n            options.body = options.body.toString();\n        }\n        const response = await this.requestResource(targetUrl, accessToken, options);\n        let parsed = processResponse(response, {\n            bearer: true\n        });\n        if (jwt) {\n            if (!/^application\\/jwt/.test(response.headers['content-type'])) {\n                throw new RPError({\n                    message: 'expected application/jwt response from the userinfo_endpoint',\n                    response\n                });\n            }\n            const body = response.body.toString();\n            const userinfo = await this.decryptJWTUserinfo(body);\n            if (!this.userinfo_signed_response_alg) {\n                try {\n                    parsed = JSON.parse(userinfo);\n                    assert(isPlainObject(parsed));\n                } catch (err) {\n                    throw new RPError({\n                        message: 'failed to parse userinfo JWE payload as JSON',\n                        jwt: userinfo\n                    });\n                }\n            } else {\n                ({ payload: parsed } = await this.validateJWTUserinfo(userinfo));\n            }\n        } else {\n            try {\n                parsed = JSON.parse(response.body);\n            } catch (err) {\n                Object.defineProperty(err, 'response', {\n                    value: response\n                });\n                throw err;\n            }\n        }\n        if (accessToken instanceof TokenSet && accessToken.id_token) {\n            const expectedSub = accessToken.claims().sub;\n            if (parsed.sub !== expectedSub) {\n                throw new RPError({\n                    printf: [\n                        'userinfo sub mismatch, expected %s, got: %s',\n                        expectedSub,\n                        parsed.sub\n                    ],\n                    body: parsed,\n                    jwt: accessToken.id_token\n                });\n            }\n        }\n        return parsed;\n    }\n    encryptionSecret(len) {\n        const hash = len <= 256 ? 'sha256' : len <= 384 ? 'sha384' : len <= 512 ? 'sha512' : false;\n        if (!hash) {\n            throw new Error('unsupported symmetric encryption key derivation');\n        }\n        return crypto.createHash(hash).update(this.client_secret).digest().slice(0, len / 8);\n    }\n    secretForAlg(alg) {\n        if (!this.client_secret) {\n            throw new TypeError('client_secret is required');\n        }\n        if (/^A(\\d{3})(?:GCM)?KW$/.test(alg)) {\n            return this.encryptionSecret(parseInt(RegExp.$1, 10));\n        }\n        if (/^A(\\d{3})(?:GCM|CBC-HS(\\d{3}))$/.test(alg)) {\n            return this.encryptionSecret(parseInt(RegExp.$2 || RegExp.$1, 10));\n        }\n        return new TextEncoder().encode(this.client_secret);\n    }\n    async grant(body, { clientAssertionPayload, DPoP } = {}, retry) {\n        assertIssuerConfiguration(this.issuer, 'token_endpoint');\n        const response = await authenticatedPost.call(this, 'token', {\n            form: body,\n            responseType: 'json'\n        }, {\n            clientAssertionPayload,\n            DPoP\n        });\n        let responseBody;\n        try {\n            responseBody = processResponse(response);\n        } catch (err) {\n            if (retry !== retryAttempt && err instanceof OPError && err.error === 'use_dpop_nonce') {\n                return this.grant(body, {\n                    clientAssertionPayload,\n                    DPoP\n                }, retryAttempt);\n            }\n            throw err;\n        }\n        return new TokenSet(responseBody);\n    }\n    async deviceAuthorization(params = {}, { exchangeBody, clientAssertionPayload, DPoP } = {}) {\n        assertIssuerConfiguration(this.issuer, 'device_authorization_endpoint');\n        assertIssuerConfiguration(this.issuer, 'token_endpoint');\n        const body = authorizationParams.call(this, _objectSpread({\n            client_id: this.client_id,\n            redirect_uri: null,\n            response_type: null\n        }, params));\n        const response = await authenticatedPost.call(this, 'device_authorization', {\n            responseType: 'json',\n            form: body\n        }, {\n            clientAssertionPayload,\n            endpointAuthMethod: 'token'\n        });\n        const responseBody = processResponse(response);\n        return new DeviceFlowHandle({\n            client: this,\n            exchangeBody,\n            clientAssertionPayload,\n            response: responseBody,\n            maxAge: params.max_age,\n            DPoP\n        });\n    }\n    async revoke(token, hint, { revokeBody, clientAssertionPayload } = {}) {\n        assertIssuerConfiguration(this.issuer, 'revocation_endpoint');\n        if (hint !== undefined && typeof hint !== 'string') {\n            throw new TypeError('hint must be a string');\n        }\n        const form = _objectSpread(_objectSpread({}, revokeBody), {}, {\n            token\n        });\n        if (hint) {\n            form.token_type_hint = hint;\n        }\n        const response = await authenticatedPost.call(this, 'revocation', {\n            form\n        }, {\n            clientAssertionPayload\n        });\n        processResponse(response, {\n            body: false\n        });\n    }\n    async introspect(token, hint, { introspectBody, clientAssertionPayload } = {}) {\n        assertIssuerConfiguration(this.issuer, 'introspection_endpoint');\n        if (hint !== undefined && typeof hint !== 'string') {\n            throw new TypeError('hint must be a string');\n        }\n        const form = _objectSpread(_objectSpread({}, introspectBody), {}, {\n            token\n        });\n        if (hint) {\n            form.token_type_hint = hint;\n        }\n        const response = await authenticatedPost.call(this, 'introspection', {\n            form,\n            responseType: 'json'\n        }, {\n            clientAssertionPayload\n        });\n        const responseBody = processResponse(response);\n        return responseBody;\n    }\n    static async register(metadata, options = {}) {\n        const { initialAccessToken, jwks } = options, clientOptions = _objectWithoutProperties(options, _excluded2);\n        assertIssuerConfiguration(this.issuer, 'registration_endpoint');\n        if (jwks !== undefined && !(metadata.jwks || metadata.jwks_uri)) {\n            const keystore = await getKeystore.call(this, jwks);\n            metadata.jwks = keystore.toJWKS();\n        }\n        const response = await request.call(this, {\n            headers: _objectSpread({\n                Accept: 'application/json'\n            }, initialAccessToken ? {\n                Authorization: authorizationHeaderValue(initialAccessToken)\n            } : undefined),\n            responseType: 'json',\n            json: metadata,\n            url: this.issuer.registration_endpoint,\n            method: 'POST'\n        });\n        const responseBody = processResponse(response, {\n            statusCode: 201,\n            bearer: true\n        });\n        return new this(responseBody, jwks, clientOptions);\n    }\n    get metadata() {\n        return clone(Object.fromEntries(this.#metadata.entries()));\n    }\n    static async fromUri(registrationClientUri, registrationAccessToken, jwks, clientOptions) {\n        const response = await request.call(this, {\n            method: 'GET',\n            url: registrationClientUri,\n            responseType: 'json',\n            headers: {\n                Authorization: authorizationHeaderValue(registrationAccessToken),\n                Accept: 'application/json'\n            }\n        });\n        const responseBody = processResponse(response, {\n            bearer: true\n        });\n        return new this(responseBody, jwks, clientOptions);\n    }\n    async requestObject(requestObject = {}, { sign: signingAlgorithm = this.request_object_signing_alg || 'none', encrypt: { alg: eKeyManagement = this.request_object_encryption_alg, enc: eContentEncryption = this.request_object_encryption_enc || 'A128CBC-HS256' } = {} } = {}) {\n        if (!isPlainObject(requestObject)) {\n            throw new TypeError('requestObject must be a plain object');\n        }\n        let signed;\n        let key;\n        const unix = now();\n        const header = {\n            alg: signingAlgorithm,\n            typ: 'oauth-authz-req+jwt'\n        };\n        const payload = JSON.stringify(defaults({}, requestObject, _objectSpread({\n            iss: this.client_id,\n            aud: this.issuer.issuer,\n            client_id: this.client_id,\n            jti: random(),\n            iat: unix,\n            exp: unix + 300\n        }, this.fapi() ? {\n            nbf: unix\n        } : undefined)));\n        if (signingAlgorithm === 'none') {\n            signed = [\n                base64url.encode(JSON.stringify(header)),\n                base64url.encode(payload),\n                ''\n            ].join('.');\n        } else {\n            const symmetric = signingAlgorithm.startsWith('HS');\n            if (symmetric) {\n                key = this.secretForAlg(signingAlgorithm);\n            } else {\n                const keystore = await keystores.get(this);\n                if (!keystore) {\n                    throw new TypeError(`no keystore present for client, cannot sign using alg ${signingAlgorithm}`);\n                }\n                key = keystore.get({\n                    alg: signingAlgorithm,\n                    use: 'sig'\n                });\n                if (!key) {\n                    throw new TypeError(`no key to sign with found for alg ${signingAlgorithm}`);\n                }\n            }\n            signed = await new jose.CompactSign(new TextEncoder().encode(payload)).setProtectedHeader(_objectSpread(_objectSpread({}, header), {}, {\n                kid: symmetric ? undefined : key.jwk.kid\n            })).sign(symmetric ? key : await key.keyObject(signingAlgorithm));\n        }\n        if (!eKeyManagement) {\n            return signed;\n        }\n        const fields = {\n            alg: eKeyManagement,\n            enc: eContentEncryption,\n            cty: 'oauth-authz-req+jwt'\n        };\n        if (fields.alg.match(/^(RSA|ECDH)/)) {\n            [key] = await queryKeyStore.call(this.issuer, {\n                alg: fields.alg,\n                use: 'enc'\n            }, {\n                allowMulti: true\n            });\n        } else {\n            key = this.secretForAlg(fields.alg === 'dir' ? fields.enc : fields.alg);\n        }\n        return new jose.CompactEncrypt(new TextEncoder().encode(signed)).setProtectedHeader(_objectSpread(_objectSpread({}, fields), {}, {\n            kid: key instanceof Uint8Array ? undefined : key.jwk.kid\n        })).encrypt(key instanceof Uint8Array ? key : await key.keyObject(fields.alg));\n    }\n    async pushedAuthorizationRequest(params = {}, { clientAssertionPayload } = {}) {\n        assertIssuerConfiguration(this.issuer, 'pushed_authorization_request_endpoint');\n        const body = _objectSpread(_objectSpread({}, 'request' in params ? params : authorizationParams.call(this, params)), {}, {\n            client_id: this.client_id\n        });\n        const response = await authenticatedPost.call(this, 'pushed_authorization_request', {\n            responseType: 'json',\n            form: body\n        }, {\n            clientAssertionPayload,\n            endpointAuthMethod: 'token'\n        });\n        const responseBody = processResponse(response, {\n            statusCode: 201\n        });\n        if (!('expires_in' in responseBody)) {\n            throw new RPError({\n                message: 'expected expires_in in Pushed Authorization Successful Response',\n                response\n            });\n        }\n        if (typeof responseBody.expires_in !== 'number') {\n            throw new RPError({\n                message: 'invalid expires_in value in Pushed Authorization Successful Response',\n                response\n            });\n        }\n        if (!('request_uri' in responseBody)) {\n            throw new RPError({\n                message: 'expected request_uri in Pushed Authorization Successful Response',\n                response\n            });\n        }\n        if (typeof responseBody.request_uri !== 'string') {\n            throw new RPError({\n                message: 'invalid request_uri value in Pushed Authorization Successful Response',\n                response\n            });\n        }\n        return responseBody;\n    }\n    get issuer() {\n        return this.#issuer;\n    }\n    /* istanbul ignore next */ [inspect.custom]() {\n        return `${this.constructor.name} ${inspect(this.metadata, {\n            depth: Infinity,\n            colors: process.stdout.isTTY,\n            compact: false,\n            sorted: true\n        })}`;\n    }\n    fapi() {\n        return this.fapi1() || this.fapi2();\n    }\n    fapi1() {\n        return this.constructor.name === 'FAPI1Client';\n    }\n    fapi2() {\n        return this.constructor.name === 'FAPI2Client';\n    }\n    async validateJARM(response) {\n        const expectedAlg = this.authorization_signed_response_alg;\n        const { payload } = await this.validateJWT(response, expectedAlg, [\n            'iss',\n            'exp',\n            'aud'\n        ]);\n        return pickCb(payload);\n    }\n    /**\n   * @name dpopProof\n   * @api private\n   */ async dpopProof(payload, privateKeyInput, accessToken) {\n        if (!isPlainObject(payload)) {\n            throw new TypeError('payload must be a plain object');\n        }\n        let privateKey;\n        if (isKeyObject(privateKeyInput)) {\n            privateKey = privateKeyInput;\n        } else if (privateKeyInput[Symbol.toStringTag] === 'CryptoKey') {\n            privateKey = privateKeyInput;\n        } else if (jose.cryptoRuntime === 'node:crypto') {\n            privateKey = crypto.createPrivateKey(privateKeyInput);\n        } else {\n            throw new TypeError('unrecognized crypto runtime');\n        }\n        if (privateKey.type !== 'private') {\n            throw new TypeError('\"DPoP\" option must be a private key');\n        }\n        let alg = determineDPoPAlgorithm.call(this, privateKey, privateKeyInput);\n        if (!alg) {\n            throw new TypeError('could not determine DPoP JWS Algorithm');\n        }\n        return new jose.SignJWT(_objectSpread({\n            ath: accessToken ? base64url.encode(crypto.createHash('sha256').update(accessToken).digest()) : undefined\n        }, payload)).setProtectedHeader({\n            alg,\n            typ: 'dpop+jwt',\n            jwk: await getJwk(privateKey, privateKeyInput)\n        }).setIssuedAt().setJti(random()).sign(privateKey);\n    }\n}\nfunction determineDPoPAlgorithmFromCryptoKey(cryptoKey) {\n    switch(cryptoKey.algorithm.name){\n        case 'Ed25519':\n        case 'Ed448':\n            return 'EdDSA';\n        case 'ECDSA':\n            {\n                switch(cryptoKey.algorithm.namedCurve){\n                    case 'P-256':\n                        return 'ES256';\n                    case 'P-384':\n                        return 'ES384';\n                    case 'P-521':\n                        return 'ES512';\n                    default:\n                        break;\n                }\n                break;\n            }\n        case 'RSASSA-PKCS1-v1_5':\n            return `RS${cryptoKey.algorithm.hash.name.slice(4)}`;\n        case 'RSA-PSS':\n            return `PS${cryptoKey.algorithm.hash.name.slice(4)}`;\n        default:\n            throw new TypeError('unsupported DPoP private key');\n    }\n}\nlet determineDPoPAlgorithm;\nif (jose.cryptoRuntime === 'node:crypto') {\n    determineDPoPAlgorithm = function(privateKey, privateKeyInput) {\n        if (privateKeyInput[Symbol.toStringTag] === 'CryptoKey') {\n            return determineDPoPAlgorithmFromCryptoKey(privateKey);\n        }\n        switch(privateKey.asymmetricKeyType){\n            case 'ed25519':\n            case 'ed448':\n                return 'EdDSA';\n            case 'ec':\n                return determineEcAlgorithm(privateKey, privateKeyInput);\n            case 'rsa':\n            case rsaPssParams && 'rsa-pss':\n                return determineRsaAlgorithm(privateKey, privateKeyInput, this.issuer.dpop_signing_alg_values_supported);\n            default:\n                throw new TypeError('unsupported DPoP private key');\n        }\n    };\n    const RSPS = /^(?:RS|PS)(?:256|384|512)$/;\n    function determineRsaAlgorithm(privateKey, privateKeyInput, valuesSupported) {\n        if (typeof privateKeyInput === 'object' && privateKeyInput.format === 'jwk' && privateKeyInput.key && privateKeyInput.key.alg) {\n            return privateKeyInput.key.alg;\n        }\n        if (Array.isArray(valuesSupported)) {\n            let candidates = valuesSupported.filter(RegExp.prototype.test.bind(RSPS));\n            if (privateKey.asymmetricKeyType === 'rsa-pss') {\n                candidates = candidates.filter((value)=>value.startsWith('PS'));\n            }\n            return [\n                'PS256',\n                'PS384',\n                'PS512',\n                'RS256',\n                'RS384',\n                'RS384'\n            ].find((preferred)=>candidates.includes(preferred));\n        }\n        return 'PS256';\n    }\n    const p256 = Buffer.from([\n        42,\n        134,\n        72,\n        206,\n        61,\n        3,\n        1,\n        7\n    ]);\n    const p384 = Buffer.from([\n        43,\n        129,\n        4,\n        0,\n        34\n    ]);\n    const p521 = Buffer.from([\n        43,\n        129,\n        4,\n        0,\n        35\n    ]);\n    const secp256k1 = Buffer.from([\n        43,\n        129,\n        4,\n        0,\n        10\n    ]);\n    function determineEcAlgorithm(privateKey, privateKeyInput) {\n        // If input was a JWK\n        switch(typeof privateKeyInput === 'object' && typeof privateKeyInput.key === 'object' && privateKeyInput.key.crv){\n            case 'P-256':\n                return 'ES256';\n            case 'secp256k1':\n                return 'ES256K';\n            case 'P-384':\n                return 'ES384';\n            case 'P-512':\n                return 'ES512';\n            default:\n                break;\n        }\n        const buf = privateKey.export({\n            format: 'der',\n            type: 'pkcs8'\n        });\n        const i = buf[1] < 128 ? 17 : 18;\n        const len = buf[i];\n        const curveOid = buf.slice(i + 1, i + 1 + len);\n        if (curveOid.equals(p256)) {\n            return 'ES256';\n        }\n        if (curveOid.equals(p384)) {\n            return 'ES384';\n        }\n        if (curveOid.equals(p521)) {\n            return 'ES512';\n        }\n        if (curveOid.equals(secp256k1)) {\n            return 'ES256K';\n        }\n        throw new TypeError('unsupported DPoP private key curve');\n    }\n} else {\n    determineDPoPAlgorithm = determineDPoPAlgorithmFromCryptoKey;\n}\nconst jwkCache = new WeakMap();\nasync function getJwk(keyObject, privateKeyInput) {\n    if (jose.cryptoRuntime === 'node:crypto' && typeof privateKeyInput === 'object' && typeof privateKeyInput.key === 'object' && privateKeyInput.format === 'jwk') {\n        return pick(privateKeyInput.key, 'kty', 'crv', 'x', 'y', 'e', 'n');\n    }\n    if (jwkCache.has(privateKeyInput)) {\n        return jwkCache.get(privateKeyInput);\n    }\n    const jwk = pick(await jose.exportJWK(keyObject), 'kty', 'crv', 'x', 'y', 'e', 'n');\n    if (isKeyObject(privateKeyInput) || jose.cryptoRuntime === 'WebCryptoAPI') {\n        jwkCache.set(privateKeyInput, jwk);\n    }\n    return jwk;\n}\nmodule.exports = (issuer, aadIssValidation = false)=>class Client extends BaseClient {\n        constructor(...args){\n            super(issuer, aadIssValidation, ...args);\n        }\n        static get issuer() {\n            return issuer;\n        }\n    };\nmodule.exports.BaseClient = BaseClient;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/device_flow_handle.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/device_flow_handle.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst {\n  inspect\n} = __webpack_require__(/*! util */ \"util\");\nconst {\n  RPError,\n  OPError\n} = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst now = __webpack_require__(/*! ./helpers/unix_timestamp */ \"(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\");\nclass DeviceFlowHandle {\n  #aborted;\n  #client;\n  #clientAssertionPayload;\n  #DPoP;\n  #exchangeBody;\n  #expires_at;\n  #interval;\n  #maxAge;\n  #response;\n  constructor({\n    client,\n    exchangeBody,\n    clientAssertionPayload,\n    response,\n    maxAge,\n    DPoP\n  }) {\n    ['verification_uri', 'user_code', 'device_code'].forEach(prop => {\n      if (typeof response[prop] !== 'string' || !response[prop]) {\n        throw new RPError(`expected ${prop} string to be returned by Device Authorization Response, got %j`, response[prop]);\n      }\n    });\n    if (!Number.isSafeInteger(response.expires_in)) {\n      throw new RPError('expected expires_in number to be returned by Device Authorization Response, got %j', response.expires_in);\n    }\n    this.#expires_at = now() + response.expires_in;\n    this.#client = client;\n    this.#DPoP = DPoP;\n    this.#maxAge = maxAge;\n    this.#exchangeBody = exchangeBody;\n    this.#clientAssertionPayload = clientAssertionPayload;\n    this.#response = response;\n    this.#interval = response.interval * 1000 || 5000;\n  }\n  abort() {\n    this.#aborted = true;\n  }\n  async poll({\n    signal\n  } = {}) {\n    if (signal && signal.aborted || this.#aborted) {\n      throw new RPError('polling aborted');\n    }\n    if (this.expired()) {\n      throw new RPError('the device code %j has expired and the device authorization session has concluded', this.device_code);\n    }\n    await new Promise(resolve => setTimeout(resolve, this.#interval));\n    let tokenset;\n    try {\n      tokenset = await this.#client.grant(_objectSpread(_objectSpread({}, this.#exchangeBody), {}, {\n        grant_type: 'urn:ietf:params:oauth:grant-type:device_code',\n        device_code: this.device_code\n      }), {\n        clientAssertionPayload: this.#clientAssertionPayload,\n        DPoP: this.#DPoP\n      });\n    } catch (err) {\n      switch (err instanceof OPError && err.error) {\n        case 'slow_down':\n          this.#interval += 5000;\n        case 'authorization_pending':\n          return this.poll({\n            signal\n          });\n        default:\n          throw err;\n      }\n    }\n    if ('id_token' in tokenset) {\n      await this.#client.decryptIdToken(tokenset);\n      await this.#client.validateIdToken(tokenset, undefined, 'token', this.#maxAge);\n    }\n    return tokenset;\n  }\n  get device_code() {\n    return this.#response.device_code;\n  }\n  get user_code() {\n    return this.#response.user_code;\n  }\n  get verification_uri() {\n    return this.#response.verification_uri;\n  }\n  get verification_uri_complete() {\n    return this.#response.verification_uri_complete;\n  }\n  get expires_in() {\n    return Math.max.apply(null, [this.#expires_at - now(), 0]);\n  }\n  expired() {\n    return this.expires_in === 0;\n  }\n\n  /* istanbul ignore next */\n  [inspect.custom]() {\n    return `${this.constructor.name} ${inspect(this.#response, {\n      depth: Infinity,\n      colors: process.stdout.isTTY,\n      compact: false,\n      sorted: true\n    })}`;\n  }\n}\nmodule.exports = DeviceFlowHandle;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/device_flow_handle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/errors.js":
/*!**************************************************!*\
  !*** ./node_modules/openid-client/lib/errors.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const _excluded = [\"message\", \"printf\", \"response\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nconst {\n  format\n} = __webpack_require__(/*! util */ \"util\");\nclass OPError extends Error {\n  constructor({\n    error_description,\n    error,\n    error_uri,\n    session_state,\n    state,\n    scope\n  }, response) {\n    super(!error_description ? error : `${error} (${error_description})`);\n    Object.assign(this, {\n      error\n    }, error_description && {\n      error_description\n    }, error_uri && {\n      error_uri\n    }, state && {\n      state\n    }, scope && {\n      scope\n    }, session_state && {\n      session_state\n    });\n    if (response) {\n      Object.defineProperty(this, 'response', {\n        value: response\n      });\n    }\n    this.name = this.constructor.name;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nclass RPError extends Error {\n  constructor(...args) {\n    if (typeof args[0] === 'string') {\n      super(format(...args));\n    } else {\n      const _args$ = args[0],\n        {\n          message,\n          printf,\n          response\n        } = _args$,\n        rest = _objectWithoutProperties(_args$, _excluded);\n      if (printf) {\n        super(format(...printf));\n      } else {\n        super(message);\n      }\n      Object.assign(this, rest);\n      if (response) {\n        Object.defineProperty(this, 'response', {\n          value: response\n        });\n      }\n    }\n    this.name = this.constructor.name;\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\nmodule.exports = {\n  OPError,\n  RPError\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU07RUFBRUE7QUFBTyxDQUFDLEdBQUdDLG1CQUFPLENBQUMsa0JBQU0sQ0FBQztBQUVsQyxNQUFNQyxPQUFPLFNBQVNDLEtBQUssQ0FBQztFQUMxQkMsV0FBV0EsQ0FBQztJQUFFQyxpQkFBaUI7SUFBRUMsS0FBSztJQUFFQyxTQUFTO0lBQUVDLGFBQWE7SUFBRUMsS0FBSztJQUFFQztFQUFNLENBQUMsRUFBRUMsUUFBUSxFQUFFO0lBQzFGLEtBQUssQ0FBQyxDQUFDTixpQkFBaUIsR0FBR0MsS0FBSyxHQUFJLEdBQUVBLEtBQU0sS0FBSUQsaUJBQWtCLEdBQUUsQ0FBQztJQUVyRU8sTUFBTSxDQUFDQyxNQUFNLENBQ1gsSUFBSSxFQUNKO01BQUVQO0lBQU0sQ0FBQyxFQUNURCxpQkFBaUIsSUFBSTtNQUFFQTtJQUFrQixDQUFDLEVBQzFDRSxTQUFTLElBQUk7TUFBRUE7SUFBVSxDQUFDLEVBQzFCRSxLQUFLLElBQUk7TUFBRUE7SUFBTSxDQUFDLEVBQ2xCQyxLQUFLLElBQUk7TUFBRUE7SUFBTSxDQUFDLEVBQ2xCRixhQUFhLElBQUk7TUFBRUE7SUFBYyxDQUNuQyxDQUFDO0lBRUQsSUFBSUcsUUFBUSxFQUFFO01BQ1pDLE1BQU0sQ0FBQ0UsY0FBYyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7UUFDdENDLEtBQUssRUFBRUo7TUFDVCxDQUFDLENBQUM7SUFDSjtJQUVBLElBQUksQ0FBQ0ssSUFBSSxHQUFHLElBQUksQ0FBQ1osV0FBVyxDQUFDWSxJQUFJO0lBQ2pDYixLQUFLLENBQUNjLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNiLFdBQVcsQ0FBQztFQUNqRDtBQUNGO0FBRUEsTUFBTWMsT0FBTyxTQUFTZixLQUFLLENBQUM7RUFDMUJDLFdBQVdBLENBQUMsR0FBR2UsSUFBSSxFQUFFO0lBQ25CLElBQUksT0FBT0EsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtNQUMvQixLQUFLLENBQUNuQixNQUFNLENBQUMsR0FBR21CLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUMsTUFBTTtNQUNMLE1BQUFDLE1BQUEsR0FBK0NELElBQUksQ0FBQyxDQUFDLENBQUM7UUFBaEQ7VUFBRUUsT0FBTztVQUFFQyxNQUFNO1VBQUVYO1FBQWtCLENBQUMsR0FBQVMsTUFBQTtRQUFORyxJQUFJLEdBQUFDLHdCQUFBLENBQUFKLE1BQUEsRUFBQUssU0FBQTtNQUMxQyxJQUFJSCxNQUFNLEVBQUU7UUFDVixLQUFLLENBQUN0QixNQUFNLENBQUMsR0FBR3NCLE1BQU0sQ0FBQyxDQUFDO01BQzFCLENBQUMsTUFBTTtRQUNMLEtBQUssQ0FBQ0QsT0FBTyxDQUFDO01BQ2hCO01BQ0FULE1BQU0sQ0FBQ0MsTUFBTSxDQUFDLElBQUksRUFBRVUsSUFBSSxDQUFDO01BQ3pCLElBQUlaLFFBQVEsRUFBRTtRQUNaQyxNQUFNLENBQUNFLGNBQWMsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1VBQ3RDQyxLQUFLLEVBQUVKO1FBQ1QsQ0FBQyxDQUFDO01BQ0o7SUFDRjtJQUVBLElBQUksQ0FBQ0ssSUFBSSxHQUFHLElBQUksQ0FBQ1osV0FBVyxDQUFDWSxJQUFJO0lBQ2pDYixLQUFLLENBQUNjLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNiLFdBQVcsQ0FBQztFQUNqRDtBQUNGO0FBRUFzQixNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmekIsT0FBTztFQUNQZ0I7QUFDRixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBmb3JtYXQgfSA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuY2xhc3MgT1BFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoeyBlcnJvcl9kZXNjcmlwdGlvbiwgZXJyb3IsIGVycm9yX3VyaSwgc2Vzc2lvbl9zdGF0ZSwgc3RhdGUsIHNjb3BlIH0sIHJlc3BvbnNlKSB7XG4gICAgc3VwZXIoIWVycm9yX2Rlc2NyaXB0aW9uID8gZXJyb3IgOiBgJHtlcnJvcn0gKCR7ZXJyb3JfZGVzY3JpcHRpb259KWApO1xuXG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgIHRoaXMsXG4gICAgICB7IGVycm9yIH0sXG4gICAgICBlcnJvcl9kZXNjcmlwdGlvbiAmJiB7IGVycm9yX2Rlc2NyaXB0aW9uIH0sXG4gICAgICBlcnJvcl91cmkgJiYgeyBlcnJvcl91cmkgfSxcbiAgICAgIHN0YXRlICYmIHsgc3RhdGUgfSxcbiAgICAgIHNjb3BlICYmIHsgc2NvcGUgfSxcbiAgICAgIHNlc3Npb25fc3RhdGUgJiYgeyBzZXNzaW9uX3N0YXRlIH0sXG4gICAgKTtcblxuICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdyZXNwb25zZScsIHtcbiAgICAgICAgdmFsdWU6IHJlc3BvbnNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG59XG5cbmNsYXNzIFJQRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICBzdXBlcihmb3JtYXQoLi4uYXJncykpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IG1lc3NhZ2UsIHByaW50ZiwgcmVzcG9uc2UsIC4uLnJlc3QgfSA9IGFyZ3NbMF07XG4gICAgICBpZiAocHJpbnRmKSB7XG4gICAgICAgIHN1cGVyKGZvcm1hdCguLi5wcmludGYpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCByZXN0KTtcbiAgICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Jlc3BvbnNlJywge1xuICAgICAgICAgIHZhbHVlOiByZXNwb25zZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBPUEVycm9yLFxuICBSUEVycm9yLFxufTtcbiJdLCJuYW1lcyI6WyJmb3JtYXQiLCJyZXF1aXJlIiwiT1BFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJlcnJvcl9kZXNjcmlwdGlvbiIsImVycm9yIiwiZXJyb3JfdXJpIiwic2Vzc2lvbl9zdGF0ZSIsInN0YXRlIiwic2NvcGUiLCJyZXNwb25zZSIsIk9iamVjdCIsImFzc2lnbiIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJuYW1lIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJSUEVycm9yIiwiYXJncyIsIl9hcmdzJCIsIm1lc3NhZ2UiLCJwcmludGYiLCJyZXN0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiX2V4Y2x1ZGVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/assert.js":
/*!**********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/assert.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("function assertSigningAlgValuesSupport(endpoint, issuer, properties) {\n  if (!issuer[`${endpoint}_endpoint`]) return;\n  const eam = `${endpoint}_endpoint_auth_method`;\n  const easa = `${endpoint}_endpoint_auth_signing_alg`;\n  const easavs = `${endpoint}_endpoint_auth_signing_alg_values_supported`;\n  if (properties[eam] && properties[eam].endsWith('_jwt') && !properties[easa] && !issuer[easavs]) {\n    throw new TypeError(`${easavs} must be configured on the issuer if ${easa} is not defined on a client`);\n  }\n}\nfunction assertIssuerConfiguration(issuer, endpoint) {\n  if (!issuer[endpoint]) {\n    throw new TypeError(`${endpoint} must be configured on the issuer`);\n  }\n}\nmodule.exports = {\n  assertSigningAlgValuesSupport,\n  assertIssuerConfiguration\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9hc3NlcnQuanMiLCJuYW1lcyI6WyJhc3NlcnRTaWduaW5nQWxnVmFsdWVzU3VwcG9ydCIsImVuZHBvaW50IiwiaXNzdWVyIiwicHJvcGVydGllcyIsImVhbSIsImVhc2EiLCJlYXNhdnMiLCJlbmRzV2l0aCIsIlR5cGVFcnJvciIsImFzc2VydElzc3VlckNvbmZpZ3VyYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvYXNzZXJ0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGFzc2VydFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0KGVuZHBvaW50LCBpc3N1ZXIsIHByb3BlcnRpZXMpIHtcbiAgaWYgKCFpc3N1ZXJbYCR7ZW5kcG9pbnR9X2VuZHBvaW50YF0pIHJldHVybjtcblxuICBjb25zdCBlYW0gPSBgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9tZXRob2RgO1xuICBjb25zdCBlYXNhID0gYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfc2lnbmluZ19hbGdgO1xuICBjb25zdCBlYXNhdnMgPSBgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkYDtcblxuICBpZiAocHJvcGVydGllc1tlYW1dICYmIHByb3BlcnRpZXNbZWFtXS5lbmRzV2l0aCgnX2p3dCcpICYmICFwcm9wZXJ0aWVzW2Vhc2FdICYmICFpc3N1ZXJbZWFzYXZzXSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBgJHtlYXNhdnN9IG11c3QgYmUgY29uZmlndXJlZCBvbiB0aGUgaXNzdWVyIGlmICR7ZWFzYX0gaXMgbm90IGRlZmluZWQgb24gYSBjbGllbnRgLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbihpc3N1ZXIsIGVuZHBvaW50KSB7XG4gIGlmICghaXNzdWVyW2VuZHBvaW50XSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7ZW5kcG9pbnR9IG11c3QgYmUgY29uZmlndXJlZCBvbiB0aGUgaXNzdWVyYCk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydFNpZ25pbmdBbGdWYWx1ZXNTdXBwb3J0LFxuICBhc3NlcnRJc3N1ZXJDb25maWd1cmF0aW9uLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsNkJBQTZCQSxDQUFDQyxRQUFRLEVBQUVDLE1BQU0sRUFBRUMsVUFBVSxFQUFFO0VBQ25FLElBQUksQ0FBQ0QsTUFBTSxDQUFFLEdBQUVELFFBQVMsV0FBVSxDQUFDLEVBQUU7RUFFckMsTUFBTUcsR0FBRyxHQUFJLEdBQUVILFFBQVMsdUJBQXNCO0VBQzlDLE1BQU1JLElBQUksR0FBSSxHQUFFSixRQUFTLDRCQUEyQjtFQUNwRCxNQUFNSyxNQUFNLEdBQUksR0FBRUwsUUFBUyw2Q0FBNEM7RUFFdkUsSUFBSUUsVUFBVSxDQUFDQyxHQUFHLENBQUMsSUFBSUQsVUFBVSxDQUFDQyxHQUFHLENBQUMsQ0FBQ0csUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUNKLFVBQVUsQ0FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQ0gsTUFBTSxDQUFDSSxNQUFNLENBQUMsRUFBRTtJQUMvRixNQUFNLElBQUlFLFNBQVMsQ0FDaEIsR0FBRUYsTUFBTyx3Q0FBdUNELElBQUssNkJBQ3hELENBQUM7RUFDSDtBQUNGO0FBRUEsU0FBU0kseUJBQXlCQSxDQUFDUCxNQUFNLEVBQUVELFFBQVEsRUFBRTtFQUNuRCxJQUFJLENBQUNDLE1BQU0sQ0FBQ0QsUUFBUSxDQUFDLEVBQUU7SUFDckIsTUFBTSxJQUFJTyxTQUFTLENBQUUsR0FBRVAsUUFBUyxtQ0FBa0MsQ0FBQztFQUNyRTtBQUNGO0FBRUFTLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZYLDZCQUE2QjtFQUM3QlM7QUFDRixDQUFDIiwiaWdub3JlTGlzdCI6WzBdfQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/assert.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/base64url.js":
/*!*************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/base64url.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("let encode;\nif (Buffer.isEncoding('base64url')) {\n  encode = (input, encoding = 'utf8') => Buffer.from(input, encoding).toString('base64url');\n} else {\n  const fromBase64 = base64 => base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  encode = (input, encoding = 'utf8') => fromBase64(Buffer.from(input, encoding).toString('base64'));\n}\nconst decode = input => Buffer.from(input, 'base64');\nmodule.exports.decode = decode;\nmodule.exports.encode = encode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9iYXNlNjR1cmwuanMiLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsTUFBTTtBQUNWLElBQUlDLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO0VBQ2xDRixNQUFNLEdBQUdBLENBQUNHLEtBQUssRUFBRUMsUUFBUSxHQUFHLE1BQU0sS0FBS0gsTUFBTSxDQUFDSSxJQUFJLENBQUNGLEtBQUssRUFBRUMsUUFBUSxDQUFDLENBQUNFLFFBQVEsQ0FBQyxXQUFXLENBQUM7QUFDM0YsQ0FBQyxNQUFNO0VBQ0wsTUFBTUMsVUFBVSxHQUFJQyxNQUFNLElBQUtBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQ0EsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQ0EsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUM7RUFDL0ZULE1BQU0sR0FBR0EsQ0FBQ0csS0FBSyxFQUFFQyxRQUFRLEdBQUcsTUFBTSxLQUNoQ0csVUFBVSxDQUFDTixNQUFNLENBQUNJLElBQUksQ0FBQ0YsS0FBSyxFQUFFQyxRQUFRLENBQUMsQ0FBQ0UsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQy9EO0FBRUEsTUFBTUksTUFBTSxHQUFJUCxLQUFLLElBQUtGLE1BQU0sQ0FBQ0ksSUFBSSxDQUFDRixLQUFLLEVBQUUsUUFBUSxDQUFDO0FBRXREUSxxQkFBcUIsR0FBR0QsTUFBTTtBQUM5QkMscUJBQXFCLEdBQUdYLE1BQU0iLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvYmFzZTY0dXJsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBlbmNvZGU7XG5pZiAoQnVmZmVyLmlzRW5jb2RpbmcoJ2Jhc2U2NHVybCcpKSB7XG4gIGVuY29kZSA9IChpbnB1dCwgZW5jb2RpbmcgPSAndXRmOCcpID0+IEJ1ZmZlci5mcm9tKGlucHV0LCBlbmNvZGluZykudG9TdHJpbmcoJ2Jhc2U2NHVybCcpO1xufSBlbHNlIHtcbiAgY29uc3QgZnJvbUJhc2U2NCA9IChiYXNlNjQpID0+IGJhc2U2NC5yZXBsYWNlKC89L2csICcnKS5yZXBsYWNlKC9cXCsvZywgJy0nKS5yZXBsYWNlKC9cXC8vZywgJ18nKTtcbiAgZW5jb2RlID0gKGlucHV0LCBlbmNvZGluZyA9ICd1dGY4JykgPT5cbiAgICBmcm9tQmFzZTY0KEJ1ZmZlci5mcm9tKGlucHV0LCBlbmNvZGluZykudG9TdHJpbmcoJ2Jhc2U2NCcpKTtcbn1cblxuY29uc3QgZGVjb2RlID0gKGlucHV0KSA9PiBCdWZmZXIuZnJvbShpbnB1dCwgJ2Jhc2U2NCcpO1xuXG5tb2R1bGUuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cy5lbmNvZGUgPSBlbmNvZGU7XG4iXSwibmFtZXMiOlsiZW5jb2RlIiwiQnVmZmVyIiwiaXNFbmNvZGluZyIsImlucHV0IiwiZW5jb2RpbmciLCJmcm9tIiwidG9TdHJpbmciLCJmcm9tQmFzZTY0IiwiYmFzZTY0IiwicmVwbGFjZSIsImRlY29kZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/client.js":
/*!**********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/client.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst jose = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js\");\nconst {\n  RPError\n} = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst {\n  assertIssuerConfiguration\n} = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/openid-client/lib/helpers/assert.js\");\nconst {\n  random\n} = __webpack_require__(/*! ./generators */ \"(rsc)/./node_modules/openid-client/lib/helpers/generators.js\");\nconst now = __webpack_require__(/*! ./unix_timestamp */ \"(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\");\nconst request = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nconst {\n  keystores\n} = __webpack_require__(/*! ./weak_cache */ \"(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js\");\nconst merge = __webpack_require__(/*! ./merge */ \"(rsc)/./node_modules/openid-client/lib/helpers/merge.js\");\n\n// TODO: in v6.x additionally encode the `- _ . ! ~ * ' ( )` characters\n// https://github.com/panva/node-openid-client/commit/5a2ea80ef5e59ec0c03dbd97d82f551e24a9d348\nconst formUrlEncode = value => encodeURIComponent(value).replace(/%20/g, '+');\nasync function clientAssertion(endpoint, payload) {\n  let alg = this[`${endpoint}_endpoint_auth_signing_alg`];\n  if (!alg) {\n    assertIssuerConfiguration(this.issuer, `${endpoint}_endpoint_auth_signing_alg_values_supported`);\n  }\n  if (this[`${endpoint}_endpoint_auth_method`] === 'client_secret_jwt') {\n    if (!alg) {\n      const supported = this.issuer[`${endpoint}_endpoint_auth_signing_alg_values_supported`];\n      alg = Array.isArray(supported) && supported.find(signAlg => /^HS(?:256|384|512)/.test(signAlg));\n    }\n    if (!alg) {\n      throw new RPError(`failed to determine a JWS Algorithm to use for ${this[`${endpoint}_endpoint_auth_method`]} Client Assertion`);\n    }\n    return new jose.CompactSign(Buffer.from(JSON.stringify(payload))).setProtectedHeader({\n      alg\n    }).sign(this.secretForAlg(alg));\n  }\n  const keystore = await keystores.get(this);\n  if (!keystore) {\n    throw new TypeError('no client jwks provided for signing a client assertion with');\n  }\n  if (!alg) {\n    const supported = this.issuer[`${endpoint}_endpoint_auth_signing_alg_values_supported`];\n    alg = Array.isArray(supported) && supported.find(signAlg => keystore.get({\n      alg: signAlg,\n      use: 'sig'\n    }));\n  }\n  if (!alg) {\n    throw new RPError(`failed to determine a JWS Algorithm to use for ${this[`${endpoint}_endpoint_auth_method`]} Client Assertion`);\n  }\n  const key = keystore.get({\n    alg,\n    use: 'sig'\n  });\n  if (!key) {\n    throw new RPError(`no key found in client jwks to sign a client assertion with using alg ${alg}`);\n  }\n  return new jose.CompactSign(Buffer.from(JSON.stringify(payload))).setProtectedHeader({\n    alg,\n    kid: key.jwk && key.jwk.kid\n  }).sign(await key.keyObject(alg));\n}\nasync function authFor(endpoint, {\n  clientAssertionPayload\n} = {}) {\n  const authMethod = this[`${endpoint}_endpoint_auth_method`];\n  switch (authMethod) {\n    case 'self_signed_tls_client_auth':\n    case 'tls_client_auth':\n    case 'none':\n      return {\n        form: {\n          client_id: this.client_id\n        }\n      };\n    case 'client_secret_post':\n      if (typeof this.client_secret !== 'string') {\n        throw new TypeError('client_secret_post client authentication method requires a client_secret');\n      }\n      return {\n        form: {\n          client_id: this.client_id,\n          client_secret: this.client_secret\n        }\n      };\n    case 'private_key_jwt':\n    case 'client_secret_jwt':\n      {\n        const timestamp = now();\n        const assertion = await clientAssertion.call(this, endpoint, _objectSpread({\n          iat: timestamp,\n          exp: timestamp + 60,\n          jti: random(),\n          iss: this.client_id,\n          sub: this.client_id,\n          aud: this.issuer.issuer\n        }, clientAssertionPayload));\n        return {\n          form: {\n            client_id: this.client_id,\n            client_assertion: assertion,\n            client_assertion_type: 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'\n          }\n        };\n      }\n    case 'client_secret_basic':\n      {\n        // This is correct behaviour, see https://tools.ietf.org/html/rfc6749#section-2.3.1 and the\n        // related appendix. (also https://github.com/panva/node-openid-client/pull/91)\n        // > The client identifier is encoded using the\n        // > \"application/x-www-form-urlencoded\" encoding algorithm per\n        // > Appendix B, and the encoded value is used as the username; the client\n        // > password is encoded using the same algorithm and used as the\n        // > password.\n        if (typeof this.client_secret !== 'string') {\n          throw new TypeError('client_secret_basic client authentication method requires a client_secret');\n        }\n        const encoded = `${formUrlEncode(this.client_id)}:${formUrlEncode(this.client_secret)}`;\n        const value = Buffer.from(encoded).toString('base64');\n        return {\n          headers: {\n            Authorization: `Basic ${value}`\n          }\n        };\n      }\n    default:\n      {\n        throw new TypeError(`missing, or unsupported, ${endpoint}_endpoint_auth_method`);\n      }\n  }\n}\nfunction resolveResponseType() {\n  const {\n    length,\n    0: value\n  } = this.response_types;\n  if (length === 1) {\n    return value;\n  }\n  return undefined;\n}\nfunction resolveRedirectUri() {\n  const {\n    length,\n    0: value\n  } = this.redirect_uris || [];\n  if (length === 1) {\n    return value;\n  }\n  return undefined;\n}\nasync function authenticatedPost(endpoint, opts, {\n  clientAssertionPayload,\n  endpointAuthMethod = endpoint,\n  DPoP\n} = {}) {\n  const auth = await authFor.call(this, endpointAuthMethod, {\n    clientAssertionPayload\n  });\n  const requestOpts = merge(opts, auth);\n  const mTLS = this[`${endpointAuthMethod}_endpoint_auth_method`].includes('tls_client_auth') || endpoint === 'token' && this.tls_client_certificate_bound_access_tokens;\n  let targetUrl;\n  if (mTLS && this.issuer.mtls_endpoint_aliases) {\n    targetUrl = this.issuer.mtls_endpoint_aliases[`${endpoint}_endpoint`];\n  }\n  targetUrl = targetUrl || this.issuer[`${endpoint}_endpoint`];\n  if ('form' in requestOpts) {\n    for (const [key, value] of Object.entries(requestOpts.form)) {\n      if (typeof value === 'undefined') {\n        delete requestOpts.form[key];\n      }\n    }\n  }\n  return request.call(this, _objectSpread(_objectSpread({}, requestOpts), {}, {\n    method: 'POST',\n    url: targetUrl,\n    headers: _objectSpread(_objectSpread({}, endpoint !== 'revocation' ? {\n      Accept: 'application/json'\n    } : undefined), requestOpts.headers)\n  }), {\n    mTLS,\n    DPoP\n  });\n}\nmodule.exports = {\n  resolveResponseType,\n  resolveRedirectUri,\n  authFor,\n  authenticatedPost\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9jbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxNQUFNQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMseUZBQU0sQ0FBQztBQUU1QixNQUFNO0VBQUVDO0FBQVEsQ0FBQyxHQUFHRCxtQkFBTyxDQUFDLG1FQUFXLENBQUM7QUFFeEMsTUFBTTtFQUFFRTtBQUEwQixDQUFDLEdBQUdGLG1CQUFPLENBQUMsMEVBQVUsQ0FBQztBQUN6RCxNQUFNO0VBQUVHO0FBQU8sQ0FBQyxHQUFHSCxtQkFBTyxDQUFDLGtGQUFjLENBQUM7QUFDMUMsTUFBTUksR0FBRyxHQUFHSixtQkFBTyxDQUFDLDBGQUFrQixDQUFDO0FBQ3ZDLE1BQU1LLE9BQU8sR0FBR0wsbUJBQU8sQ0FBQyw0RUFBVyxDQUFDO0FBQ3BDLE1BQU07RUFBRU07QUFBVSxDQUFDLEdBQUdOLG1CQUFPLENBQUMsa0ZBQWMsQ0FBQztBQUM3QyxNQUFNTyxLQUFLLEdBQUdQLG1CQUFPLENBQUMsd0VBQVMsQ0FBQzs7QUFFaEM7QUFDQTtBQUNBLE1BQU1RLGFBQWEsR0FBSUMsS0FBSyxJQUFLQyxrQkFBa0IsQ0FBQ0QsS0FBSyxDQUFDLENBQUNFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO0FBRS9FLGVBQWVDLGVBQWVBLENBQUNDLFFBQVEsRUFBRUMsT0FBTyxFQUFFO0VBQ2hELElBQUlDLEdBQUcsR0FBRyxJQUFJLENBQUUsR0FBRUYsUUFBUyw0QkFBMkIsQ0FBQztFQUN2RCxJQUFJLENBQUNFLEdBQUcsRUFBRTtJQUNSYix5QkFBeUIsQ0FDdkIsSUFBSSxDQUFDYyxNQUFNLEVBQ1YsR0FBRUgsUUFBUyw2Q0FDZCxDQUFDO0VBQ0g7RUFFQSxJQUFJLElBQUksQ0FBRSxHQUFFQSxRQUFTLHVCQUFzQixDQUFDLEtBQUssbUJBQW1CLEVBQUU7SUFDcEUsSUFBSSxDQUFDRSxHQUFHLEVBQUU7TUFDUixNQUFNRSxTQUFTLEdB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SSxrQkFBa0I7RUFDbEIxQixPQUFPO0VBQ1A0QjtBQUNGLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvY2xpZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGpvc2UgPSByZXF1aXJlKCdqb3NlJyk7XG5cbmNvbnN0IHsgUlBFcnJvciB9ID0gcmVxdWlyZSgnLi4vZXJyb3JzJyk7XG5cbmNvbnN0IHsgYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbiB9ID0gcmVxdWlyZSgnLi9hc3NlcnQnKTtcbmNvbnN0IHsgcmFuZG9tIH0gPSByZXF1aXJlKCcuL2dlbmVyYXRvcnMnKTtcbmNvbnN0IG5vdyA9IHJlcXVpcmUoJy4vdW5peF90aW1lc3RhbXAnKTtcbmNvbnN0IHJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKTtcbmNvbnN0IHsga2V5c3RvcmVzIH0gPSByZXF1aXJlKCcuL3dlYWtfY2FjaGUnKTtcbmNvbnN0IG1lcmdlID0gcmVxdWlyZSgnLi9tZXJnZScpO1xuXG4vLyBUT0RPOiBpbiB2Ni54IGFkZGl0aW9uYWxseSBlbmNvZGUgdGhlIGAtIF8gLiAhIH4gKiAnICggKWAgY2hhcmFjdGVyc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3BhbnZhL25vZGUtb3BlbmlkLWNsaWVudC9jb21taXQvNWEyZWE4MGVmNWU1OWVjMGMwM2RiZDk3ZDgyZjU1MWUyNGE5ZDM0OFxuY29uc3QgZm9ybVVybEVuY29kZSA9ICh2YWx1ZSkgPT4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKS5yZXBsYWNlKC8lMjAvZywgJysnKTtcblxuYXN5bmMgZnVuY3Rpb24gY2xpZW50QXNzZXJ0aW9uKGVuZHBvaW50LCBwYXlsb2FkKSB7XG4gIGxldCBhbGcgPSB0aGlzW2Ake2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnYF07XG4gIGlmICghYWxnKSB7XG4gICAgYXNzZXJ0SXNzdWVyQ29uZmlndXJhdGlvbihcbiAgICAgIHRoaXMuaXNzdWVyLFxuICAgICAgYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfc2lnbmluZ19hbGdfdmFsdWVzX3N1cHBvcnRlZGAsXG4gICAgKTtcbiAgfVxuXG4gIGlmICh0aGlzW2Ake2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX21ldGhvZGBdID09PSAnY2xpZW50X3NlY3JldF9qd3QnKSB7XG4gICAgaWYgKCFhbGcpIHtcbiAgICAgIGNvbnN0IHN1cHBvcnRlZCA9IHRoaXMuaXNzdWVyW2Ake2VuZHBvaW50fV9lbmRwb2ludF9hdXRoX3NpZ25pbmdfYWxnX3ZhbHVlc19zdXBwb3J0ZWRgXTtcbiAgICAgIGFsZyA9XG4gICAgICAgIEFycmF5LmlzQXJyYXkoc3VwcG9ydGVkKSAmJiBzdXBwb3J0ZWQuZmluZCgoc2lnbkFsZykgPT4gL15IUyg/OjI1NnwzODR8NTEyKS8udGVzdChzaWduQWxnKSk7XG4gICAgfVxuXG4gICAgaWYgKCFhbGcpIHtcbiAgICAgIHRocm93IG5ldyBSUEVycm9yKFxuICAgICAgICBgZmFpbGVkIHRvIGRldGVybWluZSBhIEpXUyBBbGdvcml0aG0gdG8gdXNlIGZvciAke1xuICAgICAgICAgIHRoaXNbYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfbWV0aG9kYF1cbiAgICAgICAgfSBDbGllbnQgQXNzZXJ0aW9uYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBqb3NlLkNvbXBhY3RTaWduKEJ1ZmZlci5mcm9tKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSlcbiAgICAgIC5zZXRQcm90ZWN0ZWRIZWFkZXIoeyBhbGcgfSlcbiAgICAgIC5zaWduKHRoaXMuc2VjcmV0Rm9yQWxnKGFsZykpO1xuICB9XG5cbiAgY29uc3Qga2V5c3RvcmUgPSBhd2FpdCBrZXlzdG9yZXMuZ2V0KHRoaXMpO1xuXG4gIGlmICgha2V5c3RvcmUpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdubyBjbGllbnQgandrcyBwcm92aWRlZCBmb3Igc2lnbmluZyBhIGNsaWVudCBhc3NlcnRpb24gd2l0aCcpO1xuICB9XG5cbiAgaWYgKCFhbGcpIHtcbiAgICBjb25zdCBzdXBwb3J0ZWQgPSB0aGlzLmlzc3VlcltgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9zaWduaW5nX2FsZ192YWx1ZXNfc3VwcG9ydGVkYF07XG4gICAgYWxnID1cbiAgICAgIEFycmF5LmlzQXJyYXkoc3VwcG9ydGVkKSAmJlxuICAgICAgc3VwcG9ydGVkLmZpbmQoKHNpZ25BbGcpID0+IGtleXN0b3JlLmdldCh7IGFsZzogc2lnbkFsZywgdXNlOiAnc2lnJyB9KSk7XG4gIH1cblxuICBpZiAoIWFsZykge1xuICAgIHRocm93IG5ldyBSUEVycm9yKFxuICAgICAgYGZhaWxlZCB0byBkZXRlcm1pbmUgYSBKV1MgQWxnb3JpdGhtIHRvIHVzZSBmb3IgJHtcbiAgICAgICAgdGhpc1tgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9tZXRob2RgXVxuICAgICAgfSBDbGllbnQgQXNzZXJ0aW9uYCxcbiAgICApO1xuICB9XG5cbiAgY29uc3Qga2V5ID0ga2V5c3RvcmUuZ2V0KHsgYWxnLCB1c2U6ICdzaWcnIH0pO1xuICBpZiAoIWtleSkge1xuICAgIHRocm93IG5ldyBSUEVycm9yKFxuICAgICAgYG5vIGtleSBmb3VuZCBpbiBjbGllbnQgandrcyB0byBzaWduIGEgY2xpZW50IGFzc2VydGlvbiB3aXRoIHVzaW5nIGFsZyAke2FsZ31gLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gbmV3IGpvc2UuQ29tcGFjdFNpZ24oQnVmZmVyLmZyb20oSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpKVxuICAgIC5zZXRQcm90ZWN0ZWRIZWFkZXIoeyBhbGcsIGtpZDoga2V5Lmp3ayAmJiBrZXkuandrLmtpZCB9KVxuICAgIC5zaWduKGF3YWl0IGtleS5rZXlPYmplY3QoYWxnKSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGF1dGhGb3IoZW5kcG9pbnQsIHsgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCB9ID0ge30pIHtcbiAgY29uc3QgYXV0aE1ldGhvZCA9IHRoaXNbYCR7ZW5kcG9pbnR9X2VuZHBvaW50X2F1dGhfbWV0aG9kYF07XG4gIHN3aXRjaCAoYXV0aE1ldGhvZCkge1xuICAgIGNhc2UgJ3NlbGZfc2lnbmVkX3Rsc19jbGllbnRfYXV0aCc6XG4gICAgY2FzZSAndGxzX2NsaWVudF9hdXRoJzpcbiAgICBjYXNlICdub25lJzpcbiAgICAgIHJldHVybiB7IGZvcm06IHsgY2xpZW50X2lkOiB0aGlzLmNsaWVudF9pZCB9IH07XG4gICAgY2FzZSAnY2xpZW50X3NlY3JldF9wb3N0JzpcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5jbGllbnRfc2VjcmV0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdjbGllbnRfc2VjcmV0X3Bvc3QgY2xpZW50IGF1dGhlbnRpY2F0aW9uIG1ldGhvZCByZXF1aXJlcyBhIGNsaWVudF9zZWNyZXQnLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZm9ybTogeyBjbGllbnRfaWQ6IHRoaXMuY2xpZW50X2lkLCBjbGllbnRfc2VjcmV0OiB0aGlzLmNsaWVudF9zZWNyZXQgfSB9O1xuICAgIGNhc2UgJ3ByaXZhdGVfa2V5X2p3dCc6XG4gICAgY2FzZSAnY2xpZW50X3NlY3JldF9qd3QnOiB7XG4gICAgICBjb25zdCB0aW1lc3RhbXAgPSBub3coKTtcblxuICAgICAgY29uc3QgYXNzZXJ0aW9uID0gYXdhaXQgY2xpZW50QXNzZXJ0aW9uLmNhbGwodGhpcywgZW5kcG9pbnQsIHtcbiAgICAgICAgaWF0OiB0aW1lc3RhbXAsXG4gICAgICAgIGV4cDogdGltZXN0YW1wICsgNjAsXG4gICAgICAgIGp0aTogcmFuZG9tKCksXG4gICAgICAgIGlzczogdGhpcy5jbGllbnRfaWQsXG4gICAgICAgIHN1YjogdGhpcy5jbGllbnRfaWQsXG4gICAgICAgIGF1ZDogdGhpcy5pc3N1ZXIuaXNzdWVyLFxuICAgICAgICAuLi5jbGllbnRBc3NlcnRpb25QYXlsb2FkLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZvcm06IHtcbiAgICAgICAgICBjbGllbnRfaWQ6IHRoaXMuY2xpZW50X2lkLFxuICAgICAgICAgIGNsaWVudF9hc3NlcnRpb246IGFzc2VydGlvbixcbiAgICAgICAgICBjbGllbnRfYXNzZXJ0aW9uX3R5cGU6ICd1cm46aWV0ZjpwYXJhbXM6b2F1dGg6Y2xpZW50LWFzc2VydGlvbi10eXBlOmp3dC1iZWFyZXInLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSAnY2xpZW50X3NlY3JldF9iYXNpYyc6IHtcbiAgICAgIC8vIFRoaXMgaXMgY29ycmVjdCBiZWhhdmlvdXIsIHNlZSBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNjc0OSNzZWN0aW9uLTIuMy4xIGFuZCB0aGVcbiAgICAgIC8vIHJlbGF0ZWQgYXBwZW5kaXguIChhbHNvIGh0dHBzOi8vZ2l0aHViLmNvbS9wYW52YS9ub2RlLW9wZW5pZC1jbGllbnQvcHVsbC85MSlcbiAgICAgIC8vID4gVGhlIGNsaWVudCBpZGVudGlmaWVyIGlzIGVuY29kZWQgdXNpbmcgdGhlXG4gICAgICAvLyA+IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgZW5jb2RpbmcgYWxnb3JpdGhtIHBlclxuICAgICAgLy8gPiBBcHBlbmRpeCBCLCBhbmQgdGhlIGVuY29kZWQgdmFsdWUgaXMgdXNlZCBhcyB0aGUgdXNlcm5hbWU7IHRoZSBjbGllbnRcbiAgICAgIC8vID4gcGFzc3dvcmQgaXMgZW5jb2RlZCB1c2luZyB0aGUgc2FtZSBhbGdvcml0aG0gYW5kIHVzZWQgYXMgdGhlXG4gICAgICAvLyA+IHBhc3N3b3JkLlxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmNsaWVudF9zZWNyZXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ2NsaWVudF9zZWNyZXRfYmFzaWMgY2xpZW50IGF1dGhlbnRpY2F0aW9uIG1ldGhvZCByZXF1aXJlcyBhIGNsaWVudF9zZWNyZXQnLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgZW5jb2RlZCA9IGAke2Zvcm1VcmxFbmNvZGUodGhpcy5jbGllbnRfaWQpfToke2Zvcm1VcmxFbmNvZGUodGhpcy5jbGllbnRfc2VjcmV0KX1gO1xuICAgICAgY29uc3QgdmFsdWUgPSBCdWZmZXIuZnJvbShlbmNvZGVkKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gICAgICByZXR1cm4geyBoZWFkZXJzOiB7IEF1dGhvcml6YXRpb246IGBCYXNpYyAke3ZhbHVlfWAgfSB9O1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBtaXNzaW5nLCBvciB1bnN1cHBvcnRlZCwgJHtlbmRwb2ludH1fZW5kcG9pbnRfYXV0aF9tZXRob2RgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVJlc3BvbnNlVHlwZSgpIHtcbiAgY29uc3QgeyBsZW5ndGgsIDA6IHZhbHVlIH0gPSB0aGlzLnJlc3BvbnNlX3R5cGVzO1xuXG4gIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUmVkaXJlY3RVcmkoKSB7XG4gIGNvbnN0IHsgbGVuZ3RoLCAwOiB2YWx1ZSB9ID0gdGhpcy5yZWRpcmVjdF91cmlzIHx8IFtdO1xuXG4gIGlmIChsZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBhdXRoZW50aWNhdGVkUG9zdChcbiAgZW5kcG9pbnQsXG4gIG9wdHMsXG4gIHsgY2xpZW50QXNzZXJ0aW9uUGF5bG9hZCwgZW5kcG9pbnRBdXRoTWV0aG9kID0gZW5kcG9pbnQsIERQb1AgfSA9IHt9LFxuKSB7XG4gIGNvbnN0IGF1dGggPSBhd2FpdCBhdXRoRm9yLmNhbGwodGhpcywgZW5kcG9pbnRBdXRoTWV0aG9kLCB7IGNsaWVudEFzc2VydGlvblBheWxvYWQgfSk7XG4gIGNvbnN0IHJlcXVlc3RPcHRzID0gbWVyZ2Uob3B0cywgYXV0aCk7XG5cbiAgY29uc3QgbVRMUyA9XG4gICAgdGhpc1tgJHtlbmRwb2ludEF1dGhNZXRob2R9X2VuZHBvaW50X2F1dGhfbWV0aG9kYF0uaW5jbHVkZXMoJ3Rsc19jbGllbnRfYXV0aCcpIHx8XG4gICAgKGVuZHBvaW50ID09PSAndG9rZW4nICYmIHRoaXMudGxzX2NsaWVudF9jZXJ0aWZpY2F0ZV9ib3VuZF9hY2Nlc3NfdG9rZW5zKTtcblxuICBsZXQgdGFyZ2V0VXJsO1xuICBpZiAobVRMUyAmJiB0aGlzLmlzc3Vlci5tdGxzX2VuZHBvaW50X2FsaWFzZXMpIHtcbiAgICB0YXJnZXRVcmwgPSB0aGlzLmlzc3Vlci5tdGxzX2VuZHBvaW50X2FsaWFzZXNbYCR7ZW5kcG9pbnR9X2VuZHBvaW50YF07XG4gIH1cblxuICB0YXJnZXRVcmwgPSB0YXJnZXRVcmwgfHwgdGhpcy5pc3N1ZXJbYCR7ZW5kcG9pbnR9X2VuZHBvaW50YF07XG5cbiAgaWYgKCdmb3JtJyBpbiByZXF1ZXN0T3B0cykge1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHJlcXVlc3RPcHRzLmZvcm0pKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBkZWxldGUgcmVxdWVzdE9wdHMuZm9ybVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0LmNhbGwoXG4gICAgdGhpcyxcbiAgICB7XG4gICAgICAuLi5yZXF1ZXN0T3B0cyxcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgdXJsOiB0YXJnZXRVcmwsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIC4uLihlbmRwb2ludCAhPT0gJ3Jldm9jYXRpb24nXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogdW5kZWZpbmVkKSxcbiAgICAgICAgLi4ucmVxdWVzdE9wdHMuaGVhZGVycyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7IG1UTFMsIERQb1AgfSxcbiAgKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJlc29sdmVSZXNwb25zZVR5cGUsXG4gIHJlc29sdmVSZWRpcmVjdFVyaSxcbiAgYXV0aEZvcixcbiAgYXV0aGVudGljYXRlZFBvc3QsXG59O1xuIl0sIm5hbWVzIjpbImpvc2UiLCJyZXF1aXJlIiwiUlBFcnJvciIsImFzc2VydElzc3VlckNvbmZpZ3VyYXRpb24iLCJyYW5kb20iLCJub3ciLCJyZXF1ZXN0Iiwia2V5c3RvcmVzIiwibWVyZ2UiLCJmb3JtVXJsRW5jb2RlIiwidmFsdWUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXBsYWNlIiwiY2xpZW50QXNzZXJ0aW9uIiwiZW5kcG9pbnQiLCJwYXlsb2FkIiwiYWxnIiwiaXNzdWVyIiwic3VwcG9ydGVkIiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZCIsInNpZ25BbGciLCJ0ZXN0IiwiQ29tcGFjdFNpZ24iLCJCdWZmZXIiLCJmcm9tIiwiSlNPTiIsInN0cmluZ2lmeSIsInNldFByb3RlY3RlZEhlYWRlciIsInNpZ24iLCJzZWNyZXRGb3JBbGciLCJrZXlzdG9yZSIsImdldCIsIlR5cGVFcnJvciIsInVzZSIsImtleSIsImtpZCIsImp3ayIsImtleU9iamVjdCIsImF1dGhGb3IiLCJjbGllbnRBc3NlcnRpb25QYXlsb2FkIiwiYXV0aE1ldGhvZCIsImZvcm0iLCJjbGllbnRfaWQiLCJjbGllbnRfc2VjcmV0IiwidGltZXN0YW1wIiwiYXNzZXJ0aW9uIiwiY2FsbCIsIl9vYmplY3RTcHJlYWQiLCJpYXQiLCJleHAiLCJqdGkiLCJpc3MiLCJzdWIiLCJhdWQiLCJjbGllbnRfYXNzZXJ0aW9uIiwiY2xpZW50X2Fzc2VydGlvbl90eXBlIiwiZW5jb2RlZCIsInRvU3RyaW5nIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJyZXNvbHZlUmVzcG9uc2VUeXBlIiwibGVuZ3RoIiwicmVzcG9uc2VfdHlwZXMiLCJ1bmRlZmluZWQiLCJyZXNvbHZlUmVkaXJlY3RVcmkiLCJyZWRpcmVjdF91cmlzIiwiYXV0aGVudGljYXRlZFBvc3QiLCJvcHRzIiwiZW5kcG9pbnRBdXRoTWV0aG9kIiwiRFBvUCIsImF1dGgiLCJyZXF1ZXN0T3B0cyIsIm1UTFMiLCJpbmNsdWRlcyIsInRsc19jbGllbnRfY2VydGlmaWNhdGVfYm91bmRfYWNjZXNzX3Rva2VucyIsInRhcmdldFVybCIsIm10bHNfZW5kcG9pbnRfYWxpYXNlcyIsIk9iamVjdCIsImVudHJpZXMiLCJtZXRob2QiLCJ1cmwiLCJBY2NlcHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/consts.js":
/*!**********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/consts.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("const HTTP_OPTIONS = Symbol();\nconst CLOCK_TOLERANCE = Symbol();\nmodule.exports = {\n  CLOCK_TOLERANCE,\n  HTTP_OPTIONS\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9jb25zdHMuanMiLCJuYW1lcyI6WyJIVFRQX09QVElPTlMiLCJTeW1ib2wiLCJDTE9DS19UT0xFUkFOQ0UiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvY29uc3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEhUVFBfT1BUSU9OUyA9IFN5bWJvbCgpO1xuY29uc3QgQ0xPQ0tfVE9MRVJBTkNFID0gU3ltYm9sKCk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBDTE9DS19UT0xFUkFOQ0UsXG4gIEhUVFBfT1BUSU9OUyxcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFlBQVksR0FBR0MsTUFBTSxDQUFDLENBQUM7QUFDN0IsTUFBTUMsZUFBZSxHQUFHRCxNQUFNLENBQUMsQ0FBQztBQUVoQ0UsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZkYsZUFBZTtFQUNmRjtBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbMF19\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/consts.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/decode_jwt.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/decode_jwt.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const base64url = __webpack_require__(/*! ./base64url */ \"(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\");\nmodule.exports = token => {\n  if (typeof token !== 'string' || !token) {\n    throw new TypeError('JWT must be a string');\n  }\n  const {\n    0: header,\n    1: payload,\n    2: signature,\n    length\n  } = token.split('.');\n  if (length === 5) {\n    throw new TypeError('encrypted JWTs cannot be decoded');\n  }\n  if (length !== 3) {\n    throw new Error('JWTs must have three components');\n  }\n  try {\n    return {\n      header: JSON.parse(base64url.decode(header)),\n      payload: JSON.parse(base64url.decode(payload)),\n      signature\n    };\n  } catch (err) {\n    throw new Error('JWT is malformed');\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9kZWNvZGVfand0LmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxnRkFBYSxDQUFDO0FBRXhDQyxNQUFNLENBQUNDLE9BQU8sR0FBSUMsS0FBSyxJQUFLO0VBQzFCLElBQUksT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDQSxLQUFLLEVBQUU7SUFDdkMsTUFBTSxJQUFJQyxTQUFTLENBQUMsc0JBQXNCLENBQUM7RUFDN0M7RUFFQSxNQUFNO0lBQUUsQ0FBQyxFQUFFQyxNQUFNO0lBQUUsQ0FBQyxFQUFFQyxPQUFPO0lBQUUsQ0FBQyxFQUFFQyxTQUFTO0lBQUVDO0VBQU8sQ0FBQyxHQUFHTCxLQUFLLENBQUNNLEtBQUssQ0FBQyxHQUFHLENBQUM7RUFFeEUsSUFBSUQsTUFBTSxLQUFLLENBQUMsRUFBRTtJQUNoQixNQUFNLElBQUlKLFNBQVMsQ0FBQyxrQ0FBa0MsQ0FBQztFQUN6RDtFQUVBLElBQUlJLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDaEIsTUFBTSxJQUFJRSxLQUFLLENBQUMsaUNBQWlDLENBQUM7RUFDcEQ7RUFFQSxJQUFJO0lBQ0YsT0FBTztNQUNMTCxNQUFNLEVBQUVNLElBQUksQ0FBQ0MsS0FBSyxDQUFDYixTQUFTLENBQUNjLE1BQU0sQ0FBQ1IsTUFBTSxDQUFDLENBQUM7TUFDNUNDLE9BQU8sRUFBRUssSUFBSSxDQUFDQyxLQUFLLENBQUNiLFNBQVMsQ0FBQ2MsTUFBTSxDQUFDUCxPQUFPLENBQUMsQ0FBQztNQUM5Q0M7SUFDRixDQUFDO0VBQ0gsQ0FBQyxDQUFDLE9BQU9PLEdBQUcsRUFBRTtJQUNaLE1BQU0sSUFBSUosS0FBSyxDQUFDLGtCQUFrQixDQUFDO0VBQ3JDO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9kZWNvZGVfand0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGJhc2U2NHVybCA9IHJlcXVpcmUoJy4vYmFzZTY0dXJsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKHRva2VuKSA9PiB7XG4gIGlmICh0eXBlb2YgdG9rZW4gIT09ICdzdHJpbmcnIHx8ICF0b2tlbikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0pXVCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cblxuICBjb25zdCB7IDA6IGhlYWRlciwgMTogcGF5bG9hZCwgMjogc2lnbmF0dXJlLCBsZW5ndGggfSA9IHRva2VuLnNwbGl0KCcuJyk7XG5cbiAgaWYgKGxlbmd0aCA9PT0gNSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY3J5cHRlZCBKV1RzIGNhbm5vdCBiZSBkZWNvZGVkJyk7XG4gIH1cblxuICBpZiAobGVuZ3RoICE9PSAzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdKV1RzIG11c3QgaGF2ZSB0aHJlZSBjb21wb25lbnRzJyk7XG4gIH1cblxuICB0cnkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWFkZXI6IEpTT04ucGFyc2UoYmFzZTY0dXJsLmRlY29kZShoZWFkZXIpKSxcbiAgICAgIHBheWxvYWQ6IEpTT04ucGFyc2UoYmFzZTY0dXJsLmRlY29kZShwYXlsb2FkKSksXG4gICAgICBzaWduYXR1cmUsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdKV1QgaXMgbWFsZm9ybWVkJyk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsiYmFzZTY0dXJsIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0b2tlbiIsIlR5cGVFcnJvciIsImhlYWRlciIsInBheWxvYWQiLCJzaWduYXR1cmUiLCJsZW5ndGgiLCJzcGxpdCIsIkVycm9yIiwiSlNPTiIsInBhcnNlIiwiZGVjb2RlIiwiZXJyIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/decode_jwt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/deep_clone.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("module.exports = globalThis.structuredClone || (obj => JSON.parse(JSON.stringify(obj)));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9kZWVwX2Nsb25lLmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdsb2JhbFRoaXMiLCJzdHJ1Y3R1cmVkQ2xvbmUiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9kZWVwX2Nsb25lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsVGhpcy5zdHJ1Y3R1cmVkQ2xvbmUgfHwgKChvYmopID0+IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob2JqKSkpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQUEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLFVBQVUsQ0FBQ0MsZUFBZSxLQUFNQyxHQUFHLElBQUtDLElBQUksQ0FBQ0MsS0FBSyxDQUFDRCxJQUFJLENBQUNFLFNBQVMsQ0FBQ0gsR0FBRyxDQUFDLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOlswXX0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/defaults.js":
/*!************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/defaults.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const isPlainObject = __webpack_require__(/*! ./is_plain_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\");\nfunction defaults(deep, target, ...sources) {\n  for (const source of sources) {\n    if (!isPlainObject(source)) {\n      continue;\n    }\n    for (const [key, value] of Object.entries(source)) {\n      /* istanbul ignore if */\n      if (key === '__proto__' || key === 'constructor') {\n        continue;\n      }\n      if (typeof target[key] === 'undefined' && typeof value !== 'undefined') {\n        target[key] = value;\n      }\n      if (deep && isPlainObject(target[key]) && isPlainObject(value)) {\n        defaults(true, target[key], value);\n      }\n    }\n  }\n  return target;\n}\nmodule.exports = defaults.bind(undefined, false);\nmodule.exports.deep = defaults.bind(undefined, true);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9kZWZhdWx0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsNEZBQW1CLENBQUM7QUFFbEQsU0FBU0MsUUFBUUEsQ0FBQ0MsSUFBSSxFQUFFQyxNQUFNLEVBQUUsR0FBR0MsT0FBTyxFQUFFO0VBQzFDLEtBQUssTUFBTUMsTUFBTSxJQUFJRCxPQUFPLEVBQUU7SUFDNUIsSUFBSSxDQUFDTCxhQUFhLENBQUNNLE1BQU0sQ0FBQyxFQUFFO01BQzFCO0lBQ0Y7SUFDQSxLQUFLLE1BQU0sQ0FBQ0MsR0FBRyxFQUFFQyxLQUFLLENBQUMsSUFBSUMsTUFBTSxDQUFDQyxPQUFPLENBQUNKLE1BQU0sQ0FBQyxFQUFFO01BQ2pEO01BQ0EsSUFBSUMsR0FBRyxLQUFLLFdBQVcsSUFBSUEsR0FBRyxLQUFLLGFBQWEsRUFBRTtRQUNoRDtNQUNGO01BQ0EsSUFBSSxPQUFPSCxNQUFNLENBQUNHLEdBQUcsQ0FBQyxLQUFLLFdBQVcsSUFBSSxPQUFPQyxLQUFLLEtBQUssV0FBVyxFQUFFO1FBQ3RFSixNQUFNLENBQUNHLEdBQUcsQ0FBQyxHQUFHQyxLQUFLO01BQ3JCO01BRUEsSUFBSUwsSUFBSSxJQUFJSCxhQUFhLENBQUNJLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLENBQUMsSUFBSVAsYUFBYSxDQUFDUSxLQUFLLENBQUMsRUFBRTtRQUM5RE4sUUFBUSxDQUFDLElBQUksRUFBRUUsTUFBTSxDQUFDRyxHQUFHLENBQUMsRUFBRUMsS0FBSyxDQUFDO01BQ3BDO0lBQ0Y7RUFDRjtFQUVBLE9BQU9KLE1BQU07QUFDZjtBQUVBTyxNQUFNLENBQUNDLE9BQU8sR0FBR1YsUUFBUSxDQUFDVyxJQUFJLENBQUNDLFNBQVMsRUFBRSxLQUFLLENBQUM7QUFDaERILG1CQUFtQixHQUFHVCxRQUFRLENBQUNXLElBQUksQ0FBQ0MsU0FBUyxFQUFFLElBQUksQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9kZWZhdWx0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi9pc19wbGFpbl9vYmplY3QnKTtcblxuZnVuY3Rpb24gZGVmYXVsdHMoZGVlcCwgdGFyZ2V0LCAuLi5zb3VyY2VzKSB7XG4gIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNvdXJjZSkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVlcCAmJiBpc1BsYWluT2JqZWN0KHRhcmdldFtrZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICBkZWZhdWx0cyh0cnVlLCB0YXJnZXRba2V5XSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHMuYmluZCh1bmRlZmluZWQsIGZhbHNlKTtcbm1vZHVsZS5leHBvcnRzLmRlZXAgPSBkZWZhdWx0cy5iaW5kKHVuZGVmaW5lZCwgdHJ1ZSk7XG4iXSwibmFtZXMiOlsiaXNQbGFpbk9iamVjdCIsInJlcXVpcmUiLCJkZWZhdWx0cyIsImRlZXAiLCJ0YXJnZXQiLCJzb3VyY2VzIiwic291cmNlIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJ1bmRlZmluZWQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/defaults.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/generators.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/generators.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  createHash,\n  randomBytes\n} = __webpack_require__(/*! crypto */ \"crypto\");\nconst base64url = __webpack_require__(/*! ./base64url */ \"(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\");\nconst random = (bytes = 32) => base64url.encode(randomBytes(bytes));\nmodule.exports = {\n  random,\n  state: random,\n  nonce: random,\n  codeVerifier: random,\n  codeChallenge: codeVerifier => base64url.encode(createHash('sha256').update(codeVerifier).digest())\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9nZW5lcmF0b3JzLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU07RUFBRUEsVUFBVTtFQUFFQztBQUFZLENBQUMsR0FBR0MsbUJBQU8sQ0FBQyxzQkFBUSxDQUFDO0FBRXJELE1BQU1DLFNBQVMsR0FBR0QsbUJBQU8sQ0FBQyxnRkFBYSxDQUFDO0FBRXhDLE1BQU1FLE1BQU0sR0FBR0EsQ0FBQ0MsS0FBSyxHQUFHLEVBQUUsS0FBS0YsU0FBUyxDQUFDRyxNQUFNLENBQUNMLFdBQVcsQ0FBQ0ksS0FBSyxDQUFDLENBQUM7QUFFbkVFLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHO0VBQ2ZKLE1BQU07RUFDTkssS0FBSyxFQUFFTCxNQUFNO0VBQ2JNLEtBQUssRUFBRU4sTUFBTTtFQUNiTyxZQUFZLEVBQUVQLE1BQU07RUFDcEJRLGFBQWEsRUFBR0QsWUFBWSxJQUMxQlIsU0FBUyxDQUFDRyxNQUFNLENBQUNOLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQ2EsTUFBTSxDQUFDRixZQUFZLENBQUMsQ0FBQ0csTUFBTSxDQUFDLENBQUM7QUFDdkUsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9nZW5lcmF0b3JzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgY3JlYXRlSGFzaCwgcmFuZG9tQnl0ZXMgfSA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuXG5jb25zdCBiYXNlNjR1cmwgPSByZXF1aXJlKCcuL2Jhc2U2NHVybCcpO1xuXG5jb25zdCByYW5kb20gPSAoYnl0ZXMgPSAzMikgPT4gYmFzZTY0dXJsLmVuY29kZShyYW5kb21CeXRlcyhieXRlcykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmFuZG9tLFxuICBzdGF0ZTogcmFuZG9tLFxuICBub25jZTogcmFuZG9tLFxuICBjb2RlVmVyaWZpZXI6IHJhbmRvbSxcbiAgY29kZUNoYWxsZW5nZTogKGNvZGVWZXJpZmllcikgPT5cbiAgICBiYXNlNjR1cmwuZW5jb2RlKGNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShjb2RlVmVyaWZpZXIpLmRpZ2VzdCgpKSxcbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlSGFzaCIsInJhbmRvbUJ5dGVzIiwicmVxdWlyZSIsImJhc2U2NHVybCIsInJhbmRvbSIsImJ5dGVzIiwiZW5jb2RlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0YXRlIiwibm9uY2UiLCJjb2RlVmVyaWZpZXIiLCJjb2RlQ2hhbGxlbmdlIiwidXBkYXRlIiwiZGlnZXN0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/generators.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/is_key_object.js":
/*!*****************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/is_key_object.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! util */ \"util\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nmodule.exports = util.types.isKeyObject || (obj => obj && obj instanceof crypto.KeyObject);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9pc19rZXlfb2JqZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLElBQUksR0FBR0MsbUJBQU8sQ0FBQyxrQkFBTSxDQUFDO0FBQzVCLE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyxzQkFBUSxDQUFDO0FBRWhDRSxNQUFNLENBQUNDLE9BQU8sR0FBR0osSUFBSSxDQUFDSyxLQUFLLENBQUNDLFdBQVcsS0FBTUMsR0FBRyxJQUFLQSxHQUFHLElBQUlBLEdBQUcsWUFBWUwsTUFBTSxDQUFDTSxTQUFTLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvaXNfa2V5X29iamVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gdXRpbC50eXBlcy5pc0tleU9iamVjdCB8fCAoKG9iaikgPT4gb2JqICYmIG9iaiBpbnN0YW5jZW9mIGNyeXB0by5LZXlPYmplY3QpO1xuIl0sIm5hbWVzIjpbInV0aWwiLCJyZXF1aXJlIiwiY3J5cHRvIiwibW9kdWxlIiwiZXhwb3J0cyIsInR5cGVzIiwiaXNLZXlPYmplY3QiLCJvYmoiLCJLZXlPYmplY3QiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/is_key_object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js":
/*!*******************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/is_plain_object.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("module.exports = a => !!a && a.constructor === Object;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9pc19wbGFpbl9vYmplY3QuanMiLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiYSIsImNvbnN0cnVjdG9yIiwiT2JqZWN0Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvaXNfcGxhaW5fb2JqZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKGEpID0+ICEhYSAmJiBhLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBSUMsQ0FBQyxJQUFLLENBQUMsQ0FBQ0EsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLFdBQVcsS0FBS0MsTUFBTSIsImlnbm9yZUxpc3QiOlswXX0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/issuer.js":
/*!**********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/issuer.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const objectHash = __webpack_require__(/*! object-hash */ \"(rsc)/./node_modules/object-hash/index.js\");\nconst LRU = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/openid-client/node_modules/lru-cache/index.js\");\nconst {\n  RPError\n} = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst {\n  assertIssuerConfiguration\n} = __webpack_require__(/*! ./assert */ \"(rsc)/./node_modules/openid-client/lib/helpers/assert.js\");\nconst KeyStore = __webpack_require__(/*! ./keystore */ \"(rsc)/./node_modules/openid-client/lib/helpers/keystore.js\");\nconst {\n  keystores\n} = __webpack_require__(/*! ./weak_cache */ \"(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js\");\nconst processResponse = __webpack_require__(/*! ./process_response */ \"(rsc)/./node_modules/openid-client/lib/helpers/process_response.js\");\nconst request = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nconst inFlight = new WeakMap();\nconst caches = new WeakMap();\nconst lrus = ctx => {\n  if (!caches.has(ctx)) {\n    caches.set(ctx, new LRU({\n      max: 100\n    }));\n  }\n  return caches.get(ctx);\n};\nasync function getKeyStore(reload = false) {\n  assertIssuerConfiguration(this, 'jwks_uri');\n  const keystore = keystores.get(this);\n  const cache = lrus(this);\n  if (reload || !keystore) {\n    if (inFlight.has(this)) {\n      return inFlight.get(this);\n    }\n    cache.reset();\n    inFlight.set(this, (async () => {\n      const response = await request.call(this, {\n        method: 'GET',\n        responseType: 'json',\n        url: this.jwks_uri,\n        headers: {\n          Accept: 'application/json, application/jwk-set+json'\n        }\n      }).finally(() => {\n        inFlight.delete(this);\n      });\n      const jwks = processResponse(response);\n      const joseKeyStore = KeyStore.fromJWKS(jwks, {\n        onlyPublic: true\n      });\n      cache.set('throttle', true, 60 * 1000);\n      keystores.set(this, joseKeyStore);\n      return joseKeyStore;\n    })());\n    return inFlight.get(this);\n  }\n  return keystore;\n}\nasync function queryKeyStore({\n  kid,\n  kty,\n  alg,\n  use\n}, {\n  allowMulti = false\n} = {}) {\n  const cache = lrus(this);\n  const def = {\n    kid,\n    kty,\n    alg,\n    use\n  };\n  const defHash = objectHash(def, {\n    algorithm: 'sha256',\n    ignoreUnknown: true,\n    unorderedArrays: true,\n    unorderedSets: true,\n    respectType: false\n  });\n\n  // refresh keystore on every unknown key but also only upto once every minute\n  const freshJwksUri = cache.get(defHash) || cache.get('throttle');\n  const keystore = await getKeyStore.call(this, !freshJwksUri);\n  const keys = keystore.all(def);\n  delete def.use;\n  if (keys.length === 0) {\n    throw new RPError({\n      printf: [\"no valid key found in issuer's jwks_uri for key parameters %j\", def],\n      jwks: keystore\n    });\n  }\n  if (!allowMulti && keys.length > 1 && !kid) {\n    throw new RPError({\n      printf: [\"multiple matching keys found in issuer's jwks_uri for key parameters %j, kid must be provided in this case\", def],\n      jwks: keystore\n    });\n  }\n  cache.set(defHash, true);\n  return keys;\n}\nmodule.exports.queryKeyStore = queryKeyStore;\nmodule.exports.keystore = getKeyStore;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/issuer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/keystore.js":
/*!************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/keystore.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const _excluded = [\"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nconst jose = __webpack_require__(/*! jose */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js\");\nconst clone = __webpack_require__(/*! ./deep_clone */ \"(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\");\nconst isPlainObject = __webpack_require__(/*! ./is_plain_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\");\nconst internal = Symbol();\nconst keyscore = (key, {\n  alg,\n  use\n}) => {\n  let score = 0;\n  if (alg && key.alg) {\n    score++;\n  }\n  if (use && key.use) {\n    score++;\n  }\n  return score;\n};\nfunction getKtyFromAlg(alg) {\n  switch (typeof alg === 'string' && alg.slice(0, 2)) {\n    case 'RS':\n    case 'PS':\n      return 'RSA';\n    case 'ES':\n      return 'EC';\n    case 'Ed':\n      return 'OKP';\n    default:\n      return undefined;\n  }\n}\nfunction getAlgorithms(use, alg, kty, crv) {\n  // Ed25519, Ed448, and secp256k1 always have \"alg\"\n  // OKP always has \"use\"\n  if (alg) {\n    return new Set([alg]);\n  }\n  switch (kty) {\n    case 'EC':\n      {\n        let algs = [];\n        if (use === 'enc' || use === undefined) {\n          algs = algs.concat(['ECDH-ES', 'ECDH-ES+A128KW', 'ECDH-ES+A192KW', 'ECDH-ES+A256KW']);\n        }\n        if (use === 'sig' || use === undefined) {\n          switch (crv) {\n            case 'P-256':\n            case 'P-384':\n              algs = algs.concat([`ES${crv.slice(-3)}`]);\n              break;\n            case 'P-521':\n              algs = algs.concat(['ES512']);\n              break;\n            case 'secp256k1':\n              if (jose.cryptoRuntime === 'node:crypto') {\n                algs = algs.concat(['ES256K']);\n              }\n              break;\n          }\n        }\n        return new Set(algs);\n      }\n    case 'OKP':\n      {\n        return new Set(['ECDH-ES', 'ECDH-ES+A128KW', 'ECDH-ES+A192KW', 'ECDH-ES+A256KW']);\n      }\n    case 'RSA':\n      {\n        let algs = [];\n        if (use === 'enc' || use === undefined) {\n          algs = algs.concat(['RSA-OAEP', 'RSA-OAEP-256', 'RSA-OAEP-384', 'RSA-OAEP-512']);\n          if (jose.cryptoRuntime === 'node:crypto') {\n            algs = algs.concat(['RSA1_5']);\n          }\n        }\n        if (use === 'sig' || use === undefined) {\n          algs = algs.concat(['PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512']);\n        }\n        return new Set(algs);\n      }\n    default:\n      throw new Error('unreachable');\n  }\n}\nmodule.exports = class KeyStore {\n  #keys;\n  constructor(i, keys) {\n    if (i !== internal) throw new Error('invalid constructor call');\n    this.#keys = keys;\n  }\n  toJWKS() {\n    return {\n      keys: this.map(_ref => {\n        let {\n            jwk: {\n              d,\n              p,\n              q,\n              dp,\n              dq,\n              qi\n            }\n          } = _ref,\n          jwk = _objectWithoutProperties(_ref.jwk, _excluded);\n        return jwk;\n      })\n    };\n  }\n  all({\n    alg,\n    kid,\n    use\n  } = {}) {\n    if (!use || !alg) {\n      throw new Error();\n    }\n    const kty = getKtyFromAlg(alg);\n    const search = {\n      alg,\n      use\n    };\n    return this.filter(key => {\n      let candidate = true;\n      if (candidate && kty !== undefined && key.jwk.kty !== kty) {\n        candidate = false;\n      }\n      if (candidate && kid !== undefined && key.jwk.kid !== kid) {\n        candidate = false;\n      }\n      if (candidate && use !== undefined && key.jwk.use !== undefined && key.jwk.use !== use) {\n        candidate = false;\n      }\n      if (candidate && key.jwk.alg && key.jwk.alg !== alg) {\n        candidate = false;\n      } else if (!key.algorithms.has(alg)) {\n        candidate = false;\n      }\n      return candidate;\n    }).sort((first, second) => keyscore(second, search) - keyscore(first, search));\n  }\n  get(...args) {\n    return this.all(...args)[0];\n  }\n  static async fromJWKS(jwks, {\n    onlyPublic = false,\n    onlyPrivate = false\n  } = {}) {\n    if (!isPlainObject(jwks) || !Array.isArray(jwks.keys) || jwks.keys.some(k => !isPlainObject(k) || !('kty' in k))) {\n      throw new TypeError('jwks must be a JSON Web Key Set formatted object');\n    }\n    const keys = [];\n    for (let jwk of jwks.keys) {\n      jwk = clone(jwk);\n      const {\n        kty,\n        kid,\n        crv\n      } = jwk;\n      let {\n        alg,\n        use\n      } = jwk;\n      if (typeof kty !== 'string' || !kty) {\n        continue;\n      }\n      if (use !== undefined && use !== 'sig' && use !== 'enc') {\n        continue;\n      }\n      if (typeof alg !== 'string' && alg !== undefined) {\n        continue;\n      }\n      if (typeof kid !== 'string' && kid !== undefined) {\n        continue;\n      }\n      if (kty === 'EC' && use === 'sig') {\n        switch (crv) {\n          case 'P-256':\n            alg = 'ES256';\n            break;\n          case 'P-384':\n            alg = 'ES384';\n            break;\n          case 'P-521':\n            alg = 'ES512';\n            break;\n          default:\n            break;\n        }\n      }\n      if (crv === 'secp256k1') {\n        use = 'sig';\n        alg = 'ES256K';\n      }\n      if (kty === 'OKP') {\n        switch (crv) {\n          case 'Ed25519':\n          case 'Ed448':\n            use = 'sig';\n            alg = 'EdDSA';\n            break;\n          case 'X25519':\n          case 'X448':\n            use = 'enc';\n            break;\n          default:\n            break;\n        }\n      }\n      if (alg && !use) {\n        switch (true) {\n          case alg.startsWith('ECDH'):\n            use = 'enc';\n            break;\n          case alg.startsWith('RSA'):\n            use = 'enc';\n            break;\n          default:\n            break;\n        }\n      }\n      if (onlyPrivate && (jwk.kty === 'oct' || !jwk.d)) {\n        throw new Error('jwks must only contain private keys');\n      }\n      if (onlyPublic && (jwk.d || jwk.k)) {\n        continue;\n      }\n      keys.push({\n        jwk: _objectSpread(_objectSpread({}, jwk), {}, {\n          alg,\n          use\n        }),\n        async keyObject(alg) {\n          if (this[alg]) {\n            return this[alg];\n          }\n          const keyObject = await jose.importJWK(this.jwk, alg);\n          this[alg] = keyObject;\n          return keyObject;\n        },\n        get algorithms() {\n          Object.defineProperty(this, 'algorithms', {\n            value: getAlgorithms(this.jwk.use, this.jwk.alg, this.jwk.kty, this.jwk.crv),\n            enumerable: true,\n            configurable: false\n          });\n          return this.algorithms;\n        }\n      });\n    }\n    return new this(internal, keys);\n  }\n  filter(...args) {\n    return this.#keys.filter(...args);\n  }\n  find(...args) {\n    return this.#keys.find(...args);\n  }\n  every(...args) {\n    return this.#keys.every(...args);\n  }\n  some(...args) {\n    return this.#keys.some(...args);\n  }\n  map(...args) {\n    return this.#keys.map(...args);\n  }\n  forEach(...args) {\n    return this.#keys.forEach(...args);\n  }\n  reduce(...args) {\n    return this.#keys.reduce(...args);\n  }\n  sort(...args) {\n    return this.#keys.sort(...args);\n  }\n  *[Symbol.iterator]() {\n    for (const key of this.#keys) {\n      yield key;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/keystore.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/merge.js":
/*!*********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/merge.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const isPlainObject = __webpack_require__(/*! ./is_plain_object */ \"(rsc)/./node_modules/openid-client/lib/helpers/is_plain_object.js\");\nfunction merge(target, ...sources) {\n  for (const source of sources) {\n    if (!isPlainObject(source)) {\n      continue;\n    }\n    for (const [key, value] of Object.entries(source)) {\n      /* istanbul ignore if */\n      if (key === '__proto__' || key === 'constructor') {\n        continue;\n      }\n      if (isPlainObject(target[key]) && isPlainObject(value)) {\n        target[key] = merge(target[key], value);\n      } else if (typeof value !== 'undefined') {\n        target[key] = value;\n      }\n    }\n  }\n  return target;\n}\nmodule.exports = merge;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9tZXJnZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsNEZBQW1CLENBQUM7QUFFbEQsU0FBU0MsS0FBS0EsQ0FBQ0MsTUFBTSxFQUFFLEdBQUdDLE9BQU8sRUFBRTtFQUNqQyxLQUFLLE1BQU1DLE1BQU0sSUFBSUQsT0FBTyxFQUFFO0lBQzVCLElBQUksQ0FBQ0osYUFBYSxDQUFDSyxNQUFNLENBQUMsRUFBRTtNQUMxQjtJQUNGO0lBQ0EsS0FBSyxNQUFNLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDSixNQUFNLENBQUMsRUFBRTtNQUNqRDtNQUNBLElBQUlDLEdBQUcsS0FBSyxXQUFXLElBQUlBLEdBQUcsS0FBSyxhQUFhLEVBQUU7UUFDaEQ7TUFDRjtNQUNBLElBQUlOLGFBQWEsQ0FBQ0csTUFBTSxDQUFDRyxHQUFHLENBQUMsQ0FBQyxJQUFJTixhQUFhLENBQUNPLEtBQUssQ0FBQyxFQUFFO1FBQ3RESixNQUFNLENBQUNHLEdBQUcsQ0FBQyxHQUFHSixLQUFLLENBQUNDLE1BQU0sQ0FBQ0csR0FBRyxDQUFDLEVBQUVDLEtBQUssQ0FBQztNQUN6QyxDQUFDLE1BQU0sSUFBSSxPQUFPQSxLQUFLLEtBQUssV0FBVyxFQUFFO1FBQ3ZDSixNQUFNLENBQUNHLEdBQUcsQ0FBQyxHQUFHQyxLQUFLO01BQ3JCO0lBQ0Y7RUFDRjtFQUVBLE9BQU9KLE1BQU07QUFDZjtBQUVBTyxNQUFNLENBQUNDLE9BQU8sR0FBR1QsS0FBSyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9tZXJnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1BsYWluT2JqZWN0ID0gcmVxdWlyZSgnLi9pc19wbGFpbl9vYmplY3QnKTtcblxuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCAuLi5zb3VyY2VzKSB7XG4gIGZvciAoY29uc3Qgc291cmNlIG9mIHNvdXJjZXMpIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNvdXJjZSkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzUGxhaW5PYmplY3QodGFyZ2V0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gbWVyZ2UodGFyZ2V0W2tleV0sIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2U7XG4iXSwibmFtZXMiOlsiaXNQbGFpbk9iamVjdCIsInJlcXVpcmUiLCJtZXJnZSIsInRhcmdldCIsInNvdXJjZXMiLCJzb3VyY2UiLCJrZXkiLCJ2YWx1ZSIsIk9iamVjdCIsImVudHJpZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/merge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/pick.js":
/*!********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/pick.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function pick(object, ...paths) {\n  const obj = {};\n  for (const path of paths) {\n    if (object[path] !== undefined) {\n      obj[path] = object[path];\n    }\n  }\n  return obj;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9waWNrLmpzIiwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInBpY2siLCJvYmplY3QiLCJwYXRocyIsIm9iaiIsInBhdGgiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9waWNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGljayhvYmplY3QsIC4uLnBhdGhzKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBmb3IgKGNvbnN0IHBhdGggb2YgcGF0aHMpIHtcbiAgICBpZiAob2JqZWN0W3BhdGhdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9ialtwYXRoXSA9IG9iamVjdFtwYXRoXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQU8sR0FBRyxTQUFTQyxJQUFJQSxDQUFDQyxNQUFNLEVBQUUsR0FBR0MsS0FBSyxFQUFFO0VBQy9DLE1BQU1DLEdBQUcsR0FBRyxDQUFDLENBQUM7RUFDZCxLQUFLLE1BQU1DLElBQUksSUFBSUYsS0FBSyxFQUFFO0lBQ3hCLElBQUlELE1BQU0sQ0FBQ0csSUFBSSxDQUFDLEtBQUtDLFNBQVMsRUFBRTtNQUM5QkYsR0FBRyxDQUFDQyxJQUFJLENBQUMsR0FBR0gsTUFBTSxDQUFDRyxJQUFJLENBQUM7SUFDMUI7RUFDRjtFQUNBLE9BQU9ELEdBQUc7QUFDWixDQUFDIiwiaWdub3JlTGlzdCI6WzBdfQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/pick.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/process_response.js":
/*!********************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/process_response.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  STATUS_CODES\n} = __webpack_require__(/*! http */ \"http\");\nconst {\n  format\n} = __webpack_require__(/*! util */ \"util\");\nconst {\n  OPError\n} = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst parseWwwAuthenticate = __webpack_require__(/*! ./www_authenticate_parser */ \"(rsc)/./node_modules/openid-client/lib/helpers/www_authenticate_parser.js\");\nconst throwAuthenticateErrors = response => {\n  const params = parseWwwAuthenticate(response.headers['www-authenticate']);\n  if (params.error) {\n    throw new OPError(params, response);\n  }\n};\nconst isStandardBodyError = response => {\n  let result = false;\n  try {\n    let jsonbody;\n    if (typeof response.body !== 'object' || Buffer.isBuffer(response.body)) {\n      jsonbody = JSON.parse(response.body);\n    } else {\n      jsonbody = response.body;\n    }\n    result = typeof jsonbody.error === 'string' && jsonbody.error.length;\n    if (result) Object.defineProperty(response, 'body', {\n      value: jsonbody,\n      configurable: true\n    });\n  } catch (err) {}\n  return result;\n};\nfunction processResponse(response, {\n  statusCode = 200,\n  body = true,\n  bearer = false\n} = {}) {\n  if (response.statusCode !== statusCode) {\n    if (bearer) {\n      throwAuthenticateErrors(response);\n    }\n    if (isStandardBodyError(response)) {\n      throw new OPError(response.body, response);\n    }\n    throw new OPError({\n      error: format('expected %i %s, got: %i %s', statusCode, STATUS_CODES[statusCode], response.statusCode, STATUS_CODES[response.statusCode])\n    }, response);\n  }\n  if (body && !response.body) {\n    throw new OPError({\n      error: format('expected %i %s with body but no body was returned', statusCode, STATUS_CODES[statusCode])\n    }, response);\n  }\n  return response.body;\n}\nmodule.exports = processResponse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9wcm9jZXNzX3Jlc3BvbnNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU07RUFBRUE7QUFBYSxDQUFDLEdBQUdDLG1CQUFPLENBQUMsa0JBQU0sQ0FBQztBQUN4QyxNQUFNO0VBQUVDO0FBQU8sQ0FBQyxHQUFHRCxtQkFBTyxDQUFDLGtCQUFNLENBQUM7QUFFbEMsTUFBTTtFQUFFRTtBQUFRLENBQUMsR0FBR0YsbUJBQU8sQ0FBQyxtRUFBVyxDQUFDO0FBQ3hDLE1BQU1HLG9CQUFvQixHQUFHSCxtQkFBTyxDQUFDLDRHQUEyQixDQUFDO0FBRWpFLE1BQU1JLHVCQUF1QixHQUFJQyxRQUFRLElBQUs7RUFDNUMsTUFBTUMsTUFBTSxHQUFHSCxvQkFBb0IsQ0FBQ0UsUUFBUSxDQUFDRSxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztFQUV6RSxJQUFJRCxNQUFNLENBQUNFLEtBQUssRUFBRTtJQUNoQixNQUFNLElBQUlOLE9BQU8sQ0FBQ0ksTUFBTSxFQUFFRCxRQUFRLENBQUM7RUFDckM7QUFDRixDQUFDO0FBRUQsTUFBTUksbUJBQW1CLEdBQUlKLFFBQVEsSUFBSztFQUN4QyxJQUFJSyxNQUFNLEdBQUcsS0FBSztFQUNsQixJQUFJO0lBQ0YsSUFBSUMsUUFBUTtJQUNaLElBQUksT0FBT04sUUFBUSxDQUFDTyxJQUFJLEtBQUssUUFBUSxJQUFJQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ1QsUUFBUSxDQUFDTyxJQUFJLENBQUMsRUFBRTtNQUN2RUQsUUFBUSxHQUFHSSxJQUFJLENBQUNDLEtBQUssQ0FBQ1gsUUFBUSxDQUFDTyxJQUFJLENBQUM7SUFDdEMsQ0FBQyxNQUFNO01BQ0xELFFBQVEsR0FBR04sUUFBUSxDQUFDTyxJQUFJO0lBQzFCO0lBQ0FGLE1BQU0sR0FBRyxPQUFPQyxRQUFRLENBQUNILEtBQUssS0FBSyxRQUFRLElBQUlHLFFBQVEsQ0FBQ0gsS0FBSyxDQUFDUyxNQUFNO0lBQ3BFLElBQUlQLE1BQU0sRUFBRVEsTUFBTSxDQUFDQyxjQUFjLENBQUNkLFFBQVEsRUFBRSxNQUFNLEVBQUU7TUFBRWUsS0FBSyxFQUFFVCxRQUFRO01BQUVVLFlBQVksRUFBRTtJQUFLLENBQUMsQ0FBQztFQUM5RixDQUFDLENBQUMsT0FBT0MsR0FBRyxFQUFFLENBQUM7RUFFZixPQUFPWixNQUFNO0FBQ2YsQ0FBQztBQUVELFNBQVNhLGVBQWVBLENBQUNsQixRQUFRLEVBQUU7RUFBRW1CLFVBQVUsR0FBRyxHQUFHO0VBQUVaLElBQUksR0FBRyxJQUFJO0VBQUVhLE1BQU0sR0FBRztBQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtFQUN6RixJQUFJcEIsUUFBUSxDQUFDbUIsVUFBVSxLQUFLQSxVQUFVLEVBQUU7SUFDdEMsSUFBSUMsTUFBTSxFQUFFO01BQ1ZyQix1QkFBdUIsQ0FBQ0MsUUFBUSxDQUFDO0lBQ25DO0lBRUEsSUFBSUksbUJBQW1CLENBQUNKLFFBQVEsQ0FBQyxFQUFFO01BQ2pDLE1BQU0sSUFBSUgsT0FBTyxDQUFDRyxRQUFRLENBQUNPLElBQUksRUFBRVAsUUFBUSxDQUFDO0lBQzVDO0lBRUEsTUFBTSxJQUFJSCxPQUFPLENBQ2Y7TUFDRU0sS0FBSyxFQUFFUCxNQUFNLENBQ1gsNEJBQTRCLEVBQzVCdUIsVUFBVSxFQUNWekIsWUFBWSxDQUFDeUIsVUFBVSxDQUFDLEVBQ3hCbkIsUUFBUSxDQUFDbUIsVUFBVSxFQUNuQnpCLFlBQVksQ0FBQ00sUUFBUSxDQUFDbUIsVUFBVSxDQUNsQztJQUNGLENBQUMsRUFDRG5CLFFBQ0YsQ0FBQztFQUNIO0VBRUEsSUFBSU8sSUFBSSxJQUFJLENBQUNQLFFBQVEsQ0FBQ08sSUFBSSxFQUFFO0lBQzFCLE1BQU0sSUFBSVYsT0FBTyxDQUNmO01BQ0VNLEtBQUssRUFBRVAsTUFBTSxDQUNYLG1EQUFtRCxFQUNuRHVCLFVBQVUsRUFDVnpCLFlBQVksQ0FBQ3lCLFVBQVUsQ0FDekI7SUFDRixDQUFDLEVBQ0RuQixRQUNGLENBQUM7RUFDSDtFQUVBLE9BQU9BLFFBQVEsQ0FBQ08sSUFBSTtBQUN0QjtBQUVBYyxNQUFNLENBQUNDLE9BQU8sR0FBR0osZUFBZSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9wcm9jZXNzX3Jlc3BvbnNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgU1RBVFVTX0NPREVTIH0gPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCB7IGZvcm1hdCB9ID0gcmVxdWlyZSgndXRpbCcpO1xuXG5jb25zdCB7IE9QRXJyb3IgfSA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xuY29uc3QgcGFyc2VXd3dBdXRoZW50aWNhdGUgPSByZXF1aXJlKCcuL3d3d19hdXRoZW50aWNhdGVfcGFyc2VyJyk7XG5cbmNvbnN0IHRocm93QXV0aGVudGljYXRlRXJyb3JzID0gKHJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IHBhcnNlV3d3QXV0aGVudGljYXRlKHJlc3BvbnNlLmhlYWRlcnNbJ3d3dy1hdXRoZW50aWNhdGUnXSk7XG5cbiAgaWYgKHBhcmFtcy5lcnJvcikge1xuICAgIHRocm93IG5ldyBPUEVycm9yKHBhcmFtcywgcmVzcG9uc2UpO1xuICB9XG59O1xuXG5jb25zdCBpc1N0YW5kYXJkQm9keUVycm9yID0gKHJlc3BvbnNlKSA9PiB7XG4gIGxldCByZXN1bHQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICBsZXQganNvbmJvZHk7XG4gICAgaWYgKHR5cGVvZiByZXNwb25zZS5ib2R5ICE9PSAnb2JqZWN0JyB8fCBCdWZmZXIuaXNCdWZmZXIocmVzcG9uc2UuYm9keSkpIHtcbiAgICAgIGpzb25ib2R5ID0gSlNPTi5wYXJzZShyZXNwb25zZS5ib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAganNvbmJvZHkgPSByZXNwb25zZS5ib2R5O1xuICAgIH1cbiAgICByZXN1bHQgPSB0eXBlb2YganNvbmJvZHkuZXJyb3IgPT09ICdzdHJpbmcnICYmIGpzb25ib2R5LmVycm9yLmxlbmd0aDtcbiAgICBpZiAocmVzdWx0KSBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzcG9uc2UsICdib2R5JywgeyB2YWx1ZToganNvbmJvZHksIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7fVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5mdW5jdGlvbiBwcm9jZXNzUmVzcG9uc2UocmVzcG9uc2UsIHsgc3RhdHVzQ29kZSA9IDIwMCwgYm9keSA9IHRydWUsIGJlYXJlciA9IGZhbHNlIH0gPSB7fSkge1xuICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gc3RhdHVzQ29kZSkge1xuICAgIGlmIChiZWFyZXIpIHtcbiAgICAgIHRocm93QXV0aGVudGljYXRlRXJyb3JzKHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNTdGFuZGFyZEJvZHlFcnJvcihyZXNwb25zZSkpIHtcbiAgICAgIHRocm93IG5ldyBPUEVycm9yKHJlc3BvbnNlLmJvZHksIHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgT1BFcnJvcihcbiAgICAgIHtcbiAgICAgICAgZXJyb3I6IGZvcm1hdChcbiAgICAgICAgICAnZXhwZWN0ZWQgJWkgJXMsIGdvdDogJWkgJXMnLFxuICAgICAgICAgIHN0YXR1c0NvZGUsXG4gICAgICAgICAgU1RBVFVTX0NPREVTW3N0YXR1c0NvZGVdLFxuICAgICAgICAgIHJlc3BvbnNlLnN0YXR1c0NvZGUsXG4gICAgICAgICAgU1RBVFVTX0NPREVTW3Jlc3BvbnNlLnN0YXR1c0NvZGVdLFxuICAgICAgICApLFxuICAgICAgfSxcbiAgICAgIHJlc3BvbnNlLFxuICAgICk7XG4gIH1cblxuICBpZiAoYm9keSAmJiAhcmVzcG9uc2UuYm9keSkge1xuICAgIHRocm93IG5ldyBPUEVycm9yKFxuICAgICAge1xuICAgICAgICBlcnJvcjogZm9ybWF0KFxuICAgICAgICAgICdleHBlY3RlZCAlaSAlcyB3aXRoIGJvZHkgYnV0IG5vIGJvZHkgd2FzIHJldHVybmVkJyxcbiAgICAgICAgICBzdGF0dXNDb2RlLFxuICAgICAgICAgIFNUQVRVU19DT0RFU1tzdGF0dXNDb2RlXSxcbiAgICAgICAgKSxcbiAgICAgIH0sXG4gICAgICByZXNwb25zZSxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlLmJvZHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcHJvY2Vzc1Jlc3BvbnNlO1xuIl0sIm5hbWVzIjpbIlNUQVRVU19DT0RFUyIsInJlcXVpcmUiLCJmb3JtYXQiLCJPUEVycm9yIiwicGFyc2VXd3dBdXRoZW50aWNhdGUiLCJ0aHJvd0F1dGhlbnRpY2F0ZUVycm9ycyIsInJlc3BvbnNlIiwicGFyYW1zIiwiaGVhZGVycyIsImVycm9yIiwiaXNTdGFuZGFyZEJvZHlFcnJvciIsInJlc3VsdCIsImpzb25ib2R5IiwiYm9keSIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiSlNPTiIsInBhcnNlIiwibGVuZ3RoIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsImVyciIsInByb2Nlc3NSZXNwb25zZSIsInN0YXR1c0NvZGUiLCJiZWFyZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/process_response.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/request.js":
/*!***********************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/request.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const _excluded = [\"form\", \"responseType\", \"json\", \"body\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nconst assert = __webpack_require__(/*! assert */ \"assert\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst {\n  once\n} = __webpack_require__(/*! events */ \"events\");\nconst {\n  URL\n} = __webpack_require__(/*! url */ \"url\");\nconst LRU = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/openid-client/node_modules/lru-cache/index.js\");\nconst pkg = __webpack_require__(/*! ../../package.json */ \"(rsc)/./node_modules/openid-client/package.json\");\nconst {\n  RPError\n} = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst pick = __webpack_require__(/*! ./pick */ \"(rsc)/./node_modules/openid-client/lib/helpers/pick.js\");\nconst {\n  deep: defaultsDeep\n} = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/openid-client/lib/helpers/defaults.js\");\nconst {\n  HTTP_OPTIONS\n} = __webpack_require__(/*! ./consts */ \"(rsc)/./node_modules/openid-client/lib/helpers/consts.js\");\nlet DEFAULT_HTTP_OPTIONS;\nconst NQCHAR = /^[\\x21\\x23-\\x5B\\x5D-\\x7E]+$/;\nconst allowed = ['agent', 'ca', 'cert', 'crl', 'headers', 'key', 'lookup', 'passphrase', 'pfx', 'timeout'];\nconst setDefaults = (props, options) => {\n  DEFAULT_HTTP_OPTIONS = defaultsDeep({}, props.length ? pick(options, ...props) : options, DEFAULT_HTTP_OPTIONS);\n};\nsetDefaults([], {\n  headers: {\n    'User-Agent': `${pkg.name}/${pkg.version} (${pkg.homepage})`,\n    'Accept-Encoding': 'identity'\n  },\n  timeout: 3500\n});\nfunction send(req, body, contentType) {\n  if (contentType) {\n    req.removeHeader('content-type');\n    req.setHeader('content-type', contentType);\n  }\n  if (body) {\n    req.removeHeader('content-length');\n    req.setHeader('content-length', Buffer.byteLength(body));\n    req.write(body);\n  }\n  req.end();\n}\nconst nonces = new LRU({\n  max: 100\n});\nmodule.exports = async function request(options, {\n  accessToken,\n  mTLS = false,\n  DPoP\n} = {}) {\n  let url;\n  try {\n    url = new URL(options.url);\n    delete options.url;\n    assert(/^(https?:)$/.test(url.protocol));\n  } catch (err) {\n    throw new TypeError('only valid absolute URLs can be requested');\n  }\n  const optsFn = this[HTTP_OPTIONS];\n  let opts = options;\n  const nonceKey = `${url.origin}${url.pathname}`;\n  if (DPoP && 'dpopProof' in this) {\n    opts.headers = opts.headers || {};\n    opts.headers.DPoP = await this.dpopProof({\n      htu: `${url.origin}${url.pathname}`,\n      htm: options.method || 'GET',\n      nonce: nonces.get(nonceKey)\n    }, DPoP, accessToken);\n  }\n  let userOptions;\n  if (optsFn) {\n    userOptions = pick(optsFn.call(this, url, defaultsDeep({}, opts, DEFAULT_HTTP_OPTIONS)), ...allowed);\n  }\n  opts = defaultsDeep({}, userOptions, opts, DEFAULT_HTTP_OPTIONS);\n  if (mTLS && !opts.pfx && !(opts.key && opts.cert)) {\n    throw new TypeError('mutual-TLS certificate and key not set');\n  }\n  if (opts.searchParams) {\n    for (const [key, value] of Object.entries(opts.searchParams)) {\n      url.searchParams.delete(key);\n      url.searchParams.set(key, value);\n    }\n  }\n  let responseType;\n  let form;\n  let json;\n  let body;\n  var _opts = opts;\n  ({\n    form,\n    responseType,\n    json,\n    body\n  } = _opts);\n  opts = _objectWithoutProperties(_opts, _excluded);\n  _opts;\n  for (const [key, value] of Object.entries(opts.headers || {})) {\n    if (value === undefined) {\n      delete opts.headers[key];\n    }\n  }\n  let response;\n  const req = (url.protocol === 'https:' ? https.request : http.request)(url.href, opts);\n  return (async () => {\n    if (json) {\n      send(req, JSON.stringify(json), 'application/json');\n    } else if (form) {\n      send(req, querystring.stringify(form), 'application/x-www-form-urlencoded');\n    } else if (body) {\n      send(req, body);\n    } else {\n      send(req);\n    }\n    [response] = await Promise.race([once(req, 'response'), once(req, 'timeout')]);\n\n    // timeout reached\n    if (!response) {\n      req.destroy();\n      throw new RPError(`outgoing request timed out after ${opts.timeout}ms`);\n    }\n    const parts = [];\n    for await (const part of response) {\n      parts.push(part);\n    }\n    if (parts.length) {\n      switch (responseType) {\n        case 'json':\n          {\n            Object.defineProperty(response, 'body', {\n              get() {\n                let value = Buffer.concat(parts);\n                try {\n                  value = JSON.parse(value);\n                } catch (err) {\n                  Object.defineProperty(err, 'response', {\n                    value: response\n                  });\n                  throw err;\n                } finally {\n                  Object.defineProperty(response, 'body', {\n                    value,\n                    configurable: true\n                  });\n                }\n                return value;\n              },\n              configurable: true\n            });\n            break;\n          }\n        case undefined:\n        case 'buffer':\n          {\n            Object.defineProperty(response, 'body', {\n              get() {\n                const value = Buffer.concat(parts);\n                Object.defineProperty(response, 'body', {\n                  value,\n                  configurable: true\n                });\n                return value;\n              },\n              configurable: true\n            });\n            break;\n          }\n        default:\n          throw new TypeError('unsupported responseType request option');\n      }\n    }\n    return response;\n  })().catch(err => {\n    if (response) Object.defineProperty(err, 'response', {\n      value: response\n    });\n    throw err;\n  }).finally(() => {\n    const dpopNonce = response && response.headers['dpop-nonce'];\n    if (dpopNonce && NQCHAR.test(dpopNonce)) {\n      nonces.set(nonceKey, dpopNonce);\n    }\n  });\n};\nmodule.exports.setDefaults = setDefaults.bind(undefined, allowed);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy9yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU1BLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxzQkFBUSxDQUFDO0FBQ2hDLE1BQU1DLFdBQVcsR0FBR0QsbUJBQU8sQ0FBQyxnQ0FBYSxDQUFDO0FBQzFDLE1BQU1FLElBQUksR0FBR0YsbUJBQU8sQ0FBQyxrQkFBTSxDQUFDO0FBQzVCLE1BQU1HLEtBQUssR0FBR0gsbUJBQU8sQ0FBQyxvQkFBTyxDQUFDO0FBQzlCLE1BQU07RUFBRUk7QUFBSyxDQUFDLEdBQUdKLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNsQyxNQUFNO0VBQUVLO0FBQUksQ0FBQyxHQUFHTCxtQkFBTyxDQUFDLGdCQUFLLENBQUM7QUFFOUIsTUFBTU0sR0FBRyxHQUFHTixtQkFBTyxDQUFDLHFGQUFXLENBQUM7QUFFaEMsTUFBTU8sR0FBRyxHQUFHUCxtQkFBTyxDQUFDLDJFQUFvQixDQUFDO0FBQ3pDLE1BQU07RUFBRVE7QUFBUSxDQUFDLEdBQUdSLG1CQUFPLENBQUMsbUVBQVcsQ0FBQztBQUV4QyxNQUFNUyxJQUFJLEdBQUdULG1CQUFPLENBQUMsc0VBQVEsQ0FBQztBQUM5QixNQUFNO0VBQUVVLElBQUksRUFBRUM7QUFBYSxDQUFDLEdBQUdYLG1CQUFPLENBQUMsOEVBQVksQ0FBQztBQUNwRCxNQUFNO0VBQUVZO0FBQWEsQ0FBQyxHQUFHWixtQkFBTyxDQUFDLDBFQUFVLENBQUM7QUFFNUMsSUFBSWEsb0JBQW9CO0FBQ3hCLE1BQU1DLE1BQU0sR0FBRyw2QkFBNkI7QUFFNUMsTUFBTUMsT0FBTyxHQUFHLENBQ2QsT0FBTyxFQUNQLElBQUksRUFDSixNQUFNLEVBQ04sS0FBSyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsUUFBUSxFQUNSLFlBQVksRUFDWixLQUFLLEVBQ0wsU0FBUyxDQUNWO0FBRUQsTUFBTUMsV0FBVyxHQUFHQSxDQUFDQyxL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QUNsQ2xCLE1BQU0sQ0FBQ3FCLGNBQWMsQ0FBQ1YsUUFBUSxFQUFFLE1BQU0sRUFBRTtrQkFBRVosS0FBSztrQkFBRXlCLFlBQVksRUFBRTtnQkFBSyxDQUFDLENBQUM7Z0JBQ3RFLE9BQU96QixLQUFLO2NBQ2QsQ0FBQztjQUNEeUIsWUFBWSxFQUFFO1lBQ2hCLENBQUMsQ0FBQztZQUNGO1VBQ0Y7UUFDQTtVQUNFLE1BQU0sSUFBSTNDLFNBQVMsQ0FBQyx5Q0FBeUMsQ0FBQztNQUNsRTtJQUNGO0lBRUEsT0FBTzhCLFFBQVE7RUFDakIsQ0FBQyxFQUFFLENBQUMsQ0FDRGMsS0FBSyxDQUFFN0MsR0FBRyxJQUFLO0lBQ2QsSUFBSStCLFFBQVEsRUFBRVgsTUFBTSxDQUFDcUIsY0FBYyxDQUFDekMsR0FBRyxFQUFFLFVBQVUsRUFBRTtNQUFFbUIsS0FBSyxFQUFFWTtJQUFTLENBQUMsQ0FBQztJQUN6RSxNQUFNL0IsR0FBRztFQUNYLENBQUMsQ0FBQyxDQUNEOEMsT0FBTyxDQUFDLE1BQU07SUFDYixNQUFNQyxTQUFTLEdBQUdoQixRQUFRLElBQUlBLFFBQVEsQ0FBQ3pELE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFDNUQsSUFBSXlFLFNBQVMsSUFBSS9FLE1BQU0sQ0FBQzhCLElBQUksQ0FBQ2lELFNBQVMsQ0FBQyxFQUFFO01BQ3ZDMUQsTUFBTSxDQUFDa0MsR0FBRyxDQUFDbkIsUUFBUSxFQUFFMkMsU0FBUyxDQUFDO0lBQ2pDO0VBQ0YsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVEeEQsMEJBQTBCLEdBQUdyQixXQUFXLENBQUM4RSxJQUFJLENBQUNsQixTQUFTLEVBQUU3RCxPQUFPLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvcmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcbmNvbnN0IHF1ZXJ5c3RyaW5nID0gcmVxdWlyZSgncXVlcnlzdHJpbmcnKTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5jb25zdCB7IG9uY2UgfSA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuY29uc3QgeyBVUkwgfSA9IHJlcXVpcmUoJ3VybCcpO1xuXG5jb25zdCBMUlUgPSByZXF1aXJlKCdscnUtY2FjaGUnKTtcblxuY29uc3QgcGtnID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJyk7XG5jb25zdCB7IFJQRXJyb3IgfSA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xuXG5jb25zdCBwaWNrID0gcmVxdWlyZSgnLi9waWNrJyk7XG5jb25zdCB7IGRlZXA6IGRlZmF1bHRzRGVlcCB9ID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuY29uc3QgeyBIVFRQX09QVElPTlMgfSA9IHJlcXVpcmUoJy4vY29uc3RzJyk7XG5cbmxldCBERUZBVUxUX0hUVFBfT1BUSU9OUztcbmNvbnN0IE5RQ0hBUiA9IC9eW1xceDIxXFx4MjMtXFx4NUJcXHg1RC1cXHg3RV0rJC87XG5cbmNvbnN0IGFsbG93ZWQgPSBbXG4gICdhZ2VudCcsXG4gICdjYScsXG4gICdjZXJ0JyxcbiAgJ2NybCcsXG4gICdoZWFkZXJzJyxcbiAgJ2tleScsXG4gICdsb29rdXAnLFxuICAncGFzc3BocmFzZScsXG4gICdwZngnLFxuICAndGltZW91dCcsXG5dO1xuXG5jb25zdCBzZXREZWZhdWx0cyA9IChwcm9wcywgb3B0aW9ucykgPT4ge1xuICBERUZBVUxUX0hUVFBfT1BUSU9OUyA9IGRlZmF1bHRzRGVlcChcbiAgICB7fSxcbiAgICBwcm9wcy5sZW5ndGggPyBwaWNrKG9wdGlvbnMsIC4uLnByb3BzKSA6IG9wdGlvbnMsXG4gICAgREVGQVVMVF9IVFRQX09QVElPTlMsXG4gICk7XG59O1xuXG5zZXREZWZhdWx0cyhbXSwge1xuICBoZWFkZXJzOiB7XG4gICAgJ1VzZXItQWdlbnQnOiBgJHtwa2cubmFtZX0vJHtwa2cudmVyc2lvbn0gKCR7cGtnLmhvbWVwYWdlfSlgLFxuICAgICdBY2NlcHQtRW5jb2RpbmcnOiAnaWRlbnRpdHknLFxuICB9LFxuICB0aW1lb3V0OiAzNTAwLFxufSk7XG5cbmZ1bmN0aW9uIHNlbmQocmVxLCBib2R5LCBjb250ZW50VHlwZSkge1xuICBpZiAoY29udGVudFR5cGUpIHtcbiAgICByZXEucmVtb3ZlSGVhZGVyKCdjb250ZW50LXR5cGUnKTtcbiAgICByZXEuc2V0SGVhZGVyKCdjb250ZW50LXR5cGUnLCBjb250ZW50VHlwZSk7XG4gIH1cbiAgaWYgKGJvZHkpIHtcbiAgICByZXEucmVtb3ZlSGVhZGVyKCdjb250ZW50LWxlbmd0aCcpO1xuICAgIHJlcS5zZXRIZWFkZXIoJ2NvbnRlbnQtbGVuZ3RoJywgQnVmZmVyLmJ5dGVMZW5ndGgoYm9keSkpO1xuICAgIHJlcS53cml0ZShib2R5KTtcbiAgfVxuICByZXEuZW5kKCk7XG59XG5cbmNvbnN0IG5vbmNlcyA9IG5ldyBMUlUoeyBtYXg6IDEwMCB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbiByZXF1ZXN0KG9wdGlvbnMsIHsgYWNjZXNzVG9rZW4sIG1UTFMgPSBmYWxzZSwgRFBvUCB9ID0ge30pIHtcbiAgbGV0IHVybDtcbiAgdHJ5IHtcbiAgICB1cmwgPSBuZXcgVVJMKG9wdGlvbnMudXJsKTtcbiAgICBkZWxldGUgb3B0aW9ucy51cmw7XG4gICAgYXNzZXJ0KC9eKGh0dHBzPzopJC8udGVzdCh1cmwucHJvdG9jb2wpKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb25seSB2YWxpZCBhYnNvbHV0ZSBVUkxzIGNhbiBiZSByZXF1ZXN0ZWQnKTtcbiAgfVxuICBjb25zdCBvcHRzRm4gPSB0aGlzW0hUVFBfT1BUSU9OU107XG4gIGxldCBvcHRzID0gb3B0aW9ucztcblxuICBjb25zdCBub25jZUtleSA9IGAke3VybC5vcmlnaW59JHt1cmwucGF0aG5hbWV9YDtcbiAgaWYgKERQb1AgJiYgJ2Rwb3BQcm9vZicgaW4gdGhpcykge1xuICAgIG9wdHMuaGVhZGVycyA9IG9wdHMuaGVhZGVycyB8fCB7fTtcbiAgICBvcHRzLmhlYWRlcnMuRFBvUCA9IGF3YWl0IHRoaXMuZHBvcFByb29mKFxuICAgICAge1xuICAgICAgICBodHU6IGAke3VybC5vcmlnaW59JHt1cmwucGF0aG5hbWV9YCxcbiAgICAgICAgaHRtOiBvcHRpb25zLm1ldGhvZCB8fCAnR0VUJyxcbiAgICAgICAgbm9uY2U6IG5vbmNlcy5nZXQobm9uY2VLZXkpLFxuICAgICAgfSxcbiAgICAgIERQb1AsXG4gICAgICBhY2Nlc3NUb2tlbixcbiAgICApO1xuICB9XG5cbiAgbGV0IHVzZXJPcHRpb25zO1xuICBpZiAob3B0c0ZuKSB7XG4gICAgdXNlck9wdGlvbnMgPSBwaWNrKFxuICAgICAgb3B0c0ZuLmNhbGwodGhpcywgdXJsLCBkZWZhdWx0c0RlZXAoe30sIG9wdHMsIERFRkFVTFRfSFRUUF9PUFRJT05TKSksXG4gICAgICAuLi5hbGxvd2VkLFxuICAgICk7XG4gIH1cbiAgb3B0cyA9IGRlZmF1bHRzRGVlcCh7fSwgdXNlck9wdGlvbnMsIG9wdHMsIERFRkFVTFRfSFRUUF9PUFRJT05TKTtcblxuICBpZiAobVRMUyAmJiAhb3B0cy5wZnggJiYgIShvcHRzLmtleSAmJiBvcHRzLmNlcnQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbXV0dWFsLVRMUyBjZXJ0aWZpY2F0ZSBhbmQga2V5IG5vdCBzZXQnKTtcbiAgfVxuXG4gIGlmIChvcHRzLnNlYXJjaFBhcmFtcykge1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9wdHMuc2VhcmNoUGFyYW1zKSkge1xuICAgICAgdXJsLnNlYXJjaFBhcmFtcy5kZWxldGUoa2V5KTtcbiAgICAgIHVybC5zZWFyY2hQYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGxldCByZXNwb25zZVR5cGU7XG4gIGxldCBmb3JtO1xuICBsZXQganNvbjtcbiAgbGV0IGJvZHk7XG4gICh7IGZvcm0sIHJlc3BvbnNlVHlwZSwganNvbiwgYm9keSwgLi4ub3B0cyB9ID0gb3B0cyk7XG5cbiAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob3B0cy5oZWFkZXJzIHx8IHt9KSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZWxldGUgb3B0cy5oZWFkZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgbGV0IHJlc3BvbnNlO1xuICBjb25zdCByZXEgPSAodXJsLnByb3RvY29sID09PSAnaHR0cHM6JyA/IGh0dHBzLnJlcXVlc3QgOiBodHRwLnJlcXVlc3QpKHVybC5ocmVmLCBvcHRzKTtcbiAgcmV0dXJuIChhc3luYyAoKSA9PiB7XG4gICAgaWYgKGpzb24pIHtcbiAgICAgIHNlbmQocmVxLCBKU09OLnN0cmluZ2lmeShqc29uKSwgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICB9IGVsc2UgaWYgKGZvcm0pIHtcbiAgICAgIHNlbmQocmVxLCBxdWVyeXN0cmluZy5zdHJpbmdpZnkoZm9ybSksICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcbiAgICB9IGVsc2UgaWYgKGJvZHkpIHtcbiAgICAgIHNlbmQocmVxLCBib2R5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VuZChyZXEpO1xuICAgIH1cblxuICAgIFtyZXNwb25zZV0gPSBhd2FpdCBQcm9taXNlLnJhY2UoW29uY2UocmVxLCAncmVzcG9uc2UnKSwgb25jZShyZXEsICd0aW1lb3V0JyldKTtcblxuICAgIC8vIHRpbWVvdXQgcmVhY2hlZFxuICAgIGlmICghcmVzcG9uc2UpIHtcbiAgICAgIHJlcS5kZXN0cm95KCk7XG4gICAgICB0aHJvdyBuZXcgUlBFcnJvcihgb3V0Z29pbmcgcmVxdWVzdCB0aW1lZCBvdXQgYWZ0ZXIgJHtvcHRzLnRpbWVvdXR9bXNgKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuXG4gICAgZm9yIGF3YWl0IChjb25zdCBwYXJ0IG9mIHJlc3BvbnNlKSB7XG4gICAgICBwYXJ0cy5wdXNoKHBhcnQpO1xuICAgIH1cblxuICAgIGlmIChwYXJ0cy5sZW5ndGgpIHtcbiAgICAgIHN3aXRjaCAocmVzcG9uc2VUeXBlKSB7XG4gICAgICAgIGNhc2UgJ2pzb24nOiB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3BvbnNlLCAnYm9keScsIHtcbiAgICAgICAgICAgIGdldCgpIHtcbiAgICAgICAgICAgICAgbGV0IHZhbHVlID0gQnVmZmVyLmNvbmNhdChwYXJ0cyk7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVyciwgJ3Jlc3BvbnNlJywgeyB2YWx1ZTogcmVzcG9uc2UgfSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNwb25zZSwgJ2JvZHknLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgY2FzZSAnYnVmZmVyJzoge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNwb25zZSwgJ2JvZHknLCB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gQnVmZmVyLmNvbmNhdChwYXJ0cyk7XG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNwb25zZSwgJ2JvZHknLCB7IHZhbHVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bnN1cHBvcnRlZCByZXNwb25zZVR5cGUgcmVxdWVzdCBvcHRpb24nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0pKClcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgaWYgKHJlc3BvbnNlKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXJyLCAncmVzcG9uc2UnLCB7IHZhbHVlOiByZXNwb25zZSB9KTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9KVxuICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgIGNvbnN0IGRwb3BOb25jZSA9IHJlc3BvbnNlICYmIHJlc3BvbnNlLmhlYWRlcnNbJ2Rwb3Atbm9uY2UnXTtcbiAgICAgIGlmIChkcG9wTm9uY2UgJiYgTlFDSEFSLnRlc3QoZHBvcE5vbmNlKSkge1xuICAgICAgICBub25jZXMuc2V0KG5vbmNlS2V5LCBkcG9wTm9uY2UpO1xuICAgICAgfVxuICAgIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMuc2V0RGVmYXVsdHMgPSBzZXREZWZhdWx0cy5iaW5kKHVuZGVmaW5lZCwgYWxsb3dlZCk7XG4iXSwibmFtZXMiOlsiYXNzZXJ0IiwicmVxdWlyZSIsInF1ZXJ5c3RyaW5nIiwiaHR0cCIsImh0dHBzIiwib25jZSIsIlVSTCIsIkxSVSIsInBrZyIsIlJQRXJyb3IiLCJwaWNrIiwiZGVlcCIsImRlZmF1bHRzRGVlcCIsIkhUVFBfT1BUSU9OUyIsIkRFRkFVTFRfSFRUUF9PUFRJT05TIiwiTlFDSEFSIiwiYWxsb3dlZCIsInNldERlZmF1bHRzIiwicHJvcHMiLCJvcHRpb25zIiwibGVuZ3RoIiwiaGVhZGVycyIsIm5hbWUiLCJ2ZXJzaW9uIiwiaG9tZXBhZ2UiLCJ0aW1lb3V0Iiwic2VuZCIsInJlcSIsImJvZHkiLCJjb250ZW50VHlwZSIsInJlbW92ZUhlYWRlciIsInNldEhlYWRlciIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJ3cml0ZSIsImVuZCIsIm5vbmNlcyIsIm1heCIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1ZXN0IiwiYWNjZXNzVG9rZW4iLCJtVExTIiwiRFBvUCIsInVybCIsInRlc3QiLCJwcm90b2NvbCIsImVyciIsIlR5cGVFcnJvciIsIm9wdHNGbiIsIm9wdHMiLCJub25jZUtleSIsIm9yaWdpbiIsInBhdGhuYW1lIiwiZHBvcFByb29mIiwiaHR1IiwiaHRtIiwibWV0aG9kIiwibm9uY2UiLCJnZXQiLCJ1c2VyT3B0aW9ucyIsImNhbGwiLCJwZngiLCJrZXkiLCJjZXJ0Iiwic2VhcmNoUGFyYW1zIiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwiZGVsZXRlIiwic2V0IiwicmVzcG9uc2VUeXBlIiwiZm9ybSIsImpzb24iLCJfb3B0cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9leGNsdWRlZCIsInVuZGVmaW5lZCIsInJlc3BvbnNlIiwiaHJlZiIsIkpTT04iLCJzdHJpbmdpZnkiLCJQcm9taXNlIiwicmFjZSIsImRlc3Ryb3kiLCJwYXJ0cyIsInBhcnQiLCJwdXNoIiwiZGVmaW5lUHJvcGVydHkiLCJjb25jYXQiLCJwYXJzZSIsImNvbmZpZ3VyYWJsZSIsImNhdGNoIiwiZmluYWxseSIsImRwb3BOb25jZSIsImJpbmQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js":
/*!******************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/unix_timestamp.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("module.exports = () => Math.floor(Date.now() / 1000);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy91bml4X3RpbWVzdGFtcC5qcyIsIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93Il0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvdW5peF90aW1lc3RhbXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSAoKSA9PiBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLE1BQU1DLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDIiwiaWdub3JlTGlzdCI6WzBdfQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js":
/*!**************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/weak_cache.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("module.exports.keystores = new WeakMap();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy93ZWFrX2NhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFBQSx3QkFBd0IsR0FBRyxJQUFJRyxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy93ZWFrX2NhY2hlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzLmtleXN0b3JlcyA9IG5ldyBXZWFrTWFwKCk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImtleXN0b3JlcyIsIldlYWtNYXAiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/weak_cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/webfinger_normalize.js":
/*!***********************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/webfinger_normalize.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("// Credit: https://github.com/rohe/pyoidc/blob/master/src/oic/utils/webfinger.py\n\n// -- Normalization --\n// A string of any other type is interpreted as a URI either the form of scheme\n// \"://\" authority path-abempty [ \"?\" query ] [ \"#\" fragment ] or authority\n// path-abempty [ \"?\" query ] [ \"#\" fragment ] per RFC 3986 [RFC3986] and is\n// normalized according to the following rules:\n//\n// If the user input Identifier does not have an RFC 3986 [RFC3986] scheme\n// portion, the string is interpreted as [userinfo \"@\"] host [\":\" port]\n// path-abempty [ \"?\" query ] [ \"#\" fragment ] per RFC 3986 [RFC3986].\n// If the userinfo component is present and all of the path component, query\n// component, and port component are empty, the acct scheme is assumed. In this\n// case, the normalized URI is formed by prefixing acct: to the string as the\n// scheme. Per the 'acct' URI Scheme [I‑D.ietf‑appsawg‑acct‑uri], if there is an\n// at-sign character ('@') in the userinfo component, it needs to be\n// percent-encoded as described in RFC 3986 [RFC3986].\n// For all other inputs without a scheme portion, the https scheme is assumed,\n// and the normalized URI is formed by prefixing https:// to the string as the\n// scheme.\n// If the resulting URI contains a fragment portion, it MUST be stripped off\n// together with the fragment delimiter character \"#\".\n// The WebFinger [I‑D.ietf‑appsawg‑webfinger] Resource in this case is the\n// resulting URI, and the WebFinger Host is the authority component.\n//\n// Note: Since the definition of authority in RFC 3986 [RFC3986] is\n// [ userinfo \"@\" ] host [ \":\" port ], it is legal to have a user input\n// identifier like userinfo@host:port, e.g., alice@example.com:8080.\n\nconst PORT = /^\\d+$/;\nfunction hasScheme(input) {\n  if (input.includes('://')) return true;\n  const authority = input.replace(/(\\/|\\?)/g, '#').split('#')[0];\n  if (authority.includes(':')) {\n    const index = authority.indexOf(':');\n    const hostOrPort = authority.slice(index + 1);\n    if (!PORT.test(hostOrPort)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction acctSchemeAssumed(input) {\n  if (!input.includes('@')) return false;\n  const parts = input.split('@');\n  const host = parts[parts.length - 1];\n  return !(host.includes(':') || host.includes('/') || host.includes('?'));\n}\nfunction normalize(input) {\n  if (typeof input !== 'string') {\n    throw new TypeError('input must be a string');\n  }\n  let output;\n  if (hasScheme(input)) {\n    output = input;\n  } else if (acctSchemeAssumed(input)) {\n    output = `acct:${input}`;\n  } else {\n    output = `https://${input}`;\n  }\n  return output.split('#')[0];\n}\nmodule.exports = normalize;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy93ZWJmaW5nZXJfbm9ybWFsaXplLmpzIiwibmFtZXMiOlsiUE9SVCIsImhhc1NjaGVtZSIsImlucHV0IiwiaW5jbHVkZXMiLCJhdXRob3JpdHkiLCJyZXBsYWNlIiwic3BsaXQiLCJpbmRleCIsImluZGV4T2YiLCJob3N0T3JQb3J0Iiwic2xpY2UiLCJ0ZXN0IiwiYWNjdFNjaGVtZUFzc3VtZWQiLCJwYXJ0cyIsImhvc3QiLCJsZW5ndGgiLCJub3JtYWxpemUiLCJUeXBlRXJyb3IiLCJvdXRwdXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvd2ViZmluZ2VyX25vcm1hbGl6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDcmVkaXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9yb2hlL3B5b2lkYy9ibG9iL21hc3Rlci9zcmMvb2ljL3V0aWxzL3dlYmZpbmdlci5weVxuXG4vLyAtLSBOb3JtYWxpemF0aW9uIC0tXG4vLyBBIHN0cmluZyBvZiBhbnkgb3RoZXIgdHlwZSBpcyBpbnRlcnByZXRlZCBhcyBhIFVSSSBlaXRoZXIgdGhlIGZvcm0gb2Ygc2NoZW1lXG4vLyBcIjovL1wiIGF1dGhvcml0eSBwYXRoLWFiZW1wdHkgWyBcIj9cIiBxdWVyeSBdIFsgXCIjXCIgZnJhZ21lbnQgXSBvciBhdXRob3JpdHlcbi8vIHBhdGgtYWJlbXB0eSBbIFwiP1wiIHF1ZXJ5IF0gWyBcIiNcIiBmcmFnbWVudCBdIHBlciBSRkMgMzk4NiBbUkZDMzk4Nl0gYW5kIGlzXG4vLyBub3JtYWxpemVkIGFjY29yZGluZyB0byB0aGUgZm9sbG93aW5nIHJ1bGVzOlxuLy9cbi8vIElmIHRoZSB1c2VyIGlucHV0IElkZW50aWZpZXIgZG9lcyBub3QgaGF2ZSBhbiBSRkMgMzk4NiBbUkZDMzk4Nl0gc2NoZW1lXG4vLyBwb3J0aW9uLCB0aGUgc3RyaW5nIGlzIGludGVycHJldGVkIGFzIFt1c2VyaW5mbyBcIkBcIl0gaG9zdCBbXCI6XCIgcG9ydF1cbi8vIHBhdGgtYWJlbXB0eSBbIFwiP1wiIHF1ZXJ5IF0gWyBcIiNcIiBmcmFnbWVudCBdIHBlciBSRkMgMzk4NiBbUkZDMzk4Nl0uXG4vLyBJZiB0aGUgdXNlcmluZm8gY29tcG9uZW50IGlzIHByZXNlbnQgYW5kIGFsbCBvZiB0aGUgcGF0aCBjb21wb25lbnQsIHF1ZXJ5XG4vLyBjb21wb25lbnQsIGFuZCBwb3J0IGNvbXBvbmVudCBhcmUgZW1wdHksIHRoZSBhY2N0IHNjaGVtZSBpcyBhc3N1bWVkLiBJbiB0aGlzXG4vLyBjYXNlLCB0aGUgbm9ybWFsaXplZCBVUkkgaXMgZm9ybWVkIGJ5IHByZWZpeGluZyBhY2N0OiB0byB0aGUgc3RyaW5nIGFzIHRoZVxuLy8gc2NoZW1lLiBQZXIgdGhlICdhY2N0JyBVUkkgU2NoZW1lIFtJ4oCRRC5pZXRm4oCRYXBwc2F3Z+KAkWFjY3TigJF1cmldLCBpZiB0aGVyZSBpcyBhblxuLy8gYXQtc2lnbiBjaGFyYWN0ZXIgKCdAJykgaW4gdGhlIHVzZXJpbmZvIGNvbXBvbmVudCwgaXQgbmVlZHMgdG8gYmVcbi8vIHBlcmNlbnQtZW5jb2RlZCBhcyBkZXNjcmliZWQgaW4gUkZDIDM5ODYgW1JGQzM5ODZdLlxuLy8gRm9yIGFsbCBvdGhlciBpbnB1dHMgd2l0aG91dCBhIHNjaGVtZSBwb3J0aW9uLCB0aGUgaHR0cHMgc2NoZW1lIGlzIGFzc3VtZWQsXG4vLyBhbmQgdGhlIG5vcm1hbGl6ZWQgVVJJIGlzIGZvcm1lZCBieSBwcmVmaXhpbmcgaHR0cHM6Ly8gdG8gdGhlIHN0cmluZyBhcyB0aGVcbi8vIHNjaGVtZS5cbi8vIElmIHRoZSByZXN1bHRpbmcgVVJJIGNvbnRhaW5zIGEgZnJhZ21lbnQgcG9ydGlvbiwgaXQgTVVTVCBiZSBzdHJpcHBlZCBvZmZcbi8vIHRvZ2V0aGVyIHdpdGggdGhlIGZyYWdtZW50IGRlbGltaXRlciBjaGFyYWN0ZXIgXCIjXCIuXG4vLyBUaGUgV2ViRmluZ2VyIFtJ4oCRRC5pZXRm4oCRYXBwc2F3Z+KAkXdlYmZpbmdlcl0gUmVzb3VyY2UgaW4gdGhpcyBjYXNlIGlzIHRoZVxuLy8gcmVzdWx0aW5nIFVSSSwgYW5kIHRoZSBXZWJGaW5nZXIgSG9zdCBpcyB0aGUgYXV0aG9yaXR5IGNvbXBvbmVudC5cbi8vXG4vLyBOb3RlOiBTaW5jZSB0aGUgZGVmaW5pdGlvbiBvZiBhdXRob3JpdHkgaW4gUkZDIDM5ODYgW1JGQzM5ODZdIGlzXG4vLyBbIHVzZXJpbmZvIFwiQFwiIF0gaG9zdCBbIFwiOlwiIHBvcnQgXSwgaXQgaXMgbGVnYWwgdG8gaGF2ZSBhIHVzZXIgaW5wdXRcbi8vIGlkZW50aWZpZXIgbGlrZSB1c2VyaW5mb0Bob3N0OnBvcnQsIGUuZy4sIGFsaWNlQGV4YW1wbGUuY29tOjgwODAuXG5cbmNvbnN0IFBPUlQgPSAvXlxcZCskLztcblxuZnVuY3Rpb24gaGFzU2NoZW1lKGlucHV0KSB7XG4gIGlmIChpbnB1dC5pbmNsdWRlcygnOi8vJykpIHJldHVybiB0cnVlO1xuXG4gIGNvbnN0IGF1dGhvcml0eSA9IGlucHV0LnJlcGxhY2UoLyhcXC98XFw/KS9nLCAnIycpLnNwbGl0KCcjJylbMF07XG4gIGlmIChhdXRob3JpdHkuaW5jbHVkZXMoJzonKSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXV0aG9yaXR5LmluZGV4T2YoJzonKTtcbiAgICBjb25zdCBob3N0T3JQb3J0ID0gYXV0aG9yaXR5LnNsaWNlKGluZGV4ICsgMSk7XG4gICAgaWYgKCFQT1JULnRlc3QoaG9zdE9yUG9ydCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWNjdFNjaGVtZUFzc3VtZWQoaW5wdXQpIHtcbiAgaWYgKCFpbnB1dC5pbmNsdWRlcygnQCcpKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IHBhcnRzID0gaW5wdXQuc3BsaXQoJ0AnKTtcbiAgY29uc3QgaG9zdCA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gIShob3N0LmluY2x1ZGVzKCc6JykgfHwgaG9zdC5pbmNsdWRlcygnLycpIHx8IGhvc3QuaW5jbHVkZXMoJz8nKSk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShpbnB1dCkge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lucHV0IG11c3QgYmUgYSBzdHJpbmcnKTtcbiAgfVxuXG4gIGxldCBvdXRwdXQ7XG4gIGlmIChoYXNTY2hlbWUoaW5wdXQpKSB7XG4gICAgb3V0cHV0ID0gaW5wdXQ7XG4gIH0gZWxzZSBpZiAoYWNjdFNjaGVtZUFzc3VtZWQoaW5wdXQpKSB7XG4gICAgb3V0cHV0ID0gYGFjY3Q6JHtpbnB1dH1gO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGBodHRwczovLyR7aW5wdXR9YDtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQuc3BsaXQoJyMnKVswXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemU7XG4iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsSUFBSSxHQUFHLE9BQU87QUFFcEIsU0FBU0MsU0FBU0EsQ0FBQ0MsS0FBSyxFQUFFO0VBQ3hCLElBQUlBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLE9BQU8sSUFBSTtFQUV0QyxNQUFNQyxTQUFTLEdBQUdGLEtBQUssQ0FBQ0csT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUM5RCxJQUFJRixTQUFTLENBQUNELFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtJQUMzQixNQUFNSSxLQUFLLEdBQUdILFNBQVMsQ0FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQztJQUNwQyxNQUFNQyxVQUFVLEdBQUdMLFNBQVMsQ0FBQ00sS0FBSyxDQUFDSCxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBQzdDLElBQUksQ0FBQ1AsSUFBSSxDQUFDVyxJQUFJLENBQUNGLFVBQVUsQ0FBQyxFQUFFO01BQzFCLE9BQU8sSUFBSTtJQUNiO0VBQ0Y7RUFFQSxPQUFPLEtBQUs7QUFDZDtBQUVBLFNBQVNHLGlCQUFpQkEsQ0FBQ1YsS0FBSyxFQUFFO0VBQ2hDLElBQUksQ0FBQ0EsS0FBSyxDQUFDQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxLQUFLO0VBQ3RDLE1BQU1VLEtBQUssR0FBR1gsS0FBSyxDQUFDSSxLQUFLLENBQUMsR0FBRyxDQUFDO0VBQzlCLE1BQU1RLElBQUksR0FBR0QsS0FBSyxDQUFDQSxLQUFLLENBQUNFLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFDcEMsT0FBTyxFQUFFRCxJQUFJLENBQUNYLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSVcsSUFBSSxDQUFDWCxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUlXLElBQUksQ0FBQ1gsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFFO0FBRUEsU0FBU2EsU0FBU0EsQ0FBQ2QsS0FBSyxFQUFFO0VBQ3hCLElBQUksT0FBT0EsS0FBSyxLQUFLLFFBQVEsRUFBRTtJQUM3QixNQUFNLElBQUllLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQztFQUMvQztFQUVBLElBQUlDLE1BQU07RUFDVixJQUFJakIsU0FBUyxDQUFDQyxLQUFLLENBQUMsRUFBRTtJQUNwQmdCLE1BQU0sR0FBR2hCLEtBQUs7RUFDaEIsQ0FBQyxNQUFNLElBQUlVLGlCQUFpQixDQUFDVixLQUFLLENBQUMsRUFBRTtJQUNuQ2dCLE1BQU0sR0FBSSxRQUFPaEIsS0FBTSxFQUFDO0VBQzFCLENBQUMsTUFBTTtJQUNMZ0IsTUFBTSxHQUFJLFdBQVVoQixLQUFNLEVBQUM7RUFDN0I7RUFFQSxPQUFPZ0IsTUFBTSxDQUFDWixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdCO0FBRUFhLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHSixTQUFTIiwiaWdub3JlTGlzdCI6WzBdfQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/webfinger_normalize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/helpers/www_authenticate_parser.js":
/*!***************************************************************************!*\
  !*** ./node_modules/openid-client/lib/helpers/www_authenticate_parser.js ***!
  \***************************************************************************/
/***/ ((module) => {

eval("const REGEXP = /(\\w+)=(\"[^\"]*\")/g;\nmodule.exports = wwwAuthenticate => {\n  const params = {};\n  try {\n    while (REGEXP.exec(wwwAuthenticate) !== null) {\n      if (RegExp.$1 && RegExp.$2) {\n        params[RegExp.$1] = RegExp.$2.slice(1, -1);\n      }\n    }\n  } catch (err) {}\n  return params;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaGVscGVycy93d3dfYXV0aGVudGljYXRlX3BhcnNlci5qcyIsIm5hbWVzIjpbIlJFR0VYUCIsIm1vZHVsZSIsImV4cG9ydHMiLCJ3d3dBdXRoZW50aWNhdGUiLCJwYXJhbXMiLCJleGVjIiwiUmVnRXhwIiwiJDEiLCIkMiIsInNsaWNlIiwiZXJyIl0sInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL2hlbHBlcnMvd3d3X2F1dGhlbnRpY2F0ZV9wYXJzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUkVHRVhQID0gLyhcXHcrKT0oXCJbXlwiXSpcIikvZztcblxubW9kdWxlLmV4cG9ydHMgPSAod3d3QXV0aGVudGljYXRlKSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IHt9O1xuICB0cnkge1xuICAgIHdoaWxlIChSRUdFWFAuZXhlYyh3d3dBdXRoZW50aWNhdGUpICE9PSBudWxsKSB7XG4gICAgICBpZiAoUmVnRXhwLiQxICYmIFJlZ0V4cC4kMikge1xuICAgICAgICBwYXJhbXNbUmVnRXhwLiQxXSA9IFJlZ0V4cC4kMi5zbGljZSgxLCAtMSk7XG4gICAgICB9XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHt9XG5cbiAgcmV0dXJuIHBhcmFtcztcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE1BQU0sR0FBRyxrQkFBa0I7QUFFakNDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFJQyxlQUFlLElBQUs7RUFDcEMsTUFBTUMsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUNqQixJQUFJO0lBQ0YsT0FBT0osTUFBTSxDQUFDSyxJQUFJLENBQUNGLGVBQWUsQ0FBQyxLQUFLLElBQUksRUFBRTtNQUM1QyxJQUFJRyxNQUFNLENBQUNDLEVBQUUsSUFBSUQsTUFBTSxDQUFDRSxFQUFFLEVBQUU7UUFDMUJKLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDQyxFQUFFLENBQUMsR0FBR0QsTUFBTSxDQUFDRSxFQUFFLENBQUNDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7TUFDNUM7SUFDRjtFQUNGLENBQUMsQ0FBQyxPQUFPQyxHQUFHLEVBQUUsQ0FBQztFQUVmLE9BQU9OLE1BQU07QUFDZixDQUFDIiwiaWdub3JlTGlzdCI6WzBdfQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/helpers/www_authenticate_parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/openid-client/lib/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Issuer = __webpack_require__(/*! ./issuer */ \"(rsc)/./node_modules/openid-client/lib/issuer.js\");\nconst {\n  OPError,\n  RPError\n} = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst Strategy = __webpack_require__(/*! ./passport_strategy */ \"(rsc)/./node_modules/openid-client/lib/passport_strategy.js\");\nconst TokenSet = __webpack_require__(/*! ./token_set */ \"(rsc)/./node_modules/openid-client/lib/token_set.js\");\nconst {\n  CLOCK_TOLERANCE,\n  HTTP_OPTIONS\n} = __webpack_require__(/*! ./helpers/consts */ \"(rsc)/./node_modules/openid-client/lib/helpers/consts.js\");\nconst generators = __webpack_require__(/*! ./helpers/generators */ \"(rsc)/./node_modules/openid-client/lib/helpers/generators.js\");\nconst {\n  setDefaults\n} = __webpack_require__(/*! ./helpers/request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nmodule.exports = {\n  Issuer,\n  Strategy,\n  TokenSet,\n  errors: {\n    OPError,\n    RPError\n  },\n  custom: {\n    setHttpOptionsDefaults: setDefaults,\n    http_options: HTTP_OPTIONS,\n    clock_tolerance: CLOCK_TOLERANCE\n  },\n  generators\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLGtFQUFVLENBQUM7QUFDbEMsTUFBTTtFQUFFQyxPQUFPO0VBQUVDO0FBQVEsQ0FBQyxHQUFHRixtQkFBTyxDQUFDLGtFQUFVLENBQUM7QUFDaEQsTUFBTUcsUUFBUSxHQUFHSCxtQkFBTyxDQUFDLHdGQUFxQixDQUFDO0FBQy9DLE1BQU1JLFFBQVEsR0FBR0osbUJBQU8sQ0FBQyx3RUFBYSxDQUFDO0FBQ3ZDLE1BQU07RUFBRUssZUFBZTtFQUFFQztBQUFhLENBQUMsR0FBR04sbUJBQU8sQ0FBQyxrRkFBa0IsQ0FBQztBQUNyRSxNQUFNTyxVQUFVLEdBQUdQLG1CQUFPLENBQUMsMEZBQXNCLENBQUM7QUFDbEQsTUFBTTtFQUFFUTtBQUFZLENBQUMsR0FBR1IsbUJBQU8sQ0FBQyxvRkFBbUIsQ0FBQztBQUVwRFMsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFDZlgsTUFBTTtFQUNOSSxRQUFRO0VBQ1JDLFFBQVE7RUFDUk8sTUFBTSxFQUFFO0lBQ05WLE9BQU87SUFDUEM7RUFDRixDQUFDO0VBQ0RVLE1BQU0sRUFBRTtJQUNOQyxzQkFBc0IsRUFBRUwsV0FBVztJQUNuQ00sWUFBWSxFQUFFUixZQUFZO0lBQzFCUyxlQUFlLEVBQUVWO0VBQ25CLENBQUM7RUFDREU7QUFDRixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBJc3N1ZXIgPSByZXF1aXJlKCcuL2lzc3VlcicpO1xuY29uc3QgeyBPUEVycm9yLCBSUEVycm9yIH0gPSByZXF1aXJlKCcuL2Vycm9ycycpO1xuY29uc3QgU3RyYXRlZ3kgPSByZXF1aXJlKCcuL3Bhc3Nwb3J0X3N0cmF0ZWd5Jyk7XG5jb25zdCBUb2tlblNldCA9IHJlcXVpcmUoJy4vdG9rZW5fc2V0Jyk7XG5jb25zdCB7IENMT0NLX1RPTEVSQU5DRSwgSFRUUF9PUFRJT05TIH0gPSByZXF1aXJlKCcuL2hlbHBlcnMvY29uc3RzJyk7XG5jb25zdCBnZW5lcmF0b3JzID0gcmVxdWlyZSgnLi9oZWxwZXJzL2dlbmVyYXRvcnMnKTtcbmNvbnN0IHsgc2V0RGVmYXVsdHMgfSA9IHJlcXVpcmUoJy4vaGVscGVycy9yZXF1ZXN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBJc3N1ZXIsXG4gIFN0cmF0ZWd5LFxuICBUb2tlblNldCxcbiAgZXJyb3JzOiB7XG4gICAgT1BFcnJvcixcbiAgICBSUEVycm9yLFxuICB9LFxuICBjdXN0b206IHtcbiAgICBzZXRIdHRwT3B0aW9uc0RlZmF1bHRzOiBzZXREZWZhdWx0cyxcbiAgICBodHRwX29wdGlvbnM6IEhUVFBfT1BUSU9OUyxcbiAgICBjbG9ja190b2xlcmFuY2U6IENMT0NLX1RPTEVSQU5DRSxcbiAgfSxcbiAgZ2VuZXJhdG9ycyxcbn07XG4iXSwibmFtZXMiOlsiSXNzdWVyIiwicmVxdWlyZSIsIk9QRXJyb3IiLCJSUEVycm9yIiwiU3RyYXRlZ3kiLCJUb2tlblNldCIsIkNMT0NLX1RPTEVSQU5DRSIsIkhUVFBfT1BUSU9OUyIsImdlbmVyYXRvcnMiLCJzZXREZWZhdWx0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJlcnJvcnMiLCJjdXN0b20iLCJzZXRIdHRwT3B0aW9uc0RlZmF1bHRzIiwiaHR0cF9vcHRpb25zIiwiY2xvY2tfdG9sZXJhbmNlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/issuer.js":
/*!**************************************************!*\
  !*** ./node_modules/openid-client/lib/issuer.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst {\n  inspect\n} = __webpack_require__(/*! util */ \"util\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst {\n  RPError\n} = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst getClient = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/openid-client/lib/client.js\");\nconst registry = __webpack_require__(/*! ./issuer_registry */ \"(rsc)/./node_modules/openid-client/lib/issuer_registry.js\");\nconst processResponse = __webpack_require__(/*! ./helpers/process_response */ \"(rsc)/./node_modules/openid-client/lib/helpers/process_response.js\");\nconst webfingerNormalize = __webpack_require__(/*! ./helpers/webfinger_normalize */ \"(rsc)/./node_modules/openid-client/lib/helpers/webfinger_normalize.js\");\nconst request = __webpack_require__(/*! ./helpers/request */ \"(rsc)/./node_modules/openid-client/lib/helpers/request.js\");\nconst clone = __webpack_require__(/*! ./helpers/deep_clone */ \"(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\");\nconst {\n  keystore\n} = __webpack_require__(/*! ./helpers/issuer */ \"(rsc)/./node_modules/openid-client/lib/helpers/issuer.js\");\nconst AAD_MULTITENANT_DISCOVERY = ['https://login.microsoftonline.com/common/.well-known/openid-configuration', 'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration', 'https://login.microsoftonline.com/organizations/v2.0/.well-known/openid-configuration', 'https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration'];\nconst AAD_MULTITENANT = Symbol();\nconst ISSUER_DEFAULTS = {\n  claim_types_supported: ['normal'],\n  claims_parameter_supported: false,\n  grant_types_supported: ['authorization_code', 'implicit'],\n  request_parameter_supported: false,\n  request_uri_parameter_supported: true,\n  require_request_uri_registration: false,\n  response_modes_supported: ['query', 'fragment'],\n  token_endpoint_auth_methods_supported: ['client_secret_basic']\n};\nclass Issuer {\n  #metadata;\n  constructor(meta = {}) {\n    const aadIssValidation = meta[AAD_MULTITENANT];\n    delete meta[AAD_MULTITENANT];\n    ['introspection', 'revocation'].forEach(endpoint => {\n      // if intro/revocation endpoint auth specific meta is missing use the token ones if they\n      // are defined\n      if (meta[`${endpoint}_endpoint`] && meta[`${endpoint}_endpoint_auth_methods_supported`] === undefined && meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] === undefined) {\n        if (meta.token_endpoint_auth_methods_supported) {\n          meta[`${endpoint}_endpoint_auth_methods_supported`] = meta.token_endpoint_auth_methods_supported;\n        }\n        if (meta.token_endpoint_auth_signing_alg_values_supported) {\n          meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] = meta.token_endpoint_auth_signing_alg_values_supported;\n        }\n      }\n    });\n    this.#metadata = new Map();\n    Object.entries(meta).forEach(([key, value]) => {\n      this.#metadata.set(key, value);\n      if (!this[key]) {\n        Object.defineProperty(this, key, {\n          get() {\n            return this.#metadata.get(key);\n          },\n          enumerable: true\n        });\n      }\n    });\n    registry.set(this.issuer, this);\n    const Client = getClient(this, aadIssValidation);\n    Object.defineProperties(this, {\n      Client: {\n        value: Client,\n        enumerable: true\n      },\n      FAPI1Client: {\n        value: class FAPI1Client extends Client {},\n        enumerable: true\n      },\n      FAPI2Client: {\n        value: class FAPI2Client extends Client {},\n        enumerable: true\n      }\n    });\n  }\n  get metadata() {\n    return clone(Object.fromEntries(this.#metadata.entries()));\n  }\n  static async webfinger(input) {\n    const resource = webfingerNormalize(input);\n    const {\n      host\n    } = url.parse(resource);\n    const webfingerUrl = `https://${host}/.well-known/webfinger`;\n    const response = await request.call(this, {\n      method: 'GET',\n      url: webfingerUrl,\n      responseType: 'json',\n      searchParams: {\n        resource,\n        rel: 'http://openid.net/specs/connect/1.0/issuer'\n      },\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n    const body = processResponse(response);\n    const location = Array.isArray(body.links) && body.links.find(link => typeof link === 'object' && link.rel === 'http://openid.net/specs/connect/1.0/issuer' && link.href);\n    if (!location) {\n      throw new RPError({\n        message: 'no issuer found in webfinger response',\n        body\n      });\n    }\n    if (typeof location.href !== 'string' || !location.href.startsWith('https://')) {\n      throw new RPError({\n        printf: ['invalid issuer location %s', location.href],\n        body\n      });\n    }\n    const expectedIssuer = location.href;\n    if (registry.has(expectedIssuer)) {\n      return registry.get(expectedIssuer);\n    }\n    const issuer = await this.discover(expectedIssuer);\n    if (issuer.issuer !== expectedIssuer) {\n      registry.del(issuer.issuer);\n      throw new RPError('discovered issuer mismatch, expected %s, got: %s', expectedIssuer, issuer.issuer);\n    }\n    return issuer;\n  }\n  static async discover(uri) {\n    const wellKnownUri = resolveWellKnownUri(uri);\n    const response = await request.call(this, {\n      method: 'GET',\n      responseType: 'json',\n      url: wellKnownUri,\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n    const body = processResponse(response);\n    return new Issuer(_objectSpread(_objectSpread(_objectSpread({}, ISSUER_DEFAULTS), body), {}, {\n      [AAD_MULTITENANT]: !!AAD_MULTITENANT_DISCOVERY.find(discoveryURL => wellKnownUri.startsWith(discoveryURL))\n    }));\n  }\n  async reloadJwksUri() {\n    await keystore.call(this, true);\n  }\n\n  /* istanbul ignore next */\n  [inspect.custom]() {\n    return `${this.constructor.name} ${inspect(this.metadata, {\n      depth: Infinity,\n      colors: process.stdout.isTTY,\n      compact: false,\n      sorted: true\n    })}`;\n  }\n}\nfunction resolveWellKnownUri(uri) {\n  const parsed = url.parse(uri);\n  if (parsed.pathname.includes('/.well-known/')) {\n    return uri;\n  } else {\n    let pathname;\n    if (parsed.pathname.endsWith('/')) {\n      pathname = `${parsed.pathname}.well-known/openid-configuration`;\n    } else {\n      pathname = `${parsed.pathname}/.well-known/openid-configuration`;\n    }\n    return url.format(_objectSpread(_objectSpread({}, parsed), {}, {\n      pathname\n    }));\n  }\n}\nmodule.exports = Issuer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/issuer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/issuer_registry.js":
/*!***********************************************************!*\
  !*** ./node_modules/openid-client/lib/issuer_registry.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const LRU = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/openid-client/node_modules/lru-cache/index.js\");\nmodule.exports = new LRU({\n  max: 100\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvaXNzdWVyX3JlZ2lzdHJ5LmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLEdBQUcsR0FBR0MsbUJBQU8sQ0FBQyxxRkFBVyxDQUFDO0FBRWhDQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJSCxHQUFHLENBQUM7RUFBRUksR0FBRyxFQUFFO0FBQUksQ0FBQyxDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L2xpYi9pc3N1ZXJfcmVnaXN0cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTFJVID0gcmVxdWlyZSgnbHJ1LWNhY2hlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IExSVSh7IG1heDogMTAwIH0pO1xuIl0sIm5hbWVzIjpbIkxSVSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwibWF4Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/issuer_registry.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/passport_strategy.js":
/*!*************************************************************!*\
  !*** ./node_modules/openid-client/lib/passport_strategy.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nconst url = __webpack_require__(/*! url */ \"url\");\nconst {\n  format\n} = __webpack_require__(/*! util */ \"util\");\nconst cloneDeep = __webpack_require__(/*! ./helpers/deep_clone */ \"(rsc)/./node_modules/openid-client/lib/helpers/deep_clone.js\");\nconst {\n  RPError,\n  OPError\n} = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/openid-client/lib/errors.js\");\nconst {\n  BaseClient\n} = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/openid-client/lib/client.js\");\nconst {\n  random,\n  codeChallenge\n} = __webpack_require__(/*! ./helpers/generators */ \"(rsc)/./node_modules/openid-client/lib/helpers/generators.js\");\nconst pick = __webpack_require__(/*! ./helpers/pick */ \"(rsc)/./node_modules/openid-client/lib/helpers/pick.js\");\nconst {\n  resolveResponseType,\n  resolveRedirectUri\n} = __webpack_require__(/*! ./helpers/client */ \"(rsc)/./node_modules/openid-client/lib/helpers/client.js\");\nfunction verified(err, user, info = {}) {\n  if (err) {\n    this.error(err);\n  } else if (!user) {\n    this.fail(info);\n  } else {\n    this.success(user, info);\n  }\n}\nfunction OpenIDConnectStrategy({\n  client,\n  params = {},\n  passReqToCallback = false,\n  sessionKey,\n  usePKCE = true,\n  extras = {}\n} = {}, verify) {\n  if (!(client instanceof BaseClient)) {\n    throw new TypeError('client must be an instance of openid-client Client');\n  }\n  if (typeof verify !== 'function') {\n    throw new TypeError('verify callback must be a function');\n  }\n  if (!client.issuer || !client.issuer.issuer) {\n    throw new TypeError('client must have an issuer with an identifier');\n  }\n  this._client = client;\n  this._issuer = client.issuer;\n  this._verify = verify;\n  this._passReqToCallback = passReqToCallback;\n  this._usePKCE = usePKCE;\n  this._key = sessionKey || `oidc:${url.parse(this._issuer.issuer).hostname}`;\n  this._params = cloneDeep(params);\n\n  // state and nonce are handled in authenticate()\n  delete this._params.state;\n  delete this._params.nonce;\n  this._extras = cloneDeep(extras);\n  if (!this._params.response_type) this._params.response_type = resolveResponseType.call(client);\n  if (!this._params.redirect_uri) this._params.redirect_uri = resolveRedirectUri.call(client);\n  if (!this._params.scope) this._params.scope = 'openid';\n  if (this._usePKCE === true) {\n    const supportedMethods = Array.isArray(this._issuer.code_challenge_methods_supported) ? this._issuer.code_challenge_methods_supported : false;\n    if (supportedMethods && supportedMethods.includes('S256')) {\n      this._usePKCE = 'S256';\n    } else if (supportedMethods && supportedMethods.includes('plain')) {\n      this._usePKCE = 'plain';\n    } else if (supportedMethods) {\n      throw new TypeError('neither code_challenge_method supported by the client is supported by the issuer');\n    } else {\n      this._usePKCE = 'S256';\n    }\n  } else if (typeof this._usePKCE === 'string' && !['plain', 'S256'].includes(this._usePKCE)) {\n    throw new TypeError(`${this._usePKCE} is not valid/implemented PKCE code_challenge_method`);\n  }\n  this.name = url.parse(client.issuer.issuer).hostname;\n}\nOpenIDConnectStrategy.prototype.authenticate = function authenticate(req, options) {\n  (async () => {\n    const client = this._client;\n    if (!req.session) {\n      throw new TypeError('authentication requires session support');\n    }\n    const reqParams = client.callbackParams(req);\n    const sessionKey = this._key;\n    const {\n      0: parameter,\n      length\n    } = Object.keys(reqParams);\n\n    /**\n     * Start authentication request if this has no authorization response parameters or\n     * this might a login initiated from a third party as per\n     * https://openid.net/specs/openid-connect-core-1_0.html#ThirdPartyInitiatedLogin.\n     */\n    if (length === 0 || length === 1 && parameter === 'iss') {\n      // provide options object with extra authentication parameters\n      const params = _objectSpread(_objectSpread({\n        state: random()\n      }, this._params), options);\n      if (!params.nonce && params.response_type.includes('id_token')) {\n        params.nonce = random();\n      }\n      req.session[sessionKey] = pick(params, 'nonce', 'state', 'max_age', 'response_type');\n      if (this._usePKCE && params.response_type.includes('code')) {\n        const verifier = random();\n        req.session[sessionKey].code_verifier = verifier;\n        switch (this._usePKCE) {\n          case 'S256':\n            params.code_challenge = codeChallenge(verifier);\n            params.code_challenge_method = 'S256';\n            break;\n          case 'plain':\n            params.code_challenge = verifier;\n            break;\n        }\n      }\n      this.redirect(client.authorizationUrl(params));\n      return;\n    }\n    /* end authentication request */\n\n    /* start authentication response */\n\n    const session = req.session[sessionKey];\n    if (Object.keys(session || {}).length === 0) {\n      throw new Error(format('did not find expected authorization request details in session, req.session[\"%s\"] is %j', sessionKey, session));\n    }\n    const {\n      state,\n      nonce,\n      max_age: maxAge,\n      code_verifier: codeVerifier,\n      response_type: responseType\n    } = session;\n    try {\n      delete req.session[sessionKey];\n    } catch (err) {}\n    const opts = _objectSpread({\n      redirect_uri: this._params.redirect_uri\n    }, options);\n    const checks = {\n      state,\n      nonce,\n      max_age: maxAge,\n      code_verifier: codeVerifier,\n      response_type: responseType\n    };\n    const tokenset = await client.callback(opts.redirect_uri, reqParams, checks, this._extras);\n    const passReq = this._passReqToCallback;\n    const loadUserinfo = this._verify.length > (passReq ? 3 : 2) && client.issuer.userinfo_endpoint;\n    const args = [tokenset, verified.bind(this)];\n    if (loadUserinfo) {\n      if (!tokenset.access_token) {\n        throw new RPError({\n          message: 'expected access_token to be returned when asking for userinfo in verify callback',\n          tokenset\n        });\n      }\n      const userinfo = await client.userinfo(tokenset);\n      args.splice(1, 0, userinfo);\n    }\n    if (passReq) {\n      args.unshift(req);\n    }\n    this._verify(...args);\n    /* end authentication response */\n  })().catch(error => {\n    if (error instanceof OPError && error.error !== 'server_error' && !error.error.startsWith('invalid') || error instanceof RPError) {\n      this.fail(error);\n    } else {\n      this.error(error);\n    }\n  });\n};\nmodule.exports = OpenIDConnectStrategy;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/passport_strategy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/lib/token_set.js":
/*!*****************************************************!*\
  !*** ./node_modules/openid-client/lib/token_set.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const _excluded = [\"constructor\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nconst base64url = __webpack_require__(/*! ./helpers/base64url */ \"(rsc)/./node_modules/openid-client/lib/helpers/base64url.js\");\nconst now = __webpack_require__(/*! ./helpers/unix_timestamp */ \"(rsc)/./node_modules/openid-client/lib/helpers/unix_timestamp.js\");\nclass TokenSet {\n  constructor(values) {\n    Object.assign(this, values);\n    const _Object$getOwnPropert = Object.getOwnPropertyDescriptors(this.constructor.prototype),\n      {\n        constructor\n      } = _Object$getOwnPropert,\n      properties = _objectWithoutProperties(_Object$getOwnPropert, _excluded);\n    Object.defineProperties(this, properties);\n  }\n  set expires_in(value) {\n    this.expires_at = now() + Number(value);\n  }\n  get expires_in() {\n    return Math.max.apply(null, [this.expires_at - now(), 0]);\n  }\n  expired() {\n    return this.expires_in === 0;\n  }\n  claims() {\n    if (!this.id_token) {\n      throw new TypeError('id_token not present in TokenSet');\n    }\n    return JSON.parse(base64url.decode(this.id_token.split('.')[1]));\n  }\n}\nmodule.exports = TokenSet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9saWIvdG9rZW5fc2V0LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBLE1BQU1BLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyx3RkFBcUIsQ0FBQztBQUNoRCxNQUFNQyxHQUFHLEdBQUdELG1CQUFPLENBQUMsa0dBQTBCLENBQUM7QUFFL0MsTUFBTUUsUUFBUSxDQUFDO0VBQ2JDLFdBQVdBLENBQUNDLE1BQU0sRUFBRTtJQUNsQkMsTUFBTSxDQUFDQyxNQUFNLENBQUMsSUFBSSxFQUFFRixNQUFNLENBQUM7SUFDM0IsTUFBQUcscUJBQUEsR0FBdUNGLE1BQU0sQ0FBQ0cseUJBQXlCLENBQ3JFLElBQUksQ0FBQ0wsV0FBVyxDQUFDTSxTQUNuQixDQUFDO01BRks7UUFBRU47TUFBMkIsQ0FBQyxHQUFBSSxxQkFBQTtNQUFaRyxVQUFVLEdBQUFDLHdCQUFBLENBQUFKLHFCQUFBLEVBQUFLLFNBQUE7SUFJbENQLE1BQU0sQ0FBQ1EsZ0JBQWdCLENBQUMsSUFBSSxFQUFFSCxVQUFVLENBQUM7RUFDM0M7RUFFQSxJQUFJSSxVQUFVQSxDQUFDQyxLQUFLLEVBQUU7SUFDcEIsSUFBSSxDQUFDQyxVQUFVLEdBQUdmLEdBQUcsQ0FBQyxDQUFDLEdBQUdnQixNQUFNLENBQUNGLEtBQUssQ0FBQztFQUN6QztFQUVBLElBQUlELFVBQVVBLENBQUEsRUFBRztJQUNmLE9BQU9JLElBQUksQ0FBQ0MsR0FBRyxDQUFDQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDSixVQUFVLEdBQUdmLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDM0Q7RUFFQW9CLE9BQU9BLENBQUEsRUFBRztJQUNSLE9BQU8sSUFBSSxDQUFDUCxVQUFVLEtBQUssQ0FBQztFQUM5QjtFQUVBUSxNQUFNQSxDQUFBLEVBQUc7SUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDQyxRQUFRLEVBQUU7TUFDbEIsTUFBTSxJQUFJQyxTQUFTLENBQUMsa0NBQWtDLENBQUM7SUFDekQ7SUFFQSxPQUFPQyxJQUFJLENBQUNDLEtBQUssQ0FBQzNCLFNBQVMsQ0FBQzRCLE1BQU0sQ0FBQyxJQUFJLENBQUNKLFFBQVEsQ0FBQ0ssS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEU7QUFDRjtBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBRzVCLFFBQVEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbGliL3Rva2VuX3NldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBiYXNlNjR1cmwgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmFzZTY0dXJsJyk7XG5jb25zdCBub3cgPSByZXF1aXJlKCcuL2hlbHBlcnMvdW5peF90aW1lc3RhbXAnKTtcblxuY2xhc3MgVG9rZW5TZXQge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZXMpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHZhbHVlcyk7XG4gICAgY29uc3QgeyBjb25zdHJ1Y3RvciwgLi4ucHJvcGVydGllcyB9ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoXG4gICAgICB0aGlzLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxcbiAgICApO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywgcHJvcGVydGllcyk7XG4gIH1cblxuICBzZXQgZXhwaXJlc19pbih2YWx1ZSkge1xuICAgIHRoaXMuZXhwaXJlc19hdCA9IG5vdygpICsgTnVtYmVyKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBleHBpcmVzX2luKCkge1xuICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBbdGhpcy5leHBpcmVzX2F0IC0gbm93KCksIDBdKTtcbiAgfVxuXG4gIGV4cGlyZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhwaXJlc19pbiA9PT0gMDtcbiAgfVxuXG4gIGNsYWltcygpIHtcbiAgICBpZiAoIXRoaXMuaWRfdG9rZW4pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lkX3Rva2VuIG5vdCBwcmVzZW50IGluIFRva2VuU2V0Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoYmFzZTY0dXJsLmRlY29kZSh0aGlzLmlkX3Rva2VuLnNwbGl0KCcuJylbMV0pKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRva2VuU2V0O1xuIl0sIm5hbWVzIjpbImJhc2U2NHVybCIsInJlcXVpcmUiLCJub3ciLCJUb2tlblNldCIsImNvbnN0cnVjdG9yIiwidmFsdWVzIiwiT2JqZWN0IiwiYXNzaWduIiwiX09iamVjdCRnZXRPd25Qcm9wZXJ0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInByb3RvdHlwZSIsInByb3BlcnRpZXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJfZXhjbHVkZWQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZXhwaXJlc19pbiIsInZhbHVlIiwiZXhwaXJlc19hdCIsIk51bWJlciIsIk1hdGgiLCJtYXgiLCJhcHBseSIsImV4cGlyZWQiLCJjbGFpbXMiLCJpZF90b2tlbiIsIlR5cGVFcnJvciIsIkpTT04iLCJwYXJzZSIsImRlY29kZSIsInNwbGl0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/lib/token_set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.cryptoRuntime = exports.base64url = exports.generateSecret = exports.generateKeyPair = exports.errors = exports.decodeJwt = exports.decodeProtectedHeader = exports.importJWK = exports.importX509 = exports.importPKCS8 = exports.importSPKI = exports.exportJWK = exports.exportSPKI = exports.exportPKCS8 = exports.UnsecuredJWT = exports.createRemoteJWKSet = exports.createLocalJWKSet = exports.EmbeddedJWK = exports.calculateJwkThumbprintUri = exports.calculateJwkThumbprint = exports.EncryptJWT = exports.SignJWT = exports.GeneralSign = exports.FlattenedSign = exports.CompactSign = exports.FlattenedEncrypt = exports.CompactEncrypt = exports.jwtDecrypt = exports.jwtVerify = exports.generalVerify = exports.flattenedVerify = exports.compactVerify = exports.GeneralEncrypt = exports.generalDecrypt = exports.flattenedDecrypt = exports.compactDecrypt = void 0;\nvar decrypt_js_1 = __webpack_require__(/*! ./jwe/compact/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js\");\nObject.defineProperty(exports, \"compactDecrypt\", ({\n  enumerable: true,\n  get: function () {\n    return decrypt_js_1.compactDecrypt;\n  }\n}));\nvar decrypt_js_2 = __webpack_require__(/*! ./jwe/flattened/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js\");\nObject.defineProperty(exports, \"flattenedDecrypt\", ({\n  enumerable: true,\n  get: function () {\n    return decrypt_js_2.flattenedDecrypt;\n  }\n}));\nvar decrypt_js_3 = __webpack_require__(/*! ./jwe/general/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/decrypt.js\");\nObject.defineProperty(exports, \"generalDecrypt\", ({\n  enumerable: true,\n  get: function () {\n    return decrypt_js_3.generalDecrypt;\n  }\n}));\nvar encrypt_js_1 = __webpack_require__(/*! ./jwe/general/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/encrypt.js\");\nObject.defineProperty(exports, \"GeneralEncrypt\", ({\n  enumerable: true,\n  get: function () {\n    return encrypt_js_1.GeneralEncrypt;\n  }\n}));\nvar verify_js_1 = __webpack_require__(/*! ./jws/compact/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js\");\nObject.defineProperty(exports, \"compactVerify\", ({\n  enumerable: true,\n  get: function () {\n    return verify_js_1.compactVerify;\n  }\n}));\nvar verify_js_2 = __webpack_require__(/*! ./jws/flattened/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js\");\nObject.defineProperty(exports, \"flattenedVerify\", ({\n  enumerable: true,\n  get: function () {\n    return verify_js_2.flattenedVerify;\n  }\n}));\nvar verify_js_3 = __webpack_require__(/*! ./jws/general/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/verify.js\");\nObject.defineProperty(exports, \"generalVerify\", ({\n  enumerable: true,\n  get: function () {\n    return verify_js_3.generalVerify;\n  }\n}));\nvar verify_js_4 = __webpack_require__(/*! ./jwt/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/verify.js\");\nObject.defineProperty(exports, \"jwtVerify\", ({\n  enumerable: true,\n  get: function () {\n    return verify_js_4.jwtVerify;\n  }\n}));\nvar decrypt_js_4 = __webpack_require__(/*! ./jwt/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/decrypt.js\");\nObject.defineProperty(exports, \"jwtDecrypt\", ({\n  enumerable: true,\n  get: function () {\n    return decrypt_js_4.jwtDecrypt;\n  }\n}));\nvar encrypt_js_2 = __webpack_require__(/*! ./jwe/compact/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js\");\nObject.defineProperty(exports, \"CompactEncrypt\", ({\n  enumerable: true,\n  get: function () {\n    return encrypt_js_2.CompactEncrypt;\n  }\n}));\nvar encrypt_js_3 = __webpack_require__(/*! ./jwe/flattened/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js\");\nObject.defineProperty(exports, \"FlattenedEncrypt\", ({\n  enumerable: true,\n  get: function () {\n    return encrypt_js_3.FlattenedEncrypt;\n  }\n}));\nvar sign_js_1 = __webpack_require__(/*! ./jws/compact/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js\");\nObject.defineProperty(exports, \"CompactSign\", ({\n  enumerable: true,\n  get: function () {\n    return sign_js_1.CompactSign;\n  }\n}));\nvar sign_js_2 = __webpack_require__(/*! ./jws/flattened/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js\");\nObject.defineProperty(exports, \"FlattenedSign\", ({\n  enumerable: true,\n  get: function () {\n    return sign_js_2.FlattenedSign;\n  }\n}));\nvar sign_js_3 = __webpack_require__(/*! ./jws/general/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/sign.js\");\nObject.defineProperty(exports, \"GeneralSign\", ({\n  enumerable: true,\n  get: function () {\n    return sign_js_3.GeneralSign;\n  }\n}));\nvar sign_js_4 = __webpack_require__(/*! ./jwt/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/sign.js\");\nObject.defineProperty(exports, \"SignJWT\", ({\n  enumerable: true,\n  get: function () {\n    return sign_js_4.SignJWT;\n  }\n}));\nvar encrypt_js_4 = __webpack_require__(/*! ./jwt/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/encrypt.js\");\nObject.defineProperty(exports, \"EncryptJWT\", ({\n  enumerable: true,\n  get: function () {\n    return encrypt_js_4.EncryptJWT;\n  }\n}));\nvar thumbprint_js_1 = __webpack_require__(/*! ./jwk/thumbprint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/thumbprint.js\");\nObject.defineProperty(exports, \"calculateJwkThumbprint\", ({\n  enumerable: true,\n  get: function () {\n    return thumbprint_js_1.calculateJwkThumbprint;\n  }\n}));\nObject.defineProperty(exports, \"calculateJwkThumbprintUri\", ({\n  enumerable: true,\n  get: function () {\n    return thumbprint_js_1.calculateJwkThumbprintUri;\n  }\n}));\nvar embedded_js_1 = __webpack_require__(/*! ./jwk/embedded.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/embedded.js\");\nObject.defineProperty(exports, \"EmbeddedJWK\", ({\n  enumerable: true,\n  get: function () {\n    return embedded_js_1.EmbeddedJWK;\n  }\n}));\nvar local_js_1 = __webpack_require__(/*! ./jwks/local.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js\");\nObject.defineProperty(exports, \"createLocalJWKSet\", ({\n  enumerable: true,\n  get: function () {\n    return local_js_1.createLocalJWKSet;\n  }\n}));\nvar remote_js_1 = __webpack_require__(/*! ./jwks/remote.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/remote.js\");\nObject.defineProperty(exports, \"createRemoteJWKSet\", ({\n  enumerable: true,\n  get: function () {\n    return remote_js_1.createRemoteJWKSet;\n  }\n}));\nvar unsecured_js_1 = __webpack_require__(/*! ./jwt/unsecured.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/unsecured.js\");\nObject.defineProperty(exports, \"UnsecuredJWT\", ({\n  enumerable: true,\n  get: function () {\n    return unsecured_js_1.UnsecuredJWT;\n  }\n}));\nvar export_js_1 = __webpack_require__(/*! ./key/export.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js\");\nObject.defineProperty(exports, \"exportPKCS8\", ({\n  enumerable: true,\n  get: function () {\n    return export_js_1.exportPKCS8;\n  }\n}));\nObject.defineProperty(exports, \"exportSPKI\", ({\n  enumerable: true,\n  get: function () {\n    return export_js_1.exportSPKI;\n  }\n}));\nObject.defineProperty(exports, \"exportJWK\", ({\n  enumerable: true,\n  get: function () {\n    return export_js_1.exportJWK;\n  }\n}));\nvar import_js_1 = __webpack_require__(/*! ./key/import.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\");\nObject.defineProperty(exports, \"importSPKI\", ({\n  enumerable: true,\n  get: function () {\n    return import_js_1.importSPKI;\n  }\n}));\nObject.defineProperty(exports, \"importPKCS8\", ({\n  enumerable: true,\n  get: function () {\n    return import_js_1.importPKCS8;\n  }\n}));\nObject.defineProperty(exports, \"importX509\", ({\n  enumerable: true,\n  get: function () {\n    return import_js_1.importX509;\n  }\n}));\nObject.defineProperty(exports, \"importJWK\", ({\n  enumerable: true,\n  get: function () {\n    return import_js_1.importJWK;\n  }\n}));\nvar decode_protected_header_js_1 = __webpack_require__(/*! ./util/decode_protected_header.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_protected_header.js\");\nObject.defineProperty(exports, \"decodeProtectedHeader\", ({\n  enumerable: true,\n  get: function () {\n    return decode_protected_header_js_1.decodeProtectedHeader;\n  }\n}));\nvar decode_jwt_js_1 = __webpack_require__(/*! ./util/decode_jwt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_jwt.js\");\nObject.defineProperty(exports, \"decodeJwt\", ({\n  enumerable: true,\n  get: function () {\n    return decode_jwt_js_1.decodeJwt;\n  }\n}));\nexports.errors = __webpack_require__(/*! ./util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nvar generate_key_pair_js_1 = __webpack_require__(/*! ./key/generate_key_pair.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_key_pair.js\");\nObject.defineProperty(exports, \"generateKeyPair\", ({\n  enumerable: true,\n  get: function () {\n    return generate_key_pair_js_1.generateKeyPair;\n  }\n}));\nvar generate_secret_js_1 = __webpack_require__(/*! ./key/generate_secret.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_secret.js\");\nObject.defineProperty(exports, \"generateSecret\", ({\n  enumerable: true,\n  get: function () {\n    return generate_secret_js_1.generateSecret;\n  }\n}));\nexports.base64url = __webpack_require__(/*! ./util/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js\");\nvar runtime_js_1 = __webpack_require__(/*! ./util/runtime.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/runtime.js\");\nObject.defineProperty(exports, \"cryptoRuntime\", ({\n  enumerable: true,\n  get: function () {\n    return runtime_js_1.default;\n  }\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.compactDecrypt = void 0;\nconst decrypt_js_1 = __webpack_require__(/*! ../flattened/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nasync function compactDecrypt(jwe, key, options) {\n  if (jwe instanceof Uint8Array) {\n    jwe = buffer_utils_js_1.decoder.decode(jwe);\n  }\n  if (typeof jwe !== 'string') {\n    throw new errors_js_1.JWEInvalid('Compact JWE must be a string or Uint8Array');\n  }\n  const {\n    0: protectedHeader,\n    1: encryptedKey,\n    2: iv,\n    3: ciphertext,\n    4: tag,\n    length\n  } = jwe.split('.');\n  if (length !== 5) {\n    throw new errors_js_1.JWEInvalid('Invalid Compact JWE');\n  }\n  const decrypted = await (0, decrypt_js_1.flattenedDecrypt)({\n    ciphertext,\n    iv: iv || undefined,\n    protected: protectedHeader || undefined,\n    tag: tag || undefined,\n    encrypted_key: encryptedKey || undefined\n  }, key, options);\n  const result = {\n    plaintext: decrypted.plaintext,\n    protectedHeader: decrypted.protectedHeader\n  };\n  if (typeof key === 'function') {\n    return _objectSpread(_objectSpread({}, result), {}, {\n      key: decrypted.key\n    });\n  }\n  return result;\n}\nexports.compactDecrypt = compactDecrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9jb21wYWN0L2RlY3J5cHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQUEsU0FBQUEsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxJQUFBZSxlQUFBLENBQUFoQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWMseUJBQUEsR0FBQWQsTUFBQSxDQUFBZSxnQkFBQSxDQUFBbEIsQ0FBQSxFQUFBRyxNQUFBLENBQUFjLHlCQUFBLENBQUFmLENBQUEsS0FBQUgsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsR0FBQWEsT0FBQSxXQUFBZCxDQUFBLElBQUFFLE1BQUEsQ0FBQWdCLGNBQUEsQ0FBQW5CLENBQUEsRUFBQUMsQ0FBQSxF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YUFBQSxDQUFBQSxhQUFBLEtBQVlpRCxNQUFNO01BQUV4QyxHQUFHLEVBQUVvQyxTQUFTLENBQUNwQztJQUFHO0VBQzFDO0VBQ0EsT0FBT3dDLE1BQU07QUFDakI7QUFDQXRCLHNCQUFzQixHQUFHQyxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandlL2NvbXBhY3QvZGVjcnlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tcGFjdERlY3J5cHQgPSB2b2lkIDA7XG5jb25zdCBkZWNyeXB0X2pzXzEgPSByZXF1aXJlKFwiLi4vZmxhdHRlbmVkL2RlY3J5cHQuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5hc3luYyBmdW5jdGlvbiBjb21wYWN0RGVjcnlwdChqd2UsIGtleSwgb3B0aW9ucykge1xuICAgIGlmIChqd2UgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGp3ZSA9IGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKGp3ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgandlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnQ29tcGFjdCBKV0UgbXVzdCBiZSBhIHN0cmluZyBvciBVaW50OEFycmF5Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgMDogcHJvdGVjdGVkSGVhZGVyLCAxOiBlbmNyeXB0ZWRLZXksIDI6IGl2LCAzOiBjaXBoZXJ0ZXh0LCA0OiB0YWcsIGxlbmd0aCwgfSA9IGp3ZS5zcGxpdCgnLicpO1xuICAgIGlmIChsZW5ndGggIT09IDUpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0ludmFsaWQgQ29tcGFjdCBKV0UnKTtcbiAgICB9XG4gICAgY29uc3QgZGVjcnlwdGVkID0gYXdhaXQgKDAsIGRlY3J5cHRfanNfMS5mbGF0dGVuZWREZWNyeXB0KSh7XG4gICAgICAgIGNpcGhlcnRleHQsXG4gICAgICAgIGl2OiAoaXYgfHwgdW5kZWZpbmVkKSxcbiAgICAgICAgcHJvdGVjdGVkOiBwcm90ZWN0ZWRIZWFkZXIgfHwgdW5kZWZpbmVkLFxuICAgICAgICB0YWc6ICh0YWcgfHwgdW5kZWZpbmVkKSxcbiAgICAgICAgZW5jcnlwdGVkX2tleTogZW5jcnlwdGVkS2V5IHx8IHVuZGVmaW5lZCxcbiAgICB9LCBrZXksIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGxhaW50ZXh0OiBkZWNyeXB0ZWQucGxhaW50ZXh0LCBwcm90ZWN0ZWRIZWFkZXI6IGRlY3J5cHRlZC5wcm90ZWN0ZWRIZWFkZXIgfTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleTogZGVjcnlwdGVkLmtleSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5jb21wYWN0RGVjcnlwdCA9IGNvbXBhY3REZWNyeXB0O1xuIl0sIm5hbWVzIjpbIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiZXhwb3J0cyIsImNvbXBhY3REZWNyeXB0IiwiZGVjcnlwdF9qc18xIiwicmVxdWlyZSIsImVycm9yc19qc18xIiwiYnVmZmVyX3V0aWxzX2pzXzEiLCJqd2UiLCJvcHRpb25zIiwiVWludDhBcnJheSIsImRlY29kZXIiLCJkZWNvZGUiLCJKV0VJbnZhbGlkIiwicHJvdGVjdGVkSGVhZGVyIiwiZW5jcnlwdGVkS2V5IiwiaXYiLCJjaXBoZXJ0ZXh0IiwidGFnIiwic3BsaXQiLCJkZWNyeXB0ZWQiLCJmbGF0dGVuZWREZWNyeXB0IiwicHJvdGVjdGVkIiwiZW5jcnlwdGVkX2tleSIsInJlc3VsdCIsInBsYWludGV4dCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CompactEncrypt = void 0;\nconst encrypt_js_1 = __webpack_require__(/*! ../flattened/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js\");\nclass CompactEncrypt {\n  constructor(plaintext) {\n    this._flattened = new encrypt_js_1.FlattenedEncrypt(plaintext);\n  }\n  setContentEncryptionKey(cek) {\n    this._flattened.setContentEncryptionKey(cek);\n    return this;\n  }\n  setInitializationVector(iv) {\n    this._flattened.setInitializationVector(iv);\n    return this;\n  }\n  setProtectedHeader(protectedHeader) {\n    this._flattened.setProtectedHeader(protectedHeader);\n    return this;\n  }\n  setKeyManagementParameters(parameters) {\n    this._flattened.setKeyManagementParameters(parameters);\n    return this;\n  }\n  async encrypt(key, options) {\n    const jwe = await this._flattened.encrypt(key, options);\n    return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join('.');\n  }\n}\nexports.CompactEncrypt = CompactEncrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9jb21wYWN0L2VuY3J5cHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUssQ0FBQztBQUMvQixNQUFNRyxZQUFZLEdBQUdDLG1CQUFPLENBQUMsNEhBQXlCLENBQUM7QUFDdkQsTUFBTUYsY0FBYyxDQUFDO0VBQ2pCRyxXQUFXQSxDQUFDQyxTQUFTLEVBQUU7SUFDbkIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsSUFBSUosWUFBWSxDQUFDSyxnQkFBZ0IsQ0FBQ0YsU0FBUyxDQUFDO0VBQ2xFO0VBQ0FHLHVCQUF1QkEsQ0FBQ0MsR0FBRyxFQUFFO0lBQ3pCLElBQUksQ0FBQ0gsVUFBVSxDQUFDRSx1QkFBdUIsQ0FBQ0MsR0FBRyxDQUFDO0lBQzVDLE9BQU8sSUFBSTtFQUNmO0VBQ0FDLHVCQUF1QkEsQ0FBQ0MsRUFBRSxFQUFFO0lBQ3hCLElBQUksQ0FBQ0wsVUFBVSxDQUFDSSx1QkFBdUIsQ0FBQ0MsRUFBRSxDQUFDO0lBQzNDLE9BQU8sSUFBSTtFQUNmO0VBQ0FDLGtCQUFrQkEsQ0FBQ0MsZUFBZSxFQUFFO0lBQ2hDLElBQUksQ0FBQ1AsVUFBVSxDQUFDTSxrQkFBa0IsQ0FBQ0MsZUFBZSxDQUFDO0lBQ25ELE9BQU8sSUFBSTtFQUNmO0VBQ0FDLDBCQUEwQkEsQ0FBQ0MsVUFBVSxFQUFFO0lBQ25DLElBQUksQ0FBQ1QsVUFBVSxDQUFDUSwwQkFBMEIsQ0FBQ0MsVUFBVSxDQUFDO0lBQ3RELE9BQU8sSUFBSTtFQUNmO0VBQ0EsTUFBTUMsT0FBT0EsQ0FBQ0MsR0FBRyxFQUFFQyxPQUFPLEVBQUU7SUFDeEIsTUFBTUMsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDYixVQUFVLENBQUNVLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFQyxPQUFPLENBQUM7SUFDdkQsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFNBQVMsRUFBRUQsR0FBRyxDQUFDRSxhQUFhLEVBQUVGLEdBQUcsQ0FBQ1IsRUFBRSxFQUFFUSxHQUFHLENBQUNHLFVBQVUsRUFBRUgsR0FBRyxDQUFDSSxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBQztFQUN4RjtBQUNKO0FBQ0F6QixzQkFBc0IsR0FBR0UsY0FBYyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9jb21wYWN0L2VuY3J5cHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBhY3RFbmNyeXB0ID0gdm9pZCAwO1xuY29uc3QgZW5jcnlwdF9qc18xID0gcmVxdWlyZShcIi4uL2ZsYXR0ZW5lZC9lbmNyeXB0LmpzXCIpO1xuY2xhc3MgQ29tcGFjdEVuY3J5cHQge1xuICAgIGNvbnN0cnVjdG9yKHBsYWludGV4dCkge1xuICAgICAgICB0aGlzLl9mbGF0dGVuZWQgPSBuZXcgZW5jcnlwdF9qc18xLkZsYXR0ZW5lZEVuY3J5cHQocGxhaW50ZXh0KTtcbiAgICB9XG4gICAgc2V0Q29udGVudEVuY3J5cHRpb25LZXkoY2VrKSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZC5zZXRDb250ZW50RW5jcnlwdGlvbktleShjZWspO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0SW5pdGlhbGl6YXRpb25WZWN0b3IoaXYpIHtcbiAgICAgICAgdGhpcy5fZmxhdHRlbmVkLnNldEluaXRpYWxpemF0aW9uVmVjdG9yKGl2KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgdGhpcy5fZmxhdHRlbmVkLnNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMocGFyYW1ldGVycykge1xuICAgICAgICB0aGlzLl9mbGF0dGVuZWQuc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMocGFyYW1ldGVycyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhc3luYyBlbmNyeXB0KGtleSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBqd2UgPSBhd2FpdCB0aGlzLl9mbGF0dGVuZWQuZW5jcnlwdChrZXksIG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gW2p3ZS5wcm90ZWN0ZWQsIGp3ZS5lbmNyeXB0ZWRfa2V5LCBqd2UuaXYsIGp3ZS5jaXBoZXJ0ZXh0LCBqd2UudGFnXS5qb2luKCcuJyk7XG4gICAgfVxufVxuZXhwb3J0cy5Db21wYWN0RW5jcnlwdCA9IENvbXBhY3RFbmNyeXB0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29tcGFjdEVuY3J5cHQiLCJlbmNyeXB0X2pzXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJwbGFpbnRleHQiLCJfZmxhdHRlbmVkIiwiRmxhdHRlbmVkRW5jcnlwdCIsInNldENvbnRlbnRFbmNyeXB0aW9uS2V5IiwiY2VrIiwic2V0SW5pdGlhbGl6YXRpb25WZWN0b3IiLCJpdiIsInNldFByb3RlY3RlZEhlYWRlciIsInByb3RlY3RlZEhlYWRlciIsInNldEtleU1hbmFnZW1lbnRQYXJhbWV0ZXJzIiwicGFyYW1ldGVycyIsImVuY3J5cHQiLCJrZXkiLCJvcHRpb25zIiwiandlIiwicHJvdGVjdGVkIiwiZW5jcnlwdGVkX2tleSIsImNpcGhlcnRleHQiLCJ0YWciLCJqb2luIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.flattenedDecrypt = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst decrypt_js_1 = __webpack_require__(/*! ../../runtime/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js\");\nconst zlib_js_1 = __webpack_require__(/*! ../../runtime/zlib.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst decrypt_key_management_js_1 = __webpack_require__(/*! ../../lib/decrypt_key_management.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/decrypt_key_management.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst cek_js_1 = __webpack_require__(/*! ../../lib/cek.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nconst validate_algorithms_js_1 = __webpack_require__(/*! ../../lib/validate_algorithms.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js\");\nasync function flattenedDecrypt(jwe, key, options) {\n  var _a;\n  if (!(0, is_object_js_1.default)(jwe)) {\n    throw new errors_js_1.JWEInvalid('Flattened JWE must be an object');\n  }\n  if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) {\n    throw new errors_js_1.JWEInvalid('JOSE Header missing');\n  }\n  if (typeof jwe.iv !== 'string') {\n    throw new errors_js_1.JWEInvalid('JWE Initialization Vector missing or incorrect type');\n  }\n  if (typeof jwe.ciphertext !== 'string') {\n    throw new errors_js_1.JWEInvalid('JWE Ciphertext missing or incorrect type');\n  }\n  if (typeof jwe.tag !== 'string') {\n    throw new errors_js_1.JWEInvalid('JWE Authentication Tag missing or incorrect type');\n  }\n  if (jwe.protected !== undefined && typeof jwe.protected !== 'string') {\n    throw new errors_js_1.JWEInvalid('JWE Protected Header incorrect type');\n  }\n  if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== 'string') {\n    throw new errors_js_1.JWEInvalid('JWE Encrypted Key incorrect type');\n  }\n  if (jwe.aad !== undefined && typeof jwe.aad !== 'string') {\n    throw new errors_js_1.JWEInvalid('JWE AAD incorrect type');\n  }\n  if (jwe.header !== undefined && !(0, is_object_js_1.default)(jwe.header)) {\n    throw new errors_js_1.JWEInvalid('JWE Shared Unprotected Header incorrect type');\n  }\n  if (jwe.unprotected !== undefined && !(0, is_object_js_1.default)(jwe.unprotected)) {\n    throw new errors_js_1.JWEInvalid('JWE Per-Recipient Unprotected Header incorrect type');\n  }\n  let parsedProt;\n  if (jwe.protected) {\n    try {\n      const protectedHeader = (0, base64url_js_1.decode)(jwe.protected);\n      parsedProt = JSON.parse(buffer_utils_js_1.decoder.decode(protectedHeader));\n    } catch {\n      throw new errors_js_1.JWEInvalid('JWE Protected Header is invalid');\n    }\n  }\n  if (!(0, is_disjoint_js_1.default)(parsedProt, jwe.header, jwe.unprotected)) {\n    throw new errors_js_1.JWEInvalid('JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint');\n  }\n  const joseHeader = _objectSpread(_objectSpread(_objectSpread({}, parsedProt), jwe.header), jwe.unprotected);\n  (0, validate_crit_js_1.default)(errors_js_1.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);\n  if (joseHeader.zip !== undefined) {\n    if (!parsedProt || !parsedProt.zip) {\n      throw new errors_js_1.JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n    }\n    if (joseHeader.zip !== 'DEF') {\n      throw new errors_js_1.JOSENotSupported('Unsupported JWE \"zip\" (Compression Algorithm) Header Parameter value');\n    }\n  }\n  const {\n    alg,\n    enc\n  } = joseHeader;\n  if (typeof alg !== 'string' || !alg) {\n    throw new errors_js_1.JWEInvalid('missing JWE Algorithm (alg) in JWE Header');\n  }\n  if (typeof enc !== 'string' || !enc) {\n    throw new errors_js_1.JWEInvalid('missing JWE Encryption Algorithm (enc) in JWE Header');\n  }\n  const keyManagementAlgorithms = options && (0, validate_algorithms_js_1.default)('keyManagementAlgorithms', options.keyManagementAlgorithms);\n  const contentEncryptionAlgorithms = options && (0, validate_algorithms_js_1.default)('contentEncryptionAlgorithms', options.contentEncryptionAlgorithms);\n  if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg)) {\n    throw new errors_js_1.JOSEAlgNotAllowed('\"alg\" (Algorithm) Header Parameter not allowed');\n  }\n  if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {\n    throw new errors_js_1.JOSEAlgNotAllowed('\"enc\" (Encryption Algorithm) Header Parameter not allowed');\n  }\n  let encryptedKey;\n  if (jwe.encrypted_key !== undefined) {\n    try {\n      encryptedKey = (0, base64url_js_1.decode)(jwe.encrypted_key);\n    } catch {\n      throw new errors_js_1.JWEInvalid('Failed to base64url decode the encrypted_key');\n    }\n  }\n  let resolvedKey = false;\n  if (typeof key === 'function') {\n    key = await key(parsedProt, jwe);\n    resolvedKey = true;\n  }\n  let cek;\n  try {\n    cek = await (0, decrypt_key_management_js_1.default)(alg, key, encryptedKey, joseHeader, options);\n  } catch (err) {\n    if (err instanceof TypeError || err instanceof errors_js_1.JWEInvalid || err instanceof errors_js_1.JOSENotSupported) {\n      throw err;\n    }\n    cek = (0, cek_js_1.default)(enc);\n  }\n  let iv;\n  let tag;\n  try {\n    iv = (0, base64url_js_1.decode)(jwe.iv);\n  } catch {\n    throw new errors_js_1.JWEInvalid('Failed to base64url decode the iv');\n  }\n  try {\n    tag = (0, base64url_js_1.decode)(jwe.tag);\n  } catch {\n    throw new errors_js_1.JWEInvalid('Failed to base64url decode the tag');\n  }\n  const protectedHeader = buffer_utils_js_1.encoder.encode((_a = jwe.protected) !== null && _a !== void 0 ? _a : '');\n  let additionalData;\n  if (jwe.aad !== undefined) {\n    additionalData = (0, buffer_utils_js_1.concat)(protectedHeader, buffer_utils_js_1.encoder.encode('.'), buffer_utils_js_1.encoder.encode(jwe.aad));\n  } else {\n    additionalData = protectedHeader;\n  }\n  let ciphertext;\n  try {\n    ciphertext = (0, base64url_js_1.decode)(jwe.ciphertext);\n  } catch {\n    throw new errors_js_1.JWEInvalid('Failed to base64url decode the ciphertext');\n  }\n  let plaintext = await (0, decrypt_js_1.default)(enc, cek, ciphertext, iv, tag, additionalData);\n  if (joseHeader.zip === 'DEF') {\n    plaintext = await ((options === null || options === void 0 ? void 0 : options.inflateRaw) || zlib_js_1.inflate)(plaintext);\n  }\n  const result = {\n    plaintext\n  };\n  if (jwe.protected !== undefined) {\n    result.protectedHeader = parsedProt;\n  }\n  if (jwe.aad !== undefined) {\n    try {\n      result.additionalAuthenticatedData = (0, base64url_js_1.decode)(jwe.aad);\n    } catch {\n      throw new errors_js_1.JWEInvalid('Failed to base64url decode the aad');\n    }\n  }\n  if (jwe.unprotected !== undefined) {\n    result.sharedUnprotectedHeader = jwe.unprotected;\n  }\n  if (jwe.header !== undefined) {\n    result.unprotectedHeader = jwe.header;\n  }\n  if (resolvedKey) {\n    return _objectSpread(_objectSpread({}, result), {}, {\n      key\n    });\n  }\n  return result;\n}\nexports.flattenedDecrypt = flattenedDecrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FlattenedEncrypt = exports.unprotected = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst encrypt_js_1 = __webpack_require__(/*! ../../runtime/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js\");\nconst zlib_js_1 = __webpack_require__(/*! ../../runtime/zlib.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js\");\nconst iv_js_1 = __webpack_require__(/*! ../../lib/iv.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js\");\nconst encrypt_key_management_js_1 = __webpack_require__(/*! ../../lib/encrypt_key_management.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nexports.unprotected = Symbol();\nclass FlattenedEncrypt {\n  constructor(plaintext) {\n    if (!(plaintext instanceof Uint8Array)) {\n      throw new TypeError('plaintext must be an instance of Uint8Array');\n    }\n    this._plaintext = plaintext;\n  }\n  setKeyManagementParameters(parameters) {\n    if (this._keyManagementParameters) {\n      throw new TypeError('setKeyManagementParameters can only be called once');\n    }\n    this._keyManagementParameters = parameters;\n    return this;\n  }\n  setProtectedHeader(protectedHeader) {\n    if (this._protectedHeader) {\n      throw new TypeError('setProtectedHeader can only be called once');\n    }\n    this._protectedHeader = protectedHeader;\n    return this;\n  }\n  setSharedUnprotectedHeader(sharedUnprotectedHeader) {\n    if (this._sharedUnprotectedHeader) {\n      throw new TypeError('setSharedUnprotectedHeader can only be called once');\n    }\n    this._sharedUnprotectedHeader = sharedUnprotectedHeader;\n    return this;\n  }\n  setUnprotectedHeader(unprotectedHeader) {\n    if (this._unprotectedHeader) {\n      throw new TypeError('setUnprotectedHeader can only be called once');\n    }\n    this._unprotectedHeader = unprotectedHeader;\n    return this;\n  }\n  setAdditionalAuthenticatedData(aad) {\n    this._aad = aad;\n    return this;\n  }\n  setContentEncryptionKey(cek) {\n    if (this._cek) {\n      throw new TypeError('setContentEncryptionKey can only be called once');\n    }\n    this._cek = cek;\n    return this;\n  }\n  setInitializationVector(iv) {\n    if (this._iv) {\n      throw new TypeError('setInitializationVector can only be called once');\n    }\n    this._iv = iv;\n    return this;\n  }\n  async encrypt(key, options) {\n    if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {\n      throw new errors_js_1.JWEInvalid('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');\n    }\n    if (!(0, is_disjoint_js_1.default)(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {\n      throw new errors_js_1.JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');\n    }\n    const joseHeader = _objectSpread(_objectSpread(_objectSpread({}, this._protectedHeader), this._unprotectedHeader), this._sharedUnprotectedHeader);\n    (0, validate_crit_js_1.default)(errors_js_1.JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);\n    if (joseHeader.zip !== undefined) {\n      if (!this._protectedHeader || !this._protectedHeader.zip) {\n        throw new errors_js_1.JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n      }\n      if (joseHeader.zip !== 'DEF') {\n        throw new errors_js_1.JOSENotSupported('Unsupported JWE \"zip\" (Compression Algorithm) Header Parameter value');\n      }\n    }\n    const {\n      alg,\n      enc\n    } = joseHeader;\n    if (typeof alg !== 'string' || !alg) {\n      throw new errors_js_1.JWEInvalid('JWE \"alg\" (Algorithm) Header Parameter missing or invalid');\n    }\n    if (typeof enc !== 'string' || !enc) {\n      throw new errors_js_1.JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter missing or invalid');\n    }\n    let encryptedKey;\n    if (alg === 'dir') {\n      if (this._cek) {\n        throw new TypeError('setContentEncryptionKey cannot be called when using Direct Encryption');\n      }\n    } else if (alg === 'ECDH-ES') {\n      if (this._cek) {\n        throw new TypeError('setContentEncryptionKey cannot be called when using Direct Key Agreement');\n      }\n    }\n    let cek;\n    {\n      let parameters;\n      ({\n        cek,\n        encryptedKey,\n        parameters\n      } = await (0, encrypt_key_management_js_1.default)(alg, enc, key, this._cek, this._keyManagementParameters));\n      if (parameters) {\n        if (options && exports.unprotected in options) {\n          if (!this._unprotectedHeader) {\n            this.setUnprotectedHeader(parameters);\n          } else {\n            this._unprotectedHeader = _objectSpread(_objectSpread({}, this._unprotectedHeader), parameters);\n          }\n        } else {\n          if (!this._protectedHeader) {\n            this.setProtectedHeader(parameters);\n          } else {\n            this._protectedHeader = _objectSpread(_objectSpread({}, this._protectedHeader), parameters);\n          }\n        }\n      }\n    }\n    this._iv || (this._iv = (0, iv_js_1.default)(enc));\n    let additionalData;\n    let protectedHeader;\n    let aadMember;\n    if (this._protectedHeader) {\n      protectedHeader = buffer_utils_js_1.encoder.encode((0, base64url_js_1.encode)(JSON.stringify(this._protectedHeader)));\n    } else {\n      protectedHeader = buffer_utils_js_1.encoder.encode('');\n    }\n    if (this._aad) {\n      aadMember = (0, base64url_js_1.encode)(this._aad);\n      additionalData = (0, buffer_utils_js_1.concat)(protectedHeader, buffer_utils_js_1.encoder.encode('.'), buffer_utils_js_1.encoder.encode(aadMember));\n    } else {\n      additionalData = protectedHeader;\n    }\n    let ciphertext;\n    let tag;\n    if (joseHeader.zip === 'DEF') {\n      const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || zlib_js_1.deflate)(this._plaintext);\n      ({\n        ciphertext,\n        tag\n      } = await (0, encrypt_js_1.default)(enc, deflated, cek, this._iv, additionalData));\n    } else {\n      ;\n      ({\n        ciphertext,\n        tag\n      } = await (0, encrypt_js_1.default)(enc, this._plaintext, cek, this._iv, additionalData));\n    }\n    const jwe = {\n      ciphertext: (0, base64url_js_1.encode)(ciphertext),\n      iv: (0, base64url_js_1.encode)(this._iv),\n      tag: (0, base64url_js_1.encode)(tag)\n    };\n    if (encryptedKey) {\n      jwe.encrypted_key = (0, base64url_js_1.encode)(encryptedKey);\n    }\n    if (aadMember) {\n      jwe.aad = aadMember;\n    }\n    if (this._protectedHeader) {\n      jwe.protected = buffer_utils_js_1.decoder.decode(protectedHeader);\n    }\n    if (this._sharedUnprotectedHeader) {\n      jwe.unprotected = this._sharedUnprotectedHeader;\n    }\n    if (this._unprotectedHeader) {\n      jwe.header = this._unprotectedHeader;\n    }\n    return jwe;\n  }\n}\nexports.FlattenedEncrypt = FlattenedEncrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/decrypt.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/decrypt.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.generalDecrypt = void 0;\nconst decrypt_js_1 = __webpack_require__(/*! ../flattened/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/decrypt.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nasync function generalDecrypt(jwe, key, options) {\n  if (!(0, is_object_js_1.default)(jwe)) {\n    throw new errors_js_1.JWEInvalid('General JWE must be an object');\n  }\n  if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(is_object_js_1.default)) {\n    throw new errors_js_1.JWEInvalid('JWE Recipients missing or incorrect type');\n  }\n  if (!jwe.recipients.length) {\n    throw new errors_js_1.JWEInvalid('JWE Recipients has no members');\n  }\n  for (const recipient of jwe.recipients) {\n    try {\n      return await (0, decrypt_js_1.flattenedDecrypt)({\n        aad: jwe.aad,\n        ciphertext: jwe.ciphertext,\n        encrypted_key: recipient.encrypted_key,\n        header: recipient.header,\n        iv: jwe.iv,\n        protected: jwe.protected,\n        tag: jwe.tag,\n        unprotected: jwe.unprotected\n      }, key, options);\n    } catch {}\n  }\n  throw new errors_js_1.JWEDecryptionFailed();\n}\nexports.generalDecrypt = generalDecrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9nZW5lcmFsL2RlY3J5cHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUssQ0FBQztBQUMvQixNQUFNRyxZQUFZLEdBQUdDLG1CQUFPLENBQUMsNEhBQXlCLENBQUM7QUFDdkQsTUFBTUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLCtHQUFzQixDQUFDO0FBQ25ELE1BQU1FLGNBQWMsR0FBR0YsbUJBQU8sQ0FBQyxtSEFBd0IsQ0FBQztBQUN4RCxlQUFlRixjQUFjQSxDQUFDSyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO0VBQzdDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRUgsY0FBYyxDQUFDSSxPQUFPLEVBQUVILEdBQUcsQ0FBQyxFQUFFO0lBQ25DLE1BQU0sSUFBSUYsV0FBVyxDQUFDTSxVQUFVLENBQUMsK0JBQStCLENBQUM7RUFDckU7RUFDQSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDTixHQUFHLENBQUNPLFVBQVUsQ0FBQyxJQUFJLENBQUNQLEdBQUcsQ0FBQ08sVUFBVSxDQUFDQyxLQUFLLENBQUNULGNBQWMsQ0FBQ0ksT0FBTyxDQUFDLEVBQUU7SUFDakYsTUFBTSxJQUFJTCxXQUFXLENBQUNNLFVBQVUsQ0FBQywwQ0FBMEMsQ0FBQztFQUNoRjtFQUNBLElBQUksQ0FBQ0osR0FBRyxDQUFDTyxVQUFVLENBQUNFLE1BQU0sRUFBRTtJQUN4QixNQUFNLElBQUlYLFdBQVcsQ0FBQ00sVUFBVSxDQUFDLCtCQUErQixDQUFDO0VBQ3JFO0VBQ0EsS0FBSyxNQUFNTSxTQUFTLElBQUlWLEdBQUcsQ0FBQ08sVUFBVSxFQUFFO0lBQ3BDLElBQUk7TUFDQSxPQUFPLE1BQU0sQ0FBQyxDQUFDLEVBQUVYLFlBQVksQ0FBQ2UsZ0JBQWdCLEVBQUU7UUFDNUNDLEdBQUcsRUFBRVosR0FBRyxDQUFDWSxHQUFHO1FBQ1pDLFVBQVUsRUFBRWIsR0FBRyxDQUFDYSxVQUFVO1FBQzFCQyxhQUFhLEVBQUVKLFNBQVMsQ0FBQ0ksYUFBYTtRQUN0Q0MsTUFBTSxFQUFFTCxTQUFTLENBQUNLLE1BQU07UUFDeEJDLEVBQUUsRUFBRWhCLEdBQUcsQ0FBQ2dCLEVBQUU7UUFDVkMsU0FBUyxFQUFFakIsR0FBRyxDQUFDaUIsU0FBUztRQUN4QkMsR0FBRyxFQUFFbEIsR0FBRyxDQUFDa0IsR0FBRztRQUNaQyxXQUFXLEVBQUVuQixHQUFHLENBQUNtQjtNQUNyQixDQUFDLEVBQUVsQixHQUFHLEVBQUVDLE9BQU8sQ0FBQztJQUNwQixDQUFDLENBQ0QsTUFBTSxDQUNOO0VBQ0o7RUFDQSxNQUFNLElBQUlKLFdBQVcsQ0FBQ3NCLG1CQUFtQixDQUFDLENBQUM7QUFDL0M7QUFDQTNCLHNCQUFzQixHQUFHRSxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandlL2dlbmVyYWwvZGVjcnlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhbERlY3J5cHQgPSB2b2lkIDA7XG5jb25zdCBkZWNyeXB0X2pzXzEgPSByZXF1aXJlKFwiLi4vZmxhdHRlbmVkL2RlY3J5cHQuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGlzX29iamVjdF9qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi9pc19vYmplY3QuanNcIik7XG5hc3luYyBmdW5jdGlvbiBnZW5lcmFsRGVjcnlwdChqd2UsIGtleSwgb3B0aW9ucykge1xuICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKGp3ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ0dlbmVyYWwgSldFIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShqd2UucmVjaXBpZW50cykgfHwgIWp3ZS5yZWNpcGllbnRzLmV2ZXJ5KGlzX29iamVjdF9qc18xLmRlZmF1bHQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgUmVjaXBpZW50cyBtaXNzaW5nIG9yIGluY29ycmVjdCB0eXBlJyk7XG4gICAgfVxuICAgIGlmICghandlLnJlY2lwaWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgUmVjaXBpZW50cyBoYXMgbm8gbWVtYmVycycpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHJlY2lwaWVudCBvZiBqd2UucmVjaXBpZW50cykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0ICgwLCBkZWNyeXB0X2pzXzEuZmxhdHRlbmVkRGVjcnlwdCkoe1xuICAgICAgICAgICAgICAgIGFhZDogandlLmFhZCxcbiAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0OiBqd2UuY2lwaGVydGV4dCxcbiAgICAgICAgICAgICAgICBlbmNyeXB0ZWRfa2V5OiByZWNpcGllbnQuZW5jcnlwdGVkX2tleSxcbiAgICAgICAgICAgICAgICBoZWFkZXI6IHJlY2lwaWVudC5oZWFkZXIsXG4gICAgICAgICAgICAgICAgaXY6IGp3ZS5pdixcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWQ6IGp3ZS5wcm90ZWN0ZWQsXG4gICAgICAgICAgICAgICAgdGFnOiBqd2UudGFnLFxuICAgICAgICAgICAgICAgIHVucHJvdGVjdGVkOiBqd2UudW5wcm90ZWN0ZWQsXG4gICAgICAgICAgICB9LCBrZXksIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFRGVjcnlwdGlvbkZhaWxlZCgpO1xufVxuZXhwb3J0cy5nZW5lcmFsRGVjcnlwdCA9IGdlbmVyYWxEZWNyeXB0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2VuZXJhbERlY3J5cHQiLCJkZWNyeXB0X2pzXzEiLCJyZXF1aXJlIiwiZXJyb3JzX2pzXzEiLCJpc19vYmplY3RfanNfMSIsImp3ZSIsImtleSIsIm9wdGlvbnMiLCJkZWZhdWx0IiwiSldFSW52YWxpZCIsIkFycmF5IiwiaXNBcnJheSIsInJlY2lwaWVudHMiLCJldmVyeSIsImxlbmd0aCIsInJlY2lwaWVudCIsImZsYXR0ZW5lZERlY3J5cHQiLCJhYWQiLCJjaXBoZXJ0ZXh0IiwiZW5jcnlwdGVkX2tleSIsImhlYWRlciIsIml2IiwicHJvdGVjdGVkIiwidGFnIiwidW5wcm90ZWN0ZWQiLCJKV0VEZWNyeXB0aW9uRmFpbGVkIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/encrypt.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/encrypt.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.GeneralEncrypt = void 0;\nconst encrypt_js_1 = __webpack_require__(/*! ../flattened/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/flattened/encrypt.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst cek_js_1 = __webpack_require__(/*! ../../lib/cek.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst encrypt_key_management_js_1 = __webpack_require__(/*! ../../lib/encrypt_key_management.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nclass IndividualRecipient {\n  constructor(enc, key, options) {\n    this.parent = enc;\n    this.key = key;\n    this.options = options;\n  }\n  setUnprotectedHeader(unprotectedHeader) {\n    if (this.unprotectedHeader) {\n      throw new TypeError('setUnprotectedHeader can only be called once');\n    }\n    this.unprotectedHeader = unprotectedHeader;\n    return this;\n  }\n  addRecipient(...args) {\n    return this.parent.addRecipient(...args);\n  }\n  encrypt(...args) {\n    return this.parent.encrypt(...args);\n  }\n  done() {\n    return this.parent;\n  }\n}\nclass GeneralEncrypt {\n  constructor(plaintext) {\n    this._recipients = [];\n    this._plaintext = plaintext;\n  }\n  addRecipient(key, options) {\n    const recipient = new IndividualRecipient(this, key, {\n      crit: options === null || options === void 0 ? void 0 : options.crit\n    });\n    this._recipients.push(recipient);\n    return recipient;\n  }\n  setProtectedHeader(protectedHeader) {\n    if (this._protectedHeader) {\n      throw new TypeError('setProtectedHeader can only be called once');\n    }\n    this._protectedHeader = protectedHeader;\n    return this;\n  }\n  setSharedUnprotectedHeader(sharedUnprotectedHeader) {\n    if (this._unprotectedHeader) {\n      throw new TypeError('setSharedUnprotectedHeader can only be called once');\n    }\n    this._unprotectedHeader = sharedUnprotectedHeader;\n    return this;\n  }\n  setAdditionalAuthenticatedData(aad) {\n    this._aad = aad;\n    return this;\n  }\n  async encrypt(options) {\n    var _a, _b, _c;\n    if (!this._recipients.length) {\n      throw new errors_js_1.JWEInvalid('at least one recipient must be added');\n    }\n    options = {\n      deflateRaw: options === null || options === void 0 ? void 0 : options.deflateRaw\n    };\n    if (this._recipients.length === 1) {\n      const [recipient] = this._recipients;\n      const flattened = await new encrypt_js_1.FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).encrypt(recipient.key, _objectSpread(_objectSpread({}, recipient.options), options));\n      let jwe = {\n        ciphertext: flattened.ciphertext,\n        iv: flattened.iv,\n        recipients: [{}],\n        tag: flattened.tag\n      };\n      if (flattened.aad) jwe.aad = flattened.aad;\n      if (flattened.protected) jwe.protected = flattened.protected;\n      if (flattened.unprotected) jwe.unprotected = flattened.unprotected;\n      if (flattened.encrypted_key) jwe.recipients[0].encrypted_key = flattened.encrypted_key;\n      if (flattened.header) jwe.recipients[0].header = flattened.header;\n      return jwe;\n    }\n    let enc;\n    for (let i = 0; i < this._recipients.length; i++) {\n      const recipient = this._recipients[i];\n      if (!(0, is_disjoint_js_1.default)(this._protectedHeader, this._unprotectedHeader, recipient.unprotectedHeader)) {\n        throw new errors_js_1.JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');\n      }\n      const joseHeader = _objectSpread(_objectSpread(_objectSpread({}, this._protectedHeader), this._unprotectedHeader), recipient.unprotectedHeader);\n      const {\n        alg\n      } = joseHeader;\n      if (typeof alg !== 'string' || !alg) {\n        throw new errors_js_1.JWEInvalid('JWE \"alg\" (Algorithm) Header Parameter missing or invalid');\n      }\n      if (alg === 'dir' || alg === 'ECDH-ES') {\n        throw new errors_js_1.JWEInvalid('\"dir\" and \"ECDH-ES\" alg may only be used with a single recipient');\n      }\n      if (typeof joseHeader.enc !== 'string' || !joseHeader.enc) {\n        throw new errors_js_1.JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter missing or invalid');\n      }\n      if (!enc) {\n        enc = joseHeader.enc;\n      } else if (enc !== joseHeader.enc) {\n        throw new errors_js_1.JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter must be the same for all recipients');\n      }\n      (0, validate_crit_js_1.default)(errors_js_1.JWEInvalid, new Map(), recipient.options.crit, this._protectedHeader, joseHeader);\n      if (joseHeader.zip !== undefined) {\n        if (!this._protectedHeader || !this._protectedHeader.zip) {\n          throw new errors_js_1.JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n        }\n      }\n    }\n    const cek = (0, cek_js_1.default)(enc);\n    let jwe = {\n      ciphertext: '',\n      iv: '',\n      recipients: [],\n      tag: ''\n    };\n    for (let i = 0; i < this._recipients.length; i++) {\n      const recipient = this._recipients[i];\n      const target = {};\n      jwe.recipients.push(target);\n      const joseHeader = _objectSpread(_objectSpread(_objectSpread({}, this._protectedHeader), this._unprotectedHeader), recipient.unprotectedHeader);\n      const p2c = joseHeader.alg.startsWith('PBES2') ? 2048 + i : undefined;\n      if (i === 0) {\n        const flattened = await new encrypt_js_1.FlattenedEncrypt(this._plaintext).setAdditionalAuthenticatedData(this._aad).setContentEncryptionKey(cek).setProtectedHeader(this._protectedHeader).setSharedUnprotectedHeader(this._unprotectedHeader).setUnprotectedHeader(recipient.unprotectedHeader).setKeyManagementParameters({\n          p2c\n        }).encrypt(recipient.key, _objectSpread(_objectSpread(_objectSpread({}, recipient.options), options), {}, {\n          [encrypt_js_1.unprotected]: true\n        }));\n        jwe.ciphertext = flattened.ciphertext;\n        jwe.iv = flattened.iv;\n        jwe.tag = flattened.tag;\n        if (flattened.aad) jwe.aad = flattened.aad;\n        if (flattened.protected) jwe.protected = flattened.protected;\n        if (flattened.unprotected) jwe.unprotected = flattened.unprotected;\n        target.encrypted_key = flattened.encrypted_key;\n        if (flattened.header) target.header = flattened.header;\n        continue;\n      }\n      const {\n        encryptedKey,\n        parameters\n      } = await (0, encrypt_key_management_js_1.default)(((_a = recipient.unprotectedHeader) === null || _a === void 0 ? void 0 : _a.alg) || ((_b = this._protectedHeader) === null || _b === void 0 ? void 0 : _b.alg) || ((_c = this._unprotectedHeader) === null || _c === void 0 ? void 0 : _c.alg), enc, recipient.key, cek, {\n        p2c\n      });\n      target.encrypted_key = (0, base64url_js_1.encode)(encryptedKey);\n      if (recipient.unprotectedHeader || parameters) target.header = _objectSpread(_objectSpread({}, recipient.unprotectedHeader), parameters);\n    }\n    return jwe;\n  }\n}\nexports.GeneralEncrypt = GeneralEncrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ZS9nZW5lcmFsL2VuY3J5cHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQUEsU0FBQUEsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxJQUFBZSxlQUFBLENBQUFoQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWMseUJBQUEsR0FBQWQsTUFBQSxDQUFBZSxnQkFBQSxDQUFBbEIsQ0FBQSxFQUFBRyxNQUFBLENBQUFjLHlCQUFBLENBQUFmLENBQUEsS0FBQUgsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsR0FBQWEsT0FBQSxXQUFBZCxDQUFBLElBQUFFLE1BQUEsQ0FBQWdCLGNBQUEsQ0FBQW5CLENBQUEsRUFBQUMsQ0FBQSxF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Q0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNrQixHQUFHLENBQUMsS0FDekUsQ0FBQ2pCLEVBQUUsR0FBRyxJQUFJLENBQUNOLGtCQUFrQixNQUFNLElBQUksSUFBSU0sRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxFQUFFLENBQUNpQixHQUFHLENBQUMsRUFBRTFDLEdBQUcsRUFBRVksU0FBUyxDQUFDMUMsR0FBRyxFQUFFMkUsR0FBRyxFQUFFO1FBQUVFO01BQUksQ0FBQyxDQUFDO01BQ25IRCxNQUFNLENBQUNULGFBQWEsR0FBRyxDQUFDLENBQUMsRUFBRXpDLGNBQWMsQ0FBQ3lELE1BQU0sRUFBRUYsWUFBWSxDQUFDO01BQy9ELElBQUl2QyxTQUFTLENBQUNSLGlCQUFpQixJQUFJZ0QsVUFBVSxFQUN6Q04sTUFBTSxDQUFDUixNQUFNLEdBQUE3RSxhQUFBLENBQUFBLGFBQUEsS0FBUW1ELFNBQVMsQ0FBQ1IsaUJBQWlCLEdBQUtnRCxVQUFVLENBQUU7SUFDekU7SUFDQSxPQUFPdEIsR0FBRztFQUNkO0FBQ0o7QUFDQTFDLHNCQUFzQixHQUFHQyxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandlL2dlbmVyYWwvZW5jcnlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2VuZXJhbEVuY3J5cHQgPSB2b2lkIDA7XG5jb25zdCBlbmNyeXB0X2pzXzEgPSByZXF1aXJlKFwiLi4vZmxhdHRlbmVkL2VuY3J5cHQuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGNla19qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi9jZWsuanNcIik7XG5jb25zdCBpc19kaXNqb2ludF9qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi9pc19kaXNqb2ludC5qc1wiKTtcbmNvbnN0IGVuY3J5cHRfa2V5X21hbmFnZW1lbnRfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvZW5jcnlwdF9rZXlfbWFuYWdlbWVudC5qc1wiKTtcbmNvbnN0IGJhc2U2NHVybF9qc18xID0gcmVxdWlyZShcIi4uLy4uL3J1bnRpbWUvYmFzZTY0dXJsLmpzXCIpO1xuY29uc3QgdmFsaWRhdGVfY3JpdF9qc18xID0gcmVxdWlyZShcIi4uLy4uL2xpYi92YWxpZGF0ZV9jcml0LmpzXCIpO1xuY2xhc3MgSW5kaXZpZHVhbFJlY2lwaWVudCB7XG4gICAgY29uc3RydWN0b3IoZW5jLCBrZXksIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBlbmM7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBzZXRVbnByb3RlY3RlZEhlYWRlcih1bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICBpZiAodGhpcy51bnByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0VW5wcm90ZWN0ZWRIZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVucHJvdGVjdGVkSGVhZGVyID0gdW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRSZWNpcGllbnQoLi4uYXJncykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuYWRkUmVjaXBpZW50KC4uLmFyZ3MpO1xuICAgIH1cbiAgICBlbmNyeXB0KC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmVuY3J5cHQoLi4uYXJncyk7XG4gICAgfVxuICAgIGRvbmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICB9XG59XG5jbGFzcyBHZW5lcmFsRW5jcnlwdCB7XG4gICAgY29uc3RydWN0b3IocGxhaW50ZXh0KSB7XG4gICAgICAgIHRoaXMuX3JlY2lwaWVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcGxhaW50ZXh0ID0gcGxhaW50ZXh0O1xuICAgIH1cbiAgICBhZGRSZWNpcGllbnQoa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJlY2lwaWVudCA9IG5ldyBJbmRpdmlkdWFsUmVjaXBpZW50KHRoaXMsIGtleSwgeyBjcml0OiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY3JpdCB9KTtcbiAgICAgICAgdGhpcy5fcmVjaXBpZW50cy5wdXNoKHJlY2lwaWVudCk7XG4gICAgICAgIHJldHVybiByZWNpcGllbnQ7XG4gICAgfVxuICAgIHNldFByb3RlY3RlZEhlYWRlcihwcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3RlY3RlZEhlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2V0UHJvdGVjdGVkSGVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyID0gcHJvdGVjdGVkSGVhZGVyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgc2V0U2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIoc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzZXRTaGFyZWRVbnByb3RlY3RlZEhlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyID0gc2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRBZGRpdGlvbmFsQXV0aGVudGljYXRlZERhdGEoYWFkKSB7XG4gICAgICAgIHRoaXMuX2FhZCA9IGFhZDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIGVuY3J5cHQob3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgaWYgKCF0aGlzLl9yZWNpcGllbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoJ2F0IGxlYXN0IG9uZSByZWNpcGllbnQgbXVzdCBiZSBhZGRlZCcpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMgPSB7IGRlZmxhdGVSYXc6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kZWZsYXRlUmF3IH07XG4gICAgICAgIGlmICh0aGlzLl9yZWNpcGllbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3QgW3JlY2lwaWVudF0gPSB0aGlzLl9yZWNpcGllbnRzO1xuICAgICAgICAgICAgY29uc3QgZmxhdHRlbmVkID0gYXdhaXQgbmV3IGVuY3J5cHRfanNfMS5GbGF0dGVuZWRFbmNyeXB0KHRoaXMuX3BsYWludGV4dClcbiAgICAgICAgICAgICAgICAuc2V0QWRkaXRpb25hbEF1dGhlbnRpY2F0ZWREYXRhKHRoaXMuX2FhZClcbiAgICAgICAgICAgICAgICAuc2V0UHJvdGVjdGVkSGVhZGVyKHRoaXMuX3Byb3RlY3RlZEhlYWRlcilcbiAgICAgICAgICAgICAgICAuc2V0U2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIodGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIpXG4gICAgICAgICAgICAgICAgLnNldFVucHJvdGVjdGVkSGVhZGVyKHJlY2lwaWVudC51bnByb3RlY3RlZEhlYWRlcilcbiAgICAgICAgICAgICAgICAuZW5jcnlwdChyZWNpcGllbnQua2V5LCB7IC4uLnJlY2lwaWVudC5vcHRpb25zLCAuLi5vcHRpb25zIH0pO1xuICAgICAgICAgICAgbGV0IGp3ZSA9IHtcbiAgICAgICAgICAgICAgICBjaXBoZXJ0ZXh0OiBmbGF0dGVuZWQuY2lwaGVydGV4dCxcbiAgICAgICAgICAgICAgICBpdjogZmxhdHRlbmVkLml2LFxuICAgICAgICAgICAgICAgIHJlY2lwaWVudHM6IFt7fV0sXG4gICAgICAgICAgICAgICAgdGFnOiBmbGF0dGVuZWQudGFnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChmbGF0dGVuZWQuYWFkKVxuICAgICAgICAgICAgICAgIGp3ZS5hYWQgPSBmbGF0dGVuZWQuYWFkO1xuICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZC5wcm90ZWN0ZWQpXG4gICAgICAgICAgICAgICAgandlLnByb3RlY3RlZCA9IGZsYXR0ZW5lZC5wcm90ZWN0ZWQ7XG4gICAgICAgICAgICBpZiAoZmxhdHRlbmVkLnVucHJvdGVjdGVkKVxuICAgICAgICAgICAgICAgIGp3ZS51bnByb3RlY3RlZCA9IGZsYXR0ZW5lZC51bnByb3RlY3RlZDtcbiAgICAgICAgICAgIGlmIChmbGF0dGVuZWQuZW5jcnlwdGVkX2tleSlcbiAgICAgICAgICAgICAgICBqd2UucmVjaXBpZW50c1swXS5lbmNyeXB0ZWRfa2V5ID0gZmxhdHRlbmVkLmVuY3J5cHRlZF9rZXk7XG4gICAgICAgICAgICBpZiAoZmxhdHRlbmVkLmhlYWRlcilcbiAgICAgICAgICAgICAgICBqd2UucmVjaXBpZW50c1swXS5oZWFkZXIgPSBmbGF0dGVuZWQuaGVhZGVyO1xuICAgICAgICAgICAgcmV0dXJuIGp3ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZW5jO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3JlY2lwaWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY2lwaWVudCA9IHRoaXMuX3JlY2lwaWVudHNbaV07XG4gICAgICAgICAgICBpZiAoISgwLCBpc19kaXNqb2ludF9qc18xLmRlZmF1bHQpKHRoaXMuX3Byb3RlY3RlZEhlYWRlciwgdGhpcy5fdW5wcm90ZWN0ZWRIZWFkZXIsIHJlY2lwaWVudC51bnByb3RlY3RlZEhlYWRlcikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFByb3RlY3RlZCwgSldFIFNoYXJlZCBVbnByb3RlY3RlZCBhbmQgSldFIFBlci1SZWNpcGllbnQgSGVhZGVyIFBhcmFtZXRlciBuYW1lcyBtdXN0IGJlIGRpc2pvaW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBqb3NlSGVhZGVyID0ge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuX3Byb3RlY3RlZEhlYWRlcixcbiAgICAgICAgICAgICAgICAuLi50aGlzLl91bnByb3RlY3RlZEhlYWRlcixcbiAgICAgICAgICAgICAgICAuLi5yZWNpcGllbnQudW5wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgeyBhbGcgfSA9IGpvc2VIZWFkZXI7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFsZyAhPT0gJ3N0cmluZycgfHwgIWFsZykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgXCJhbGdcIiAoQWxnb3JpdGhtKSBIZWFkZXIgUGFyYW1ldGVyIG1pc3Npbmcgb3IgaW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFsZyA9PT0gJ2RpcicgfHwgYWxnID09PSAnRUNESC1FUycpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnXCJkaXJcIiBhbmQgXCJFQ0RILUVTXCIgYWxnIG1heSBvbmx5IGJlIHVzZWQgd2l0aCBhIHNpbmdsZSByZWNpcGllbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygam9zZUhlYWRlci5lbmMgIT09ICdzdHJpbmcnIHx8ICFqb3NlSGVhZGVyLmVuYykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgXCJlbmNcIiAoRW5jcnlwdGlvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbWlzc2luZyBvciBpbnZhbGlkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWVuYykge1xuICAgICAgICAgICAgICAgIGVuYyA9IGpvc2VIZWFkZXIuZW5jO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZW5jICE9PSBqb3NlSGVhZGVyLmVuYykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdKV0UgXCJlbmNcIiAoRW5jcnlwdGlvbiBBbGdvcml0aG0pIEhlYWRlciBQYXJhbWV0ZXIgbXVzdCBiZSB0aGUgc2FtZSBmb3IgYWxsIHJlY2lwaWVudHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCB2YWxpZGF0ZV9jcml0X2pzXzEuZGVmYXVsdCkoZXJyb3JzX2pzXzEuSldFSW52YWxpZCwgbmV3IE1hcCgpLCByZWNpcGllbnQub3B0aW9ucy5jcml0LCB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIsIGpvc2VIZWFkZXIpO1xuICAgICAgICAgICAgaWYgKGpvc2VIZWFkZXIuemlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3Byb3RlY3RlZEhlYWRlciB8fCAhdGhpcy5fcHJvdGVjdGVkSGVhZGVyLnppcCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldFSW52YWxpZCgnSldFIFwiemlwXCIgKENvbXByZXNzaW9uIEFsZ29yaXRobSkgSGVhZGVyIE1VU1QgYmUgaW50ZWdyaXR5IHByb3RlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZWsgPSAoMCwgY2VrX2pzXzEuZGVmYXVsdCkoZW5jKTtcbiAgICAgICAgbGV0IGp3ZSA9IHtcbiAgICAgICAgICAgIGNpcGhlcnRleHQ6ICcnLFxuICAgICAgICAgICAgaXY6ICcnLFxuICAgICAgICAgICAgcmVjaXBpZW50czogW10sXG4gICAgICAgICAgICB0YWc6ICcnLFxuICAgICAgICB9O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3JlY2lwaWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY2lwaWVudCA9IHRoaXMuX3JlY2lwaWVudHNbaV07XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICAgICAgICAgIGp3ZS5yZWNpcGllbnRzLnB1c2godGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IGpvc2VIZWFkZXIgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5fcHJvdGVjdGVkSGVhZGVyLFxuICAgICAgICAgICAgICAgIC4uLnRoaXMuX3VucHJvdGVjdGVkSGVhZGVyLFxuICAgICAgICAgICAgICAgIC4uLnJlY2lwaWVudC51bnByb3RlY3RlZEhlYWRlcixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBwMmMgPSBqb3NlSGVhZGVyLmFsZy5zdGFydHNXaXRoKCdQQkVTMicpID8gMjA0OCArIGkgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZsYXR0ZW5lZCA9IGF3YWl0IG5ldyBlbmNyeXB0X2pzXzEuRmxhdHRlbmVkRW5jcnlwdCh0aGlzLl9wbGFpbnRleHQpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRBZGRpdGlvbmFsQXV0aGVudGljYXRlZERhdGEodGhpcy5fYWFkKVxuICAgICAgICAgICAgICAgICAgICAuc2V0Q29udGVudEVuY3J5cHRpb25LZXkoY2VrKVxuICAgICAgICAgICAgICAgICAgICAuc2V0UHJvdGVjdGVkSGVhZGVyKHRoaXMuX3Byb3RlY3RlZEhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgLnNldFNoYXJlZFVucHJvdGVjdGVkSGVhZGVyKHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VW5wcm90ZWN0ZWRIZWFkZXIocmVjaXBpZW50LnVucHJvdGVjdGVkSGVhZGVyKVxuICAgICAgICAgICAgICAgICAgICAuc2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMoeyBwMmMgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVuY3J5cHQocmVjaXBpZW50LmtleSwge1xuICAgICAgICAgICAgICAgICAgICAuLi5yZWNpcGllbnQub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgW2VuY3J5cHRfanNfMS51bnByb3RlY3RlZF06IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgandlLmNpcGhlcnRleHQgPSBmbGF0dGVuZWQuY2lwaGVydGV4dDtcbiAgICAgICAgICAgICAgICBqd2UuaXYgPSBmbGF0dGVuZWQuaXY7XG4gICAgICAgICAgICAgICAgandlLnRhZyA9IGZsYXR0ZW5lZC50YWc7XG4gICAgICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZC5hYWQpXG4gICAgICAgICAgICAgICAgICAgIGp3ZS5hYWQgPSBmbGF0dGVuZWQuYWFkO1xuICAgICAgICAgICAgICAgIGlmIChmbGF0dGVuZWQucHJvdGVjdGVkKVxuICAgICAgICAgICAgICAgICAgICBqd2UucHJvdGVjdGVkID0gZmxhdHRlbmVkLnByb3RlY3RlZDtcbiAgICAgICAgICAgICAgICBpZiAoZmxhdHRlbmVkLnVucHJvdGVjdGVkKVxuICAgICAgICAgICAgICAgICAgICBqd2UudW5wcm90ZWN0ZWQgPSBmbGF0dGVuZWQudW5wcm90ZWN0ZWQ7XG4gICAgICAgICAgICAgICAgdGFyZ2V0LmVuY3J5cHRlZF9rZXkgPSBmbGF0dGVuZWQuZW5jcnlwdGVkX2tleTtcbiAgICAgICAgICAgICAgICBpZiAoZmxhdHRlbmVkLmhlYWRlcilcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmhlYWRlciA9IGZsYXR0ZW5lZC5oZWFkZXI7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IGVuY3J5cHRlZEtleSwgcGFyYW1ldGVycyB9ID0gYXdhaXQgKDAsIGVuY3J5cHRfa2V5X21hbmFnZW1lbnRfanNfMS5kZWZhdWx0KSgoKF9hID0gcmVjaXBpZW50LnVucHJvdGVjdGVkSGVhZGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWxnKSB8fFxuICAgICAgICAgICAgICAgICgoX2IgPSB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hbGcpIHx8XG4gICAgICAgICAgICAgICAgKChfYyA9IHRoaXMuX3VucHJvdGVjdGVkSGVhZGVyKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuYWxnKSwgZW5jLCByZWNpcGllbnQua2V5LCBjZWssIHsgcDJjIH0pO1xuICAgICAgICAgICAgdGFyZ2V0LmVuY3J5cHRlZF9rZXkgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShlbmNyeXB0ZWRLZXkpO1xuICAgICAgICAgICAgaWYgKHJlY2lwaWVudC51bnByb3RlY3RlZEhlYWRlciB8fCBwYXJhbWV0ZXJzKVxuICAgICAgICAgICAgICAgIHRhcmdldC5oZWFkZXIgPSB7IC4uLnJlY2lwaWVudC51bnByb3RlY3RlZEhlYWRlciwgLi4ucGFyYW1ldGVycyB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqd2U7XG4gICAgfVxufVxuZXhwb3J0cy5HZW5lcmFsRW5jcnlwdCA9IEdlbmVyYWxFbmNyeXB0O1xuIl0sIm5hbWVzIjpbIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiZXhwb3J0cyIsIkdlbmVyYWxFbmNyeXB0IiwiZW5jcnlwdF9qc18xIiwicmVxdWlyZSIsImVycm9yc19qc18xIiwiY2VrX2pzXzEiLCJpc19kaXNqb2ludF9qc18xIiwiZW5jcnlwdF9rZXlfbWFuYWdlbWVudF9qc18xIiwiYmFzZTY0dXJsX2pzXzEiLCJ2YWxpZGF0ZV9jcml0X2pzXzEiLCJJbmRpdmlkdWFsUmVjaXBpZW50IiwiY29uc3RydWN0b3IiLCJlbmMiLCJvcHRpb25zIiwicGFyZW50Iiwic2V0VW5wcm90ZWN0ZWRIZWFkZXIiLCJ1bnByb3RlY3RlZEhlYWRlciIsImFkZFJlY2lwaWVudCIsImFyZ3MiLCJlbmNyeXB0IiwiZG9uZSIsInBsYWludGV4dCIsIl9yZWNpcGllbnRzIiwiX3BsYWludGV4dCIsInJlY2lwaWVudCIsImNyaXQiLCJzZXRQcm90ZWN0ZWRIZWFkZXIiLCJwcm90ZWN0ZWRIZWFkZXIiLCJfcHJvdGVjdGVkSGVhZGVyIiwic2V0U2hhcmVkVW5wcm90ZWN0ZWRIZWFkZXIiLCJzaGFyZWRVbnByb3RlY3RlZEhlYWRlciIsIl91bnByb3RlY3RlZEhlYWRlciIsInNldEFkZGl0aW9uYWxBdXRoZW50aWNhdGVkRGF0YSIsImFhZCIsIl9hYWQiLCJfYSIsIl9iIiwiX2MiLCJKV0VJbnZhbGlkIiwiZGVmbGF0ZVJhdyIsImZsYXR0ZW5lZCIsIkZsYXR0ZW5lZEVuY3J5cHQiLCJqd2UiLCJjaXBoZXJ0ZXh0IiwiaXYiLCJyZWNpcGllbnRzIiwidGFnIiwicHJvdGVjdGVkIiwidW5wcm90ZWN0ZWQiLCJlbmNyeXB0ZWRfa2V5IiwiaGVhZGVyIiwiaSIsImRlZmF1bHQiLCJqb3NlSGVhZGVyIiwiYWxnIiwiTWFwIiwiemlwIiwiY2VrIiwidGFyZ2V0IiwicDJjIiwic3RhcnRzV2l0aCIsInNldENvbnRlbnRFbmNyeXB0aW9uS2V5Iiwic2V0S2V5TWFuYWdlbWVudFBhcmFtZXRlcnMiLCJlbmNyeXB0ZWRLZXkiLCJwYXJhbWV0ZXJzIiwiZW5jb2RlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/general/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/embedded.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/embedded.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.EmbeddedJWK = void 0;\nconst import_js_1 = __webpack_require__(/*! ../key/import.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nasync function EmbeddedJWK(protectedHeader, token) {\n  const joseHeader = _objectSpread(_objectSpread({}, protectedHeader), token === null || token === void 0 ? void 0 : token.header);\n  if (!(0, is_object_js_1.default)(joseHeader.jwk)) {\n    throw new errors_js_1.JWSInvalid('\"jwk\" (JSON Web Key) Header Parameter must be a JSON object');\n  }\n  const key = await (0, import_js_1.importJWK)(_objectSpread(_objectSpread({}, joseHeader.jwk), {}, {\n    ext: true\n  }), joseHeader.alg, true);\n  if (key instanceof Uint8Array || key.type !== 'public') {\n    throw new errors_js_1.JWSInvalid('\"jwk\" (JSON Web Key) Header Parameter must be a public key');\n  }\n  return key;\n}\nexports.EmbeddedJWK = EmbeddedJWK;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3ay9lbWJlZGRlZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFBQSxTQUFBQSxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQSxPQUFBRyxNQUFBLENBQUFFLHFCQUFBLFFBQUFDLENBQUEsR0FBQUgsTUFBQSxDQUFBRSxxQkFBQSxDQUFBTCxDQUFBLEdBQUFDLENBQUEsS0FBQUssQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQU4sQ0FBQSxXQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFSLENBQUEsRUFBQUMsQ0FBQSxFQUFBUSxVQUFBLE9BQUFQLENBQUEsQ0FBQVEsSUFBQSxDQUFBQyxLQUFBLENBQUFULENBQUEsRUFBQUksQ0FBQSxZQUFBSixDQUFBO0FBQUEsU0FBQVUsY0FBQVosQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQVksU0FBQSxDQUFBQyxNQUFBLEVBQUFiLENBQUEsVUFBQUMsQ0FBQSxXQUFBVyxTQUFBLENBQUFaLENBQUEsSUFBQVksU0FBQSxDQUFBWixDQUFBLFFBQUFBLENBQUEsT0FBQUYsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsT0FBQWEsT0FBQSxXQUFBZCxDQUFBLElBQUFlLGVBQUEsQ0FBQWhCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUFELENBQUEsU0FBQUUsTUFBQSxDQUFBYyx5QkFBQSxHQUFBZCxNQUFBLENBQUFlLGdCQUFBLENBQUFsQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWMseUJBQUEsQ0FBQWYsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQUUsTUFBQSxDQUFBZ0IsY0FBQSxDQUFBbkIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQU4sQ0FBQSxFQUFBRCxDQUFBLGlCQUFBRCxDQUFBO0FBQUEsU0FBQWdCLGdCQUFBSSxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsS0FBQSxJQUFBRCxHQUFBLEdBQUFFLGNBQUEsQ0FBQUYsR0FBQSxPQUFBQSxHQUFBLElBQUFELEdBQUEsSUFBQWpCLE1BQUEsQ0FBQWdCLGNBQUEsQ0FBQUMsR0FBQSxFQUFBQyxHQUFBLElBQUFDLEtBQUEsRUFBQUEsS0FBQSxFQUFBYixVQUFBLFFBQUFlLFlBQUEsUUFBQUMsUUFBQSxvQkFBQUwsR0FBQSxDQUFBQyxHQUFBLElBQUFDLEtBQUEsV0FBQUYsR0FBQTtBQUFBLFNBQUFHLGVBQUFHLEdBQUEsUUFBQUwsR0FBQSxHQUFBTSxZQUFBLENBQUFELEdBQUEsMkJBQUFMLEdBQUEsZ0JBQUFBLEdBQUEsR0FBQU8sTUFBQSxDQUFBUCxHQUFBO0FBQUEsU0FBQU0sYUFBQUUsS0FBQSxFQUFBQyxJQUFBLGVBQUFELEtBQUEsaUJBQUFBLEtBQUEsa0JBQUFBLEtBQUEsTUFBQUUsSUFBQSxHQUFBRixLQUFBLENBQUFHLE1BQUEsQ0FBQUMsV0FBQSxPQUFBRixJQUFBLEtBQUFHLFNBQUEsUUFBQUMsR0FBQSxHQUFBSixJQUFBLENBQUFLLElBQUEsQ0FBQVAsS0FBQSxFQUFBQyxJQUFBLDJCQUFBSyxHQUFBLHNCQUFBQSxHQUFBLFlBQUFFLFNBQUEsNERBQUFQLElBQUEsZ0JBQUFGLE1BQUEsR0FBQVUsTUFBQSxFQUFBVCxLQUFBO0FBQ2IxQiw4Q0FBNkM7RUFBRW1CLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RGlCLG1CQUFtQixHQUFHLEtBQUssQ0FBQztBQUM1QixNQUFNRSxXQUFXLEdBQUdDLG1CQUFPLENBQUMsMEdBQWtCLENBQUM7QUFDL0MsTUFBTUMsY0FBYyxHQUFHRCxtQkFBTyxDQUFDLGdIQUFxQixDQUFDO0FBQ3JELE1BQU1FLFdBQVcsR0FBR0YsbUJBQU8sQ0FBQyw0R0FBbUIsQ0FBQztBQUNoRCxlQUFlRixXQUFXQSxDQUFDSyxlQUFlLEVBQUVDLEtBQUssRUFBRTtFQUMvQyxNQUFNQyxVQUFVLEdBQUFuQyxhQUFBLENBQUFBLGFBQUEsS0FDVGlDLGVBQWUsR0FDZkMsS0FBSyxLQUFLLElBQUksSUFBSUEsS0FBSyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHQSxLQUFLLENBQUNFLE1BQU0sQ0FDaEU7RUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUVMLGNBQWMsQ0FBQ00sT0FBTyxFQUFFRixVQUFVLENBQUNHLEdBQUcsQ0FBQyxFQUFFO0lBQzlDLE1BQU0sSUFBSU4sV0FBVyxDQUFDTyxVQUFVLENBQUMsNkRBQTZELENBQUM7RUFDbkc7RUFDQSxNQUFNOUIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUVvQixXQUFXLENBQUNXLFNBQVMsRUFBQXhDLGFBQUEsQ0FBQUEsYUFBQSxLQUFPbUMsVUFBVSxDQUFDRyxHQUFHO0lBQUVHLEdBQUcsRUFBRTtFQUFJLElBQUlOLFVBQVUsQ0FBQ08sR0FBRyxFQUFFLElBQUksQ0FBQztFQUNwRyxJQUFJakMsR0FBRyxZQUFZa0MsVUFBVSxJQUFJbEMsR0FBRyxDQUFDbUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtJQUNwRCxNQUFNLElBQUlaLFdBQVcsQ0FBQ08sVUFBVSxDQUFDLDREQUE0RCxDQUFDO0VBQ2xHO0VBQ0EsT0FBTzlCLEdBQUc7QUFDZDtBQUNBa0IsbUJBQW1CLEdBQUdDLFdBQVciLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd2svZW1iZWRkZWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVtYmVkZGVkSldLID0gdm9pZCAwO1xuY29uc3QgaW1wb3J0X2pzXzEgPSByZXF1aXJlKFwiLi4va2V5L2ltcG9ydC5qc1wiKTtcbmNvbnN0IGlzX29iamVjdF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pc19vYmplY3QuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIEVtYmVkZGVkSldLKHByb3RlY3RlZEhlYWRlciwgdG9rZW4pIHtcbiAgICBjb25zdCBqb3NlSGVhZGVyID0ge1xuICAgICAgICAuLi5wcm90ZWN0ZWRIZWFkZXIsXG4gICAgICAgIC4uLnRva2VuID09PSBudWxsIHx8IHRva2VuID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0b2tlbi5oZWFkZXIsXG4gICAgfTtcbiAgICBpZiAoISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShqb3NlSGVhZGVyLmp3aykpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ1wiandrXCIgKEpTT04gV2ViIEtleSkgSGVhZGVyIFBhcmFtZXRlciBtdXN0IGJlIGEgSlNPTiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gYXdhaXQgKDAsIGltcG9ydF9qc18xLmltcG9ydEpXSykoeyAuLi5qb3NlSGVhZGVyLmp3aywgZXh0OiB0cnVlIH0sIGpvc2VIZWFkZXIuYWxnLCB0cnVlKTtcbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBrZXkudHlwZSAhPT0gJ3B1YmxpYycpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXU0ludmFsaWQoJ1wiandrXCIgKEpTT04gV2ViIEtleSkgSGVhZGVyIFBhcmFtZXRlciBtdXN0IGJlIGEgcHVibGljIGtleScpO1xuICAgIH1cbiAgICByZXR1cm4ga2V5O1xufVxuZXhwb3J0cy5FbWJlZGRlZEpXSyA9IEVtYmVkZGVkSldLO1xuIl0sIm5hbWVzIjpbIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiZXhwb3J0cyIsIkVtYmVkZGVkSldLIiwiaW1wb3J0X2pzXzEiLCJyZXF1aXJlIiwiaXNfb2JqZWN0X2pzXzEiLCJlcnJvcnNfanNfMSIsInByb3RlY3RlZEhlYWRlciIsInRva2VuIiwiam9zZUhlYWRlciIsImhlYWRlciIsImRlZmF1bHQiLCJqd2siLCJKV1NJbnZhbGlkIiwiaW1wb3J0SldLIiwiZXh0IiwiYWxnIiwiVWludDhBcnJheSIsInR5cGUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/embedded.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/thumbprint.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/thumbprint.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.calculateJwkThumbprintUri = exports.calculateJwkThumbprint = void 0;\nconst digest_js_1 = __webpack_require__(/*! ../runtime/digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst check = (value, description) => {\n  if (typeof value !== 'string' || !value) {\n    throw new errors_js_1.JWKInvalid(`${description} missing or invalid`);\n  }\n};\nasync function calculateJwkThumbprint(jwk, digestAlgorithm) {\n  if (!(0, is_object_js_1.default)(jwk)) {\n    throw new TypeError('JWK must be an object');\n  }\n  digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : digestAlgorithm = 'sha256';\n  if (digestAlgorithm !== 'sha256' && digestAlgorithm !== 'sha384' && digestAlgorithm !== 'sha512') {\n    throw new TypeError('digestAlgorithm must one of \"sha256\", \"sha384\", or \"sha512\"');\n  }\n  let components;\n  switch (jwk.kty) {\n    case 'EC':\n      check(jwk.crv, '\"crv\" (Curve) Parameter');\n      check(jwk.x, '\"x\" (X Coordinate) Parameter');\n      check(jwk.y, '\"y\" (Y Coordinate) Parameter');\n      components = {\n        crv: jwk.crv,\n        kty: jwk.kty,\n        x: jwk.x,\n        y: jwk.y\n      };\n      break;\n    case 'OKP':\n      check(jwk.crv, '\"crv\" (Subtype of Key Pair) Parameter');\n      check(jwk.x, '\"x\" (Public Key) Parameter');\n      components = {\n        crv: jwk.crv,\n        kty: jwk.kty,\n        x: jwk.x\n      };\n      break;\n    case 'RSA':\n      check(jwk.e, '\"e\" (Exponent) Parameter');\n      check(jwk.n, '\"n\" (Modulus) Parameter');\n      components = {\n        e: jwk.e,\n        kty: jwk.kty,\n        n: jwk.n\n      };\n      break;\n    case 'oct':\n      check(jwk.k, '\"k\" (Key Value) Parameter');\n      components = {\n        k: jwk.k,\n        kty: jwk.kty\n      };\n      break;\n    default:\n      throw new errors_js_1.JOSENotSupported('\"kty\" (Key Type) Parameter missing or unsupported');\n  }\n  const data = buffer_utils_js_1.encoder.encode(JSON.stringify(components));\n  return (0, base64url_js_1.encode)(await (0, digest_js_1.default)(digestAlgorithm, data));\n}\nexports.calculateJwkThumbprint = calculateJwkThumbprint;\nasync function calculateJwkThumbprintUri(jwk, digestAlgorithm) {\n  digestAlgorithm !== null && digestAlgorithm !== void 0 ? digestAlgorithm : digestAlgorithm = 'sha256';\n  const thumbprint = await calculateJwkThumbprint(jwk, digestAlgorithm);\n  return `urn:ietf:params:oauth:jwk-thumbprint:sha-${digestAlgorithm.slice(-3)}:${thumbprint}`;\n}\nexports.calculateJwkThumbprintUri = calculateJwkThumbprintUri;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwk/thumbprint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createLocalJWKSet = exports.LocalJWKSet = exports.isJWKSLike = void 0;\nconst import_js_1 = __webpack_require__(/*! ../key/import.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nfunction getKtyFromAlg(alg) {\n  switch (typeof alg === 'string' && alg.slice(0, 2)) {\n    case 'RS':\n    case 'PS':\n      return 'RSA';\n    case 'ES':\n      return 'EC';\n    case 'Ed':\n      return 'OKP';\n    default:\n      throw new errors_js_1.JOSENotSupported('Unsupported \"alg\" value for a JSON Web Key Set');\n  }\n}\nfunction isJWKSLike(jwks) {\n  return jwks && typeof jwks === 'object' && Array.isArray(jwks.keys) && jwks.keys.every(isJWKLike);\n}\nexports.isJWKSLike = isJWKSLike;\nfunction isJWKLike(key) {\n  return (0, is_object_js_1.default)(key);\n}\nfunction clone(obj) {\n  if (typeof structuredClone === 'function') {\n    return structuredClone(obj);\n  }\n  return JSON.parse(JSON.stringify(obj));\n}\nclass LocalJWKSet {\n  constructor(jwks) {\n    this._cached = new WeakMap();\n    if (!isJWKSLike(jwks)) {\n      throw new errors_js_1.JWKSInvalid('JSON Web Key Set malformed');\n    }\n    this._jwks = clone(jwks);\n  }\n  async getKey(protectedHeader, token) {\n    const {\n      alg,\n      kid\n    } = _objectSpread(_objectSpread({}, protectedHeader), token === null || token === void 0 ? void 0 : token.header);\n    const kty = getKtyFromAlg(alg);\n    const candidates = this._jwks.keys.filter(jwk => {\n      let candidate = kty === jwk.kty;\n      if (candidate && typeof kid === 'string') {\n        candidate = kid === jwk.kid;\n      }\n      if (candidate && typeof jwk.alg === 'string') {\n        candidate = alg === jwk.alg;\n      }\n      if (candidate && typeof jwk.use === 'string') {\n        candidate = jwk.use === 'sig';\n      }\n      if (candidate && Array.isArray(jwk.key_ops)) {\n        candidate = jwk.key_ops.includes('verify');\n      }\n      if (candidate && alg === 'EdDSA') {\n        candidate = jwk.crv === 'Ed25519' || jwk.crv === 'Ed448';\n      }\n      if (candidate) {\n        switch (alg) {\n          case 'ES256':\n            candidate = jwk.crv === 'P-256';\n            break;\n          case 'ES256K':\n            candidate = jwk.crv === 'secp256k1';\n            break;\n          case 'ES384':\n            candidate = jwk.crv === 'P-384';\n            break;\n          case 'ES512':\n            candidate = jwk.crv === 'P-521';\n            break;\n        }\n      }\n      return candidate;\n    });\n    const {\n      0: jwk,\n      length\n    } = candidates;\n    if (length === 0) {\n      throw new errors_js_1.JWKSNoMatchingKey();\n    } else if (length !== 1) {\n      const error = new errors_js_1.JWKSMultipleMatchingKeys();\n      const {\n        _cached\n      } = this;\n      error[Symbol.asyncIterator] = async function* () {\n        for (const jwk of candidates) {\n          try {\n            yield await importWithAlgCache(_cached, jwk, alg);\n          } catch {\n            continue;\n          }\n        }\n      };\n      throw error;\n    }\n    return importWithAlgCache(this._cached, jwk, alg);\n  }\n}\nexports.LocalJWKSet = LocalJWKSet;\nasync function importWithAlgCache(cache, jwk, alg) {\n  const cached = cache.get(jwk) || cache.set(jwk, {}).get(jwk);\n  if (cached[alg] === undefined) {\n    const key = await (0, import_js_1.importJWK)(_objectSpread(_objectSpread({}, jwk), {}, {\n      ext: true\n    }), alg);\n    if (key instanceof Uint8Array || key.type !== 'public') {\n      throw new errors_js_1.JWKSInvalid('JSON Web Key Set members must be public keys');\n    }\n    cached[alg] = key;\n  }\n  return cached[alg];\n}\nfunction createLocalJWKSet(jwks) {\n  const set = new LocalJWKSet(jwks);\n  return async function (protectedHeader, token) {\n    return set.getKey(protectedHeader, token);\n  };\n}\nexports.createLocalJWKSet = createLocalJWKSet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/remote.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/remote.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.createRemoteJWKSet = void 0;\nconst fetch_jwks_js_1 = __webpack_require__(/*! ../runtime/fetch_jwks.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/fetch_jwks.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst local_js_1 = __webpack_require__(/*! ./local.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/local.js\");\nfunction isCloudflareWorkers() {\n  return typeof WebSocketPair !== 'undefined' || typeof navigator !== 'undefined' && navigator.userAgent === 'Cloudflare-Workers' || typeof EdgeRuntime !== 'undefined' && EdgeRuntime === 'vercel';\n}\nclass RemoteJWKSet extends local_js_1.LocalJWKSet {\n  constructor(url, options) {\n    super({\n      keys: []\n    });\n    this._jwks = undefined;\n    if (!(url instanceof URL)) {\n      throw new TypeError('url must be an instance of URL');\n    }\n    this._url = new URL(url.href);\n    this._options = {\n      agent: options === null || options === void 0 ? void 0 : options.agent,\n      headers: options === null || options === void 0 ? void 0 : options.headers\n    };\n    this._timeoutDuration = typeof (options === null || options === void 0 ? void 0 : options.timeoutDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.timeoutDuration : 5000;\n    this._cooldownDuration = typeof (options === null || options === void 0 ? void 0 : options.cooldownDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.cooldownDuration : 30000;\n    this._cacheMaxAge = typeof (options === null || options === void 0 ? void 0 : options.cacheMaxAge) === 'number' ? options === null || options === void 0 ? void 0 : options.cacheMaxAge : 600000;\n  }\n  coolingDown() {\n    return typeof this._jwksTimestamp === 'number' ? Date.now() < this._jwksTimestamp + this._cooldownDuration : false;\n  }\n  fresh() {\n    return typeof this._jwksTimestamp === 'number' ? Date.now() < this._jwksTimestamp + this._cacheMaxAge : false;\n  }\n  async getKey(protectedHeader, token) {\n    if (!this._jwks || !this.fresh()) {\n      await this.reload();\n    }\n    try {\n      return await super.getKey(protectedHeader, token);\n    } catch (err) {\n      if (err instanceof errors_js_1.JWKSNoMatchingKey) {\n        if (this.coolingDown() === false) {\n          await this.reload();\n          return super.getKey(protectedHeader, token);\n        }\n      }\n      throw err;\n    }\n  }\n  async reload() {\n    if (this._pendingFetch && isCloudflareWorkers()) {\n      this._pendingFetch = undefined;\n    }\n    this._pendingFetch || (this._pendingFetch = (0, fetch_jwks_js_1.default)(this._url, this._timeoutDuration, this._options).then(json => {\n      if (!(0, local_js_1.isJWKSLike)(json)) {\n        throw new errors_js_1.JWKSInvalid('JSON Web Key Set malformed');\n      }\n      this._jwks = {\n        keys: json.keys\n      };\n      this._jwksTimestamp = Date.now();\n      this._pendingFetch = undefined;\n    }).catch(err => {\n      this._pendingFetch = undefined;\n      throw err;\n    }));\n    await this._pendingFetch;\n  }\n}\nfunction createRemoteJWKSet(url, options) {\n  const set = new RemoteJWKSet(url, options);\n  return async function (protectedHeader, token) {\n    return set.getKey(protectedHeader, token);\n  };\n}\nexports.createRemoteJWKSet = createRemoteJWKSet;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwks/remote.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CompactSign = void 0;\nconst sign_js_1 = __webpack_require__(/*! ../flattened/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js\");\nclass CompactSign {\n  constructor(payload) {\n    this._flattened = new sign_js_1.FlattenedSign(payload);\n  }\n  setProtectedHeader(protectedHeader) {\n    this._flattened.setProtectedHeader(protectedHeader);\n    return this;\n  }\n  async sign(key, options) {\n    const jws = await this._flattened.sign(key, options);\n    if (jws.payload === undefined) {\n      throw new TypeError('use the flattened module for creating JWS with b64: false');\n    }\n    return `${jws.protected}.${jws.payload}.${jws.signature}`;\n  }\n}\nexports.CompactSign = CompactSign;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3cy9jb21wYWN0L3NpZ24uanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHLEtBQUssQ0FBQztBQUM1QixNQUFNRyxTQUFTLEdBQUdDLG1CQUFPLENBQUMsc0hBQXNCLENBQUM7QUFDakQsTUFBTUYsV0FBVyxDQUFDO0VBQ2RHLFdBQVdBLENBQUNDLE9BQU8sRUFBRTtJQUNqQixJQUFJLENBQUNDLFVBQVUsR0FBRyxJQUFJSixTQUFTLENBQUNLLGFBQWEsQ0FBQ0YsT0FBTyxDQUFDO0VBQzFEO0VBQ0FHLGtCQUFrQkEsQ0FBQ0MsZUFBZSxFQUFFO0lBQ2hDLElBQUksQ0FBQ0gsVUFBVSxDQUFDRSxrQkFBa0IsQ0FBQ0MsZUFBZSxDQUFDO0lBQ25ELE9BQU8sSUFBSTtFQUNmO0VBQ0EsTUFBTUMsSUFBSUEsQ0FBQ0MsR0FBRyxFQUFFQyxPQUFPLEVBQUU7SUFDckIsTUFBTUMsR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDUCxVQUFVLENBQUNJLElBQUksQ0FBQ0MsR0FBRyxFQUFFQyxPQUFPLENBQUM7SUFDcEQsSUFBSUMsR0FBRyxDQUFDUixPQUFPLEtBQUtTLFNBQVMsRUFBRTtNQUMzQixNQUFNLElBQUlDLFNBQVMsQ0FBQywyREFBMkQsQ0FBQztJQUNwRjtJQUNBLE9BQVEsR0FBRUYsR0FBRyxDQUFDRyxTQUFVLElBQUdILEdBQUcsQ0FBQ1IsT0FBUSxJQUFHUSxHQUFHLENBQUNJLFNBQVUsRUFBQztFQUM3RDtBQUNKO0FBQ0FsQixtQkFBbUIsR0FBR0UsV0FBVyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3cy9jb21wYWN0L3NpZ24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbXBhY3RTaWduID0gdm9pZCAwO1xuY29uc3Qgc2lnbl9qc18xID0gcmVxdWlyZShcIi4uL2ZsYXR0ZW5lZC9zaWduLmpzXCIpO1xuY2xhc3MgQ29tcGFjdFNpZ24ge1xuICAgIGNvbnN0cnVjdG9yKHBheWxvYWQpIHtcbiAgICAgICAgdGhpcy5fZmxhdHRlbmVkID0gbmV3IHNpZ25fanNfMS5GbGF0dGVuZWRTaWduKHBheWxvYWQpO1xuICAgIH1cbiAgICBzZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKSB7XG4gICAgICAgIHRoaXMuX2ZsYXR0ZW5lZC5zZXRQcm90ZWN0ZWRIZWFkZXIocHJvdGVjdGVkSGVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24oa2V5LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGp3cyA9IGF3YWl0IHRoaXMuX2ZsYXR0ZW5lZC5zaWduKGtleSwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChqd3MucGF5bG9hZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1c2UgdGhlIGZsYXR0ZW5lZCBtb2R1bGUgZm9yIGNyZWF0aW5nIEpXUyB3aXRoIGI2NDogZmFsc2UnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7andzLnByb3RlY3RlZH0uJHtqd3MucGF5bG9hZH0uJHtqd3Muc2lnbmF0dXJlfWA7XG4gICAgfVxufVxuZXhwb3J0cy5Db21wYWN0U2lnbiA9IENvbXBhY3RTaWduO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ29tcGFjdFNpZ24iLCJzaWduX2pzXzEiLCJyZXF1aXJlIiwiY29uc3RydWN0b3IiLCJwYXlsb2FkIiwiX2ZsYXR0ZW5lZCIsIkZsYXR0ZW5lZFNpZ24iLCJzZXRQcm90ZWN0ZWRIZWFkZXIiLCJwcm90ZWN0ZWRIZWFkZXIiLCJzaWduIiwia2V5Iiwib3B0aW9ucyIsImp3cyIsInVuZGVmaW5lZCIsIlR5cGVFcnJvciIsInByb3RlY3RlZCIsInNpZ25hdHVyZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.compactVerify = void 0;\nconst verify_js_1 = __webpack_require__(/*! ../flattened/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nasync function compactVerify(jws, key, options) {\n  if (jws instanceof Uint8Array) {\n    jws = buffer_utils_js_1.decoder.decode(jws);\n  }\n  if (typeof jws !== 'string') {\n    throw new errors_js_1.JWSInvalid('Compact JWS must be a string or Uint8Array');\n  }\n  const {\n    0: protectedHeader,\n    1: payload,\n    2: signature,\n    length\n  } = jws.split('.');\n  if (length !== 3) {\n    throw new errors_js_1.JWSInvalid('Invalid Compact JWS');\n  }\n  const verified = await (0, verify_js_1.flattenedVerify)({\n    payload,\n    protected: protectedHeader,\n    signature\n  }, key, options);\n  const result = {\n    payload: verified.payload,\n    protectedHeader: verified.protectedHeader\n  };\n  if (typeof key === 'function') {\n    return _objectSpread(_objectSpread({}, result), {}, {\n      key: verified.key\n    });\n  }\n  return result;\n}\nexports.compactVerify = compactVerify;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3cy9jb21wYWN0L3ZlcmlmeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFBQSxTQUFBQSxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQSxPQUFBRyxNQUFBLENBQUFFLHFCQUFBLFFBQUFDLENBQUEsR0FBQUgsTUFBQSxDQUFBRSxxQkFBQSxDQUFBTCxDQUFBLEdBQUFDLENBQUEsS0FBQUssQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQU4sQ0FBQSxXQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFSLENBQUEsRUFBQUMsQ0FBQSxFQUFBUSxVQUFBLE9BQUFQLENBQUEsQ0FBQVEsSUFBQSxDQUFBQyxLQUFBLENBQUFULENBQUEsRUFBQUksQ0FBQSxZQUFBSixDQUFBO0FBQUEsU0FBQVUsY0FBQVosQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQVksU0FBQSxDQUFBQyxNQUFBLEVBQUFiLENBQUEsVUFBQUMsQ0FBQSxXQUFBVyxTQUFBLENBQUFaLENBQUEsSUFBQVksU0FBQSxDQUFBWixDQUFBLFFBQUFBLENBQUEsT0FBQUYsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsT0FBQWEsT0FBQSxXQUFBZCxDQUFBLElBQUFlLGVBQUEsQ0FBQWhCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUFELENBQUEsU0FBQUUsTUFBQSxDQUFBYyx5QkFBQSxHQUFBZCxNQUFBLENBQUFlLGdCQUFBLENBQUFsQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWMseUJBQUEsQ0FBQWYsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQUUsTUFBQSxDQUFBZ0IsY0FBQSxDQUFBbkIsQ0FBQSxFQUFBQyxDQUFBLEVB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R2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd3MvY29tcGFjdC92ZXJpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbXBhY3RWZXJpZnkgPSB2b2lkIDA7XG5jb25zdCB2ZXJpZnlfanNfMSA9IHJlcXVpcmUoXCIuLi9mbGF0dGVuZWQvdmVyaWZ5LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gY29tcGFjdFZlcmlmeShqd3MsIGtleSwgb3B0aW9ucykge1xuICAgIGlmIChqd3MgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgIGp3cyA9IGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKGp3cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgandzICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnQ29tcGFjdCBKV1MgbXVzdCBiZSBhIHN0cmluZyBvciBVaW50OEFycmF5Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgMDogcHJvdGVjdGVkSGVhZGVyLCAxOiBwYXlsb2FkLCAyOiBzaWduYXR1cmUsIGxlbmd0aCB9ID0gandzLnNwbGl0KCcuJyk7XG4gICAgaWYgKGxlbmd0aCAhPT0gMykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSW52YWxpZCBDb21wYWN0IEpXUycpO1xuICAgIH1cbiAgICBjb25zdCB2ZXJpZmllZCA9IGF3YWl0ICgwLCB2ZXJpZnlfanNfMS5mbGF0dGVuZWRWZXJpZnkpKHsgcGF5bG9hZCwgcHJvdGVjdGVkOiBwcm90ZWN0ZWRIZWFkZXIsIHNpZ25hdHVyZSB9LCBrZXksIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHsgcGF5bG9hZDogdmVyaWZpZWQucGF5bG9hZCwgcHJvdGVjdGVkSGVhZGVyOiB2ZXJpZmllZC5wcm90ZWN0ZWRIZWFkZXIgfTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4geyAuLi5yZXN1bHQsIGtleTogdmVyaWZpZWQua2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmNvbXBhY3RWZXJpZnkgPSBjb21wYWN0VmVyaWZ5O1xuIl0sIm5hbWVzIjpbIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiZXhwb3J0cyIsImNvbXBhY3RWZXJpZnkiLCJ2ZXJpZnlfanNfMSIsInJlcXVpcmUiLCJlcnJvcnNfanNfMSIsImJ1ZmZlcl91dGlsc19qc18xIiwiandzIiwib3B0aW9ucyIsIlVpbnQ4QXJyYXkiLCJkZWNvZGVyIiwiZGVjb2RlIiwiSldTSW52YWxpZCIsInByb3RlY3RlZEhlYWRlciIsInBheWxvYWQiLCJzaWduYXR1cmUiLCJzcGxpdCIsInZlcmlmaWVkIiwiZmxhdHRlbmVkVmVyaWZ5IiwicHJvdGVjdGVkIiwicmVzdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FlattenedSign = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst sign_js_1 = __webpack_require__(/*! ../../runtime/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst check_key_type_js_1 = __webpack_require__(/*! ../../lib/check_key_type.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nclass FlattenedSign {\n  constructor(payload) {\n    if (!(payload instanceof Uint8Array)) {\n      throw new TypeError('payload must be an instance of Uint8Array');\n    }\n    this._payload = payload;\n  }\n  setProtectedHeader(protectedHeader) {\n    if (this._protectedHeader) {\n      throw new TypeError('setProtectedHeader can only be called once');\n    }\n    this._protectedHeader = protectedHeader;\n    return this;\n  }\n  setUnprotectedHeader(unprotectedHeader) {\n    if (this._unprotectedHeader) {\n      throw new TypeError('setUnprotectedHeader can only be called once');\n    }\n    this._unprotectedHeader = unprotectedHeader;\n    return this;\n  }\n  async sign(key, options) {\n    if (!this._protectedHeader && !this._unprotectedHeader) {\n      throw new errors_js_1.JWSInvalid('either setProtectedHeader or setUnprotectedHeader must be called before #sign()');\n    }\n    if (!(0, is_disjoint_js_1.default)(this._protectedHeader, this._unprotectedHeader)) {\n      throw new errors_js_1.JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');\n    }\n    const joseHeader = _objectSpread(_objectSpread({}, this._protectedHeader), this._unprotectedHeader);\n    const extensions = (0, validate_crit_js_1.default)(errors_js_1.JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);\n    let b64 = true;\n    if (extensions.has('b64')) {\n      b64 = this._protectedHeader.b64;\n      if (typeof b64 !== 'boolean') {\n        throw new errors_js_1.JWSInvalid('The \"b64\" (base64url-encode payload) Header Parameter must be a boolean');\n      }\n    }\n    const {\n      alg\n    } = joseHeader;\n    if (typeof alg !== 'string' || !alg) {\n      throw new errors_js_1.JWSInvalid('JWS \"alg\" (Algorithm) Header Parameter missing or invalid');\n    }\n    (0, check_key_type_js_1.default)(alg, key, 'sign');\n    let payload = this._payload;\n    if (b64) {\n      payload = buffer_utils_js_1.encoder.encode((0, base64url_js_1.encode)(payload));\n    }\n    let protectedHeader;\n    if (this._protectedHeader) {\n      protectedHeader = buffer_utils_js_1.encoder.encode((0, base64url_js_1.encode)(JSON.stringify(this._protectedHeader)));\n    } else {\n      protectedHeader = buffer_utils_js_1.encoder.encode('');\n    }\n    const data = (0, buffer_utils_js_1.concat)(protectedHeader, buffer_utils_js_1.encoder.encode('.'), payload);\n    const signature = await (0, sign_js_1.default)(alg, key, data);\n    const jws = {\n      signature: (0, base64url_js_1.encode)(signature),\n      payload: ''\n    };\n    if (b64) {\n      jws.payload = buffer_utils_js_1.decoder.decode(payload);\n    }\n    if (this._unprotectedHeader) {\n      jws.header = this._unprotectedHeader;\n    }\n    if (this._protectedHeader) {\n      jws.protected = buffer_utils_js_1.decoder.decode(protectedHeader);\n    }\n    return jws;\n  }\n}\nexports.FlattenedSign = FlattenedSign;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.flattenedVerify = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst verify_js_1 = __webpack_require__(/*! ../../runtime/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/verify.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst is_disjoint_js_1 = __webpack_require__(/*! ../../lib/is_disjoint.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst check_key_type_js_1 = __webpack_require__(/*! ../../lib/check_key_type.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\");\nconst validate_crit_js_1 = __webpack_require__(/*! ../../lib/validate_crit.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\");\nconst validate_algorithms_js_1 = __webpack_require__(/*! ../../lib/validate_algorithms.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js\");\nasync function flattenedVerify(jws, key, options) {\n  var _a;\n  if (!(0, is_object_js_1.default)(jws)) {\n    throw new errors_js_1.JWSInvalid('Flattened JWS must be an object');\n  }\n  if (jws.protected === undefined && jws.header === undefined) {\n    throw new errors_js_1.JWSInvalid('Flattened JWS must have either of the \"protected\" or \"header\" members');\n  }\n  if (jws.protected !== undefined && typeof jws.protected !== 'string') {\n    throw new errors_js_1.JWSInvalid('JWS Protected Header incorrect type');\n  }\n  if (jws.payload === undefined) {\n    throw new errors_js_1.JWSInvalid('JWS Payload missing');\n  }\n  if (typeof jws.signature !== 'string') {\n    throw new errors_js_1.JWSInvalid('JWS Signature missing or incorrect type');\n  }\n  if (jws.header !== undefined && !(0, is_object_js_1.default)(jws.header)) {\n    throw new errors_js_1.JWSInvalid('JWS Unprotected Header incorrect type');\n  }\n  let parsedProt = {};\n  if (jws.protected) {\n    try {\n      const protectedHeader = (0, base64url_js_1.decode)(jws.protected);\n      parsedProt = JSON.parse(buffer_utils_js_1.decoder.decode(protectedHeader));\n    } catch {\n      throw new errors_js_1.JWSInvalid('JWS Protected Header is invalid');\n    }\n  }\n  if (!(0, is_disjoint_js_1.default)(parsedProt, jws.header)) {\n    throw new errors_js_1.JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');\n  }\n  const joseHeader = _objectSpread(_objectSpread({}, parsedProt), jws.header);\n  const extensions = (0, validate_crit_js_1.default)(errors_js_1.JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);\n  let b64 = true;\n  if (extensions.has('b64')) {\n    b64 = parsedProt.b64;\n    if (typeof b64 !== 'boolean') {\n      throw new errors_js_1.JWSInvalid('The \"b64\" (base64url-encode payload) Header Parameter must be a boolean');\n    }\n  }\n  const {\n    alg\n  } = joseHeader;\n  if (typeof alg !== 'string' || !alg) {\n    throw new errors_js_1.JWSInvalid('JWS \"alg\" (Algorithm) Header Parameter missing or invalid');\n  }\n  const algorithms = options && (0, validate_algorithms_js_1.default)('algorithms', options.algorithms);\n  if (algorithms && !algorithms.has(alg)) {\n    throw new errors_js_1.JOSEAlgNotAllowed('\"alg\" (Algorithm) Header Parameter not allowed');\n  }\n  if (b64) {\n    if (typeof jws.payload !== 'string') {\n      throw new errors_js_1.JWSInvalid('JWS Payload must be a string');\n    }\n  } else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) {\n    throw new errors_js_1.JWSInvalid('JWS Payload must be a string or an Uint8Array instance');\n  }\n  let resolvedKey = false;\n  if (typeof key === 'function') {\n    key = await key(parsedProt, jws);\n    resolvedKey = true;\n  }\n  (0, check_key_type_js_1.default)(alg, key, 'verify');\n  const data = (0, buffer_utils_js_1.concat)(buffer_utils_js_1.encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ''), buffer_utils_js_1.encoder.encode('.'), typeof jws.payload === 'string' ? buffer_utils_js_1.encoder.encode(jws.payload) : jws.payload);\n  let signature;\n  try {\n    signature = (0, base64url_js_1.decode)(jws.signature);\n  } catch {\n    throw new errors_js_1.JWSInvalid('Failed to base64url decode the signature');\n  }\n  const verified = await (0, verify_js_1.default)(alg, key, signature, data);\n  if (!verified) {\n    throw new errors_js_1.JWSSignatureVerificationFailed();\n  }\n  let payload;\n  if (b64) {\n    try {\n      payload = (0, base64url_js_1.decode)(jws.payload);\n    } catch {\n      throw new errors_js_1.JWSInvalid('Failed to base64url decode the payload');\n    }\n  } else if (typeof jws.payload === 'string') {\n    payload = buffer_utils_js_1.encoder.encode(jws.payload);\n  } else {\n    payload = jws.payload;\n  }\n  const result = {\n    payload\n  };\n  if (jws.protected !== undefined) {\n    result.protectedHeader = parsedProt;\n  }\n  if (jws.header !== undefined) {\n    result.unprotectedHeader = jws.header;\n  }\n  if (resolvedKey) {\n    return _objectSpread(_objectSpread({}, result), {}, {\n      key\n    });\n  }\n  return result;\n}\nexports.flattenedVerify = flattenedVerify;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/sign.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/sign.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst _excluded = [\"payload\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.GeneralSign = void 0;\nconst sign_js_1 = __webpack_require__(/*! ../flattened/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/sign.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nclass IndividualSignature {\n  constructor(sig, key, options) {\n    this.parent = sig;\n    this.key = key;\n    this.options = options;\n  }\n  setProtectedHeader(protectedHeader) {\n    if (this.protectedHeader) {\n      throw new TypeError('setProtectedHeader can only be called once');\n    }\n    this.protectedHeader = protectedHeader;\n    return this;\n  }\n  setUnprotectedHeader(unprotectedHeader) {\n    if (this.unprotectedHeader) {\n      throw new TypeError('setUnprotectedHeader can only be called once');\n    }\n    this.unprotectedHeader = unprotectedHeader;\n    return this;\n  }\n  addSignature(...args) {\n    return this.parent.addSignature(...args);\n  }\n  sign(...args) {\n    return this.parent.sign(...args);\n  }\n  done() {\n    return this.parent;\n  }\n}\nclass GeneralSign {\n  constructor(payload) {\n    this._signatures = [];\n    this._payload = payload;\n  }\n  addSignature(key, options) {\n    const signature = new IndividualSignature(this, key, options);\n    this._signatures.push(signature);\n    return signature;\n  }\n  async sign() {\n    if (!this._signatures.length) {\n      throw new errors_js_1.JWSInvalid('at least one signature must be added');\n    }\n    const jws = {\n      signatures: [],\n      payload: ''\n    };\n    for (let i = 0; i < this._signatures.length; i++) {\n      const signature = this._signatures[i];\n      const flattened = new sign_js_1.FlattenedSign(this._payload);\n      flattened.setProtectedHeader(signature.protectedHeader);\n      flattened.setUnprotectedHeader(signature.unprotectedHeader);\n      const _await$flattened$sign = await flattened.sign(signature.key, signature.options),\n        {\n          payload\n        } = _await$flattened$sign,\n        rest = _objectWithoutProperties(_await$flattened$sign, _excluded);\n      if (i === 0) {\n        jws.payload = payload;\n      } else if (jws.payload !== payload) {\n        throw new errors_js_1.JWSInvalid('inconsistent use of JWS Unencoded Payload (RFC7797)');\n      }\n      jws.signatures.push(rest);\n    }\n    return jws;\n  }\n}\nexports.GeneralSign = GeneralSign;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/verify.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/verify.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.generalVerify = void 0;\nconst verify_js_1 = __webpack_require__(/*! ../flattened/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/flattened/verify.js\");\nconst errors_js_1 = __webpack_require__(/*! ../../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nasync function generalVerify(jws, key, options) {\n  if (!(0, is_object_js_1.default)(jws)) {\n    throw new errors_js_1.JWSInvalid('General JWS must be an object');\n  }\n  if (!Array.isArray(jws.signatures) || !jws.signatures.every(is_object_js_1.default)) {\n    throw new errors_js_1.JWSInvalid('JWS Signatures missing or incorrect type');\n  }\n  for (const signature of jws.signatures) {\n    try {\n      return await (0, verify_js_1.flattenedVerify)({\n        header: signature.header,\n        payload: jws.payload,\n        protected: signature.protected,\n        signature: signature.signature\n      }, key, options);\n    } catch {}\n  }\n  throw new errors_js_1.JWSSignatureVerificationFailed();\n}\nexports.generalVerify = generalVerify;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3cy9nZW5lcmFsL3ZlcmlmeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSyxDQUFDO0FBQzlCLE1BQU1HLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQywwSEFBd0IsQ0FBQztBQUNyRCxNQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsK0dBQXNCLENBQUM7QUFDbkQsTUFBTUUsY0FBYyxHQUFHRixtQkFBTyxDQUFDLG1IQUF3QixDQUFDO0FBQ3hELGVBQWVGLGFBQWFBLENBQUNLLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxPQUFPLEVBQUU7RUFDNUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFSCxjQUFjLENBQUNJLE9BQU8sRUFBRUgsR0FBRyxDQUFDLEVBQUU7SUFDbkMsTUFBTSxJQUFJRixXQUFXLENBQUNNLFVBQVUsQ0FBQywrQkFBK0IsQ0FBQztFQUNyRTtFQUNBLElBQUksQ0FBQ0MsS0FBSyxDQUFDQyxPQUFPLENBQUNOLEdBQUcsQ0FBQ08sVUFBVSxDQUFDLElBQUksQ0FBQ1AsR0FBRyxDQUFDTyxVQUFVLENBQUNDLEtBQUssQ0FBQ1QsY0FBYyxDQUFDSSxPQUFPLENBQUMsRUFBRTtJQUNqRixNQUFNLElBQUlMLFdBQVcsQ0FBQ00sVUFBVSxDQUFDLDBDQUEwQyxDQUFDO0VBQ2hGO0VBQ0EsS0FBSyxNQUFNSyxTQUFTLElBQUlULEdBQUcsQ0FBQ08sVUFBVSxFQUFFO0lBQ3BDLElBQUk7TUFDQSxPQUFPLE1BQU0sQ0FBQyxDQUFDLEVBQUVYLFdBQVcsQ0FBQ2MsZUFBZSxFQUFFO1FBQzFDQyxNQUFNLEVBQUVGLFNBQVMsQ0FBQ0UsTUFBTTtRQUN4QkMsT0FBTyxFQUFFWixHQUFHLENBQUNZLE9BQU87UUFDcEJDLFNBQVMsRUFBRUosU0FBUyxDQUFDSSxTQUFTO1FBQzlCSixTQUFTLEVBQUVBLFNBQVMsQ0FBQ0E7TUFDekIsQ0FBQyxFQUFFUixHQUFHLEVBQUVDLE9BQU8sQ0FBQztJQUNwQixDQUFDLENBQ0QsTUFBTSxDQUNOO0VBQ0o7RUFDQSxNQUFNLElBQUlKLFdBQVcsQ0FBQ2dCLDhCQUE4QixDQUFDLENBQUM7QUFDMUQ7QUFDQXJCLHFCQUFxQixHQUFHRSxhQUFhIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvandzL2dlbmVyYWwvdmVyaWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZW5lcmFsVmVyaWZ5ID0gdm9pZCAwO1xuY29uc3QgdmVyaWZ5X2pzXzEgPSByZXF1aXJlKFwiLi4vZmxhdHRlbmVkL3ZlcmlmeS5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uLy4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgaXNfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vbGliL2lzX29iamVjdC5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYWxWZXJpZnkoandzLCBrZXksIG9wdGlvbnMpIHtcbiAgICBpZiAoISgwLCBpc19vYmplY3RfanNfMS5kZWZhdWx0KShqd3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NJbnZhbGlkKCdHZW5lcmFsIEpXUyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoandzLnNpZ25hdHVyZXMpIHx8ICFqd3Muc2lnbmF0dXJlcy5ldmVyeShpc19vYmplY3RfanNfMS5kZWZhdWx0KSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldTSW52YWxpZCgnSldTIFNpZ25hdHVyZXMgbWlzc2luZyBvciBpbmNvcnJlY3QgdHlwZScpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHNpZ25hdHVyZSBvZiBqd3Muc2lnbmF0dXJlcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0ICgwLCB2ZXJpZnlfanNfMS5mbGF0dGVuZWRWZXJpZnkpKHtcbiAgICAgICAgICAgICAgICBoZWFkZXI6IHNpZ25hdHVyZS5oZWFkZXIsXG4gICAgICAgICAgICAgICAgcGF5bG9hZDogandzLnBheWxvYWQsXG4gICAgICAgICAgICAgICAgcHJvdGVjdGVkOiBzaWduYXR1cmUucHJvdGVjdGVkLFxuICAgICAgICAgICAgICAgIHNpZ25hdHVyZTogc2lnbmF0dXJlLnNpZ25hdHVyZSxcbiAgICAgICAgICAgIH0sIGtleSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1NTaWduYXR1cmVWZXJpZmljYXRpb25GYWlsZWQoKTtcbn1cbmV4cG9ydHMuZ2VuZXJhbFZlcmlmeSA9IGdlbmVyYWxWZXJpZnk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZW5lcmFsVmVyaWZ5IiwidmVyaWZ5X2pzXzEiLCJyZXF1aXJlIiwiZXJyb3JzX2pzXzEiLCJpc19vYmplY3RfanNfMSIsImp3cyIsImtleSIsIm9wdGlvbnMiLCJkZWZhdWx0IiwiSldTSW52YWxpZCIsIkFycmF5IiwiaXNBcnJheSIsInNpZ25hdHVyZXMiLCJldmVyeSIsInNpZ25hdHVyZSIsImZsYXR0ZW5lZFZlcmlmeSIsImhlYWRlciIsInBheWxvYWQiLCJwcm90ZWN0ZWQiLCJKV1NTaWduYXR1cmVWZXJpZmljYXRpb25GYWlsZWQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/general/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/decrypt.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/decrypt.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.jwtDecrypt = void 0;\nconst decrypt_js_1 = __webpack_require__(/*! ../jwe/compact/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/decrypt.js\");\nconst jwt_claims_set_js_1 = __webpack_require__(/*! ../lib/jwt_claims_set.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nasync function jwtDecrypt(jwt, key, options) {\n  const decrypted = await (0, decrypt_js_1.compactDecrypt)(jwt, key, options);\n  const payload = (0, jwt_claims_set_js_1.default)(decrypted.protectedHeader, decrypted.plaintext, options);\n  const {\n    protectedHeader\n  } = decrypted;\n  if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {\n    throw new errors_js_1.JWTClaimValidationFailed('replicated \"iss\" claim header parameter mismatch', 'iss', 'mismatch');\n  }\n  if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {\n    throw new errors_js_1.JWTClaimValidationFailed('replicated \"sub\" claim header parameter mismatch', 'sub', 'mismatch');\n  }\n  if (protectedHeader.aud !== undefined && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {\n    throw new errors_js_1.JWTClaimValidationFailed('replicated \"aud\" claim header parameter mismatch', 'aud', 'mismatch');\n  }\n  const result = {\n    payload,\n    protectedHeader\n  };\n  if (typeof key === 'function') {\n    return _objectSpread(_objectSpread({}, result), {}, {\n      key: decrypted.key\n    });\n  }\n  return result;\n}\nexports.jwtDecrypt = jwtDecrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC9kZWNyeXB0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUFBLFNBQUFBLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQWUsZUFBQSxDQUFBaEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxTQUFBRSxNQUFBLENBQUFjLHlCQUFBLEdBQUFkLE1BQUEsQ0FBQWUsZ0JBQUEsQ0FBQWxCLENBQUEsRUFBQUcsTUFBQSxDQUFBYyx5QkFBQSxDQUFBZixDQUFBLEtBQUFILE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLEdBQUFhLE9BQUEsV0FBQWQsQ0FBQSxJQUFBRSxNQUFBLENBQUFnQixjQUFBLENBQUFuQixDQUFBLEVBQUFDLENBQUEsRUFBQUUsTUFB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RUFDM0MsSUFBSSxPQUFPOUIsR0FBRyxLQUFLLFVBQVUsRUFBRTtJQUMzQixPQUFBVCxhQUFBLENBQUFBLGFBQUEsS0FBWStDLE1BQU07TUFBRXRDLEdBQUcsRUFBRTBCLFNBQVMsQ0FBQzFCO0lBQUc7RUFDMUM7RUFDQSxPQUFPc0MsTUFBTTtBQUNqQjtBQUNBcEIsa0JBQWtCLEdBQUdDLFVBQVUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd3QvZGVjcnlwdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuand0RGVjcnlwdCA9IHZvaWQgMDtcbmNvbnN0IGRlY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi9qd2UvY29tcGFjdC9kZWNyeXB0LmpzXCIpO1xuY29uc3Qgand0X2NsYWltc19zZXRfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvand0X2NsYWltc19zZXQuanNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGp3dERlY3J5cHQoand0LCBrZXksIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkZWNyeXB0ZWQgPSBhd2FpdCAoMCwgZGVjcnlwdF9qc18xLmNvbXBhY3REZWNyeXB0KShqd3QsIGtleSwgb3B0aW9ucyk7XG4gICAgY29uc3QgcGF5bG9hZCA9ICgwLCBqd3RfY2xhaW1zX3NldF9qc18xLmRlZmF1bHQpKGRlY3J5cHRlZC5wcm90ZWN0ZWRIZWFkZXIsIGRlY3J5cHRlZC5wbGFpbnRleHQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHsgcHJvdGVjdGVkSGVhZGVyIH0gPSBkZWNyeXB0ZWQ7XG4gICAgaWYgKHByb3RlY3RlZEhlYWRlci5pc3MgIT09IHVuZGVmaW5lZCAmJiBwcm90ZWN0ZWRIZWFkZXIuaXNzICE9PSBwYXlsb2FkLmlzcykge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdyZXBsaWNhdGVkIFwiaXNzXCIgY2xhaW0gaGVhZGVyIHBhcmFtZXRlciBtaXNtYXRjaCcsICdpc3MnLCAnbWlzbWF0Y2gnKTtcbiAgICB9XG4gICAgaWYgKHByb3RlY3RlZEhlYWRlci5zdWIgIT09IHVuZGVmaW5lZCAmJiBwcm90ZWN0ZWRIZWFkZXIuc3ViICE9PSBwYXlsb2FkLnN1Yikge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdyZXBsaWNhdGVkIFwic3ViXCIgY2xhaW0gaGVhZGVyIHBhcmFtZXRlciBtaXNtYXRjaCcsICdzdWInLCAnbWlzbWF0Y2gnKTtcbiAgICB9XG4gICAgaWYgKHByb3RlY3RlZEhlYWRlci5hdWQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBKU09OLnN0cmluZ2lmeShwcm90ZWN0ZWRIZWFkZXIuYXVkKSAhPT0gSlNPTi5zdHJpbmdpZnkocGF5bG9hZC5hdWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3JlcGxpY2F0ZWQgXCJhdWRcIiBjbGFpbSBoZWFkZXIgcGFyYW1ldGVyIG1pc21hdGNoJywgJ2F1ZCcsICdtaXNtYXRjaCcpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSB7IHBheWxvYWQsIHByb3RlY3RlZEhlYWRlciB9O1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB7IC4uLnJlc3VsdCwga2V5OiBkZWNyeXB0ZWQua2V5IH07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmp3dERlY3J5cHQgPSBqd3REZWNyeXB0O1xuIl0sIm5hbWVzIjpbIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiZXhwb3J0cyIsImp3dERlY3J5cHQiLCJkZWNyeXB0X2pzXzEiLCJyZXF1aXJlIiwiand0X2NsYWltc19zZXRfanNfMSIsImVycm9yc19qc18xIiwiand0Iiwib3B0aW9ucyIsImRlY3J5cHRlZCIsImNvbXBhY3REZWNyeXB0IiwicGF5bG9hZCIsImRlZmF1bHQiLCJwcm90ZWN0ZWRIZWFkZXIiLCJwbGFpbnRleHQiLCJpc3MiLCJKV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQiLCJzdWIiLCJhdWQiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/encrypt.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/encrypt.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.EncryptJWT = void 0;\nconst encrypt_js_1 = __webpack_require__(/*! ../jwe/compact/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwe/compact/encrypt.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst produce_js_1 = __webpack_require__(/*! ./produce.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js\");\nclass EncryptJWT extends produce_js_1.ProduceJWT {\n  setProtectedHeader(protectedHeader) {\n    if (this._protectedHeader) {\n      throw new TypeError('setProtectedHeader can only be called once');\n    }\n    this._protectedHeader = protectedHeader;\n    return this;\n  }\n  setKeyManagementParameters(parameters) {\n    if (this._keyManagementParameters) {\n      throw new TypeError('setKeyManagementParameters can only be called once');\n    }\n    this._keyManagementParameters = parameters;\n    return this;\n  }\n  setContentEncryptionKey(cek) {\n    if (this._cek) {\n      throw new TypeError('setContentEncryptionKey can only be called once');\n    }\n    this._cek = cek;\n    return this;\n  }\n  setInitializationVector(iv) {\n    if (this._iv) {\n      throw new TypeError('setInitializationVector can only be called once');\n    }\n    this._iv = iv;\n    return this;\n  }\n  replicateIssuerAsHeader() {\n    this._replicateIssuerAsHeader = true;\n    return this;\n  }\n  replicateSubjectAsHeader() {\n    this._replicateSubjectAsHeader = true;\n    return this;\n  }\n  replicateAudienceAsHeader() {\n    this._replicateAudienceAsHeader = true;\n    return this;\n  }\n  async encrypt(key, options) {\n    const enc = new encrypt_js_1.CompactEncrypt(buffer_utils_js_1.encoder.encode(JSON.stringify(this._payload)));\n    if (this._replicateIssuerAsHeader) {\n      this._protectedHeader = _objectSpread(_objectSpread({}, this._protectedHeader), {}, {\n        iss: this._payload.iss\n      });\n    }\n    if (this._replicateSubjectAsHeader) {\n      this._protectedHeader = _objectSpread(_objectSpread({}, this._protectedHeader), {}, {\n        sub: this._payload.sub\n      });\n    }\n    if (this._replicateAudienceAsHeader) {\n      this._protectedHeader = _objectSpread(_objectSpread({}, this._protectedHeader), {}, {\n        aud: this._payload.aud\n      });\n    }\n    enc.setProtectedHeader(this._protectedHeader);\n    if (this._iv) {\n      enc.setInitializationVector(this._iv);\n    }\n    if (this._cek) {\n      enc.setContentEncryptionKey(this._cek);\n    }\n    if (this._keyManagementParameters) {\n      enc.setKeyManagementParameters(this._keyManagementParameters);\n    }\n    return enc.encrypt(key, options);\n  }\n}\nexports.EncryptJWT = EncryptJWT;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ProduceJWT = void 0;\nconst epoch_js_1 = __webpack_require__(/*! ../lib/epoch.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst secs_js_1 = __webpack_require__(/*! ../lib/secs.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js\");\nclass ProduceJWT {\n  constructor(payload) {\n    if (!(0, is_object_js_1.default)(payload)) {\n      throw new TypeError('JWT Claims Set MUST be an object');\n    }\n    this._payload = payload;\n  }\n  setIssuer(issuer) {\n    this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n      iss: issuer\n    });\n    return this;\n  }\n  setSubject(subject) {\n    this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n      sub: subject\n    });\n    return this;\n  }\n  setAudience(audience) {\n    this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n      aud: audience\n    });\n    return this;\n  }\n  setJti(jwtId) {\n    this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n      jti: jwtId\n    });\n    return this;\n  }\n  setNotBefore(input) {\n    if (typeof input === 'number') {\n      this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n        nbf: input\n      });\n    } else {\n      this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n        nbf: (0, epoch_js_1.default)(new Date()) + (0, secs_js_1.default)(input)\n      });\n    }\n    return this;\n  }\n  setExpirationTime(input) {\n    if (typeof input === 'number') {\n      this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n        exp: input\n      });\n    } else {\n      this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n        exp: (0, epoch_js_1.default)(new Date()) + (0, secs_js_1.default)(input)\n      });\n    }\n    return this;\n  }\n  setIssuedAt(input) {\n    if (typeof input === 'undefined') {\n      this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n        iat: (0, epoch_js_1.default)(new Date())\n      });\n    } else {\n      this._payload = _objectSpread(_objectSpread({}, this._payload), {}, {\n        iat: input\n      });\n    }\n    return this;\n  }\n}\nexports.ProduceJWT = ProduceJWT;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC9wcm9kdWNlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUFBLFNBQUFBLFFBQUFDLENBQUEsRUFBQUMsQ0FBQSxRQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBSixDQUFBLE9BQUFHLE1BQUEsQ0FBQUUscUJBQUEsUUFBQUMsQ0FBQSxHQUFBSCxNQUFBLENBQUFFLHFCQUFBLENBQUFMLENBQUEsR0FBQUMsQ0FBQSxLQUFBSyxDQUFBLEdBQUFBLENBQUEsQ0FBQUMsTUFBQSxXQUFBTixDQUFBLFdBQUFFLE1BQUEsQ0FBQUssd0JBQUEsQ0FBQVIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFRLFVBQUEsT0FBQVAsQ0FBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsQ0FBQSxFQUFBSSxDQUFBLFlBQUFKLENBQUE7QUFBQSxTQUFBVSxjQUFBWixDQUFBLGFBQUFDLENBQUEsTUFBQUEsQ0FBQSxHQUFBWSxTQUFBLENBQUFDLE1BQUEsRUFBQWIsQ0FBQSxVQUFBQyxDQUFBLFdBQUFXLFNBQUEsQ0FBQVosQ0FBQSxJQUFBWSxTQUFBLENBQUFaLENBQUEsUUFBQUEsQ0FBQSxPQUFBRixPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxPQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQWUsZUFBQSxDQUFBaEIsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxTQUFBRSxNQUFBLENBQUFjLHlCQUFBLEdBQUFkLE1BQUEsQ0FBQWUsZ0JBQUEsQ0FBQWxCLENBQUEsRUFBQUcsTUFBQSxDQUFBYyx5QkFBQSxDQUFBZixDQUFBLEtBQUFILE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLEdBQUFhLE9BQUEsV0FBQWQsQ0FBQSxJQUFBRSxNQUFBLENBQUFnQixjQUFBLENBQUFuQixDQUFBLEVBQUFDLENBQUEsRUFBQUUsTUFB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RTtJQUNsRixDQUFDLE1BQ0k7TUFDRCxJQUFJLENBQUNmLFFBQVEsR0FBQXBDLGFBQUEsQ0FBQUEsYUFBQSxLQUFRLElBQUksQ0FBQ29DLFFBQVE7UUFBRW1CLEdBQUcsRUFBRXRDO01BQUssRUFBRTtJQUNwRDtJQUNBLE9BQU8sSUFBSTtFQUNmO0FBQ0o7QUFDQVUsa0JBQWtCLEdBQUdDLFVBQVUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd3QvcHJvZHVjZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUHJvZHVjZUpXVCA9IHZvaWQgMDtcbmNvbnN0IGVwb2NoX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2Vwb2NoLmpzXCIpO1xuY29uc3QgaXNfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2lzX29iamVjdC5qc1wiKTtcbmNvbnN0IHNlY3NfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvc2Vjcy5qc1wiKTtcbmNsYXNzIFByb2R1Y2VKV1Qge1xuICAgIGNvbnN0cnVjdG9yKHBheWxvYWQpIHtcbiAgICAgICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkocGF5bG9hZCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0pXVCBDbGFpbXMgU2V0IE1VU1QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHBheWxvYWQ7XG4gICAgfVxuICAgIHNldElzc3Vlcihpc3N1ZXIpIHtcbiAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgaXNzOiBpc3N1ZXIgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldFN1YmplY3Qoc3ViamVjdCkge1xuICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBzdWI6IHN1YmplY3QgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldEF1ZGllbmNlKGF1ZGllbmNlKSB7XG4gICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIGF1ZDogYXVkaWVuY2UgfTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldEp0aShqd3RJZCkge1xuICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBqdGk6IGp3dElkIH07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXROb3RCZWZvcmUoaW5wdXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIG5iZjogaW5wdXQgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3BheWxvYWQgPSB7IC4uLnRoaXMuX3BheWxvYWQsIG5iZjogKDAsIGVwb2NoX2pzXzEuZGVmYXVsdCkobmV3IERhdGUoKSkgKyAoMCwgc2Vjc19qc18xLmRlZmF1bHQpKGlucHV0KSB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBzZXRFeHBpcmF0aW9uVGltZShpbnB1dCkge1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgZXhwOiBpbnB1dCB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGF5bG9hZCA9IHsgLi4udGhpcy5fcGF5bG9hZCwgZXhwOiAoMCwgZXBvY2hfanNfMS5kZWZhdWx0KShuZXcgRGF0ZSgpKSArICgwLCBzZWNzX2pzXzEuZGVmYXVsdCkoaW5wdXQpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHNldElzc3VlZEF0KGlucHV0KSB7XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBpYXQ6ICgwLCBlcG9jaF9qc18xLmRlZmF1bHQpKG5ldyBEYXRlKCkpIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wYXlsb2FkID0geyAuLi50aGlzLl9wYXlsb2FkLCBpYXQ6IGlucHV0IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuZXhwb3J0cy5Qcm9kdWNlSldUID0gUHJvZHVjZUpXVDtcbiJdLCJuYW1lcyI6WyJvd25LZXlzIiwiZSIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm8iLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5Iiwib2JqIiwia2V5IiwidmFsdWUiLCJfdG9Qcm9wZXJ0eUtleSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiYXJnIiwiX3RvUHJpbWl0aXZlIiwiU3RyaW5nIiwiaW5wdXQiLCJoaW50IiwicHJpbSIsIlN5bWJvbCIsInRvUHJpbWl0aXZlIiwidW5kZWZpbmVkIiwicmVzIiwiY2FsbCIsIlR5cGVFcnJvciIsIk51bWJlciIsImV4cG9ydHMiLCJQcm9kdWNlSldUIiwiZXBvY2hfanNfMSIsInJlcXVpcmUiLCJpc19vYmplY3RfanNfMSIsInNlY3NfanNfMSIsImNvbnN0cnVjdG9yIiwicGF5bG9hZCIsImRlZmF1bHQiLCJfcGF5bG9hZCIsInNldElzc3VlciIsImlzc3VlciIsImlzcyIsInNldFN1YmplY3QiLCJzdWJqZWN0Iiwic3ViIiwic2V0QXVkaWVuY2UiLCJhdWRpZW5jZSIsImF1ZCIsInNldEp0aSIsImp3dElkIiwianRpIiwic2V0Tm90QmVmb3JlIiwibmJmIiwiRGF0ZSIsInNldEV4cGlyYXRpb25UaW1lIiwiZXhwIiwic2V0SXNzdWVkQXQiLCJpYXQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/sign.js":
/*!********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/sign.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SignJWT = void 0;\nconst sign_js_1 = __webpack_require__(/*! ../jws/compact/sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/sign.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst produce_js_1 = __webpack_require__(/*! ./produce.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js\");\nclass SignJWT extends produce_js_1.ProduceJWT {\n  setProtectedHeader(protectedHeader) {\n    this._protectedHeader = protectedHeader;\n    return this;\n  }\n  async sign(key, options) {\n    var _a;\n    const sig = new sign_js_1.CompactSign(buffer_utils_js_1.encoder.encode(JSON.stringify(this._payload)));\n    sig.setProtectedHeader(this._protectedHeader);\n    if (Array.isArray((_a = this._protectedHeader) === null || _a === void 0 ? void 0 : _a.crit) && this._protectedHeader.crit.includes('b64') && this._protectedHeader.b64 === false) {\n      throw new errors_js_1.JWTInvalid('JWTs MUST NOT use unencoded payload');\n    }\n    return sig.sign(key, options);\n  }\n}\nexports.SignJWT = SignJWT;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC9zaWduLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLE1BQU1HLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxzSEFBd0IsQ0FBQztBQUNuRCxNQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsNEdBQW1CLENBQUM7QUFDaEQsTUFBTUUsaUJBQWlCLEdBQUdGLG1CQUFPLENBQUMsc0hBQXdCLENBQUM7QUFDM0QsTUFBTUcsWUFBWSxHQUFHSCxtQkFBTyxDQUFDLHVHQUFjLENBQUM7QUFDNUMsTUFBTUYsT0FBTyxTQUFTSyxZQUFZLENBQUNDLFVBQVUsQ0FBQztFQUMxQ0Msa0JBQWtCQSxDQUFDQyxlQUFlLEVBQUU7SUFDaEMsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR0QsZUFBZTtJQUN2QyxPQUFPLElBQUk7RUFDZjtFQUNBLE1BQU1FLElBQUlBLENBQUNDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO0lBQ3JCLElBQUlDLEVBQUU7SUFDTixNQUFNQyxHQUFHLEdBQUcsSUFBSWIsU0FBUyxDQUFDYyxXQUFXLENBQUNYLGlCQUFpQixDQUFDWSxPQUFPLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUMsSUFBSSxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3RHTixHQUFHLENBQUNQLGtCQUFrQixDQUFDLElBQUksQ0FBQ0UsZ0JBQWdCLENBQUM7SUFDN0MsSUFBSVksS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQ1QsRUFBRSxHQUFHLElBQUksQ0FBQ0osZ0JBQWdCLE1BQU0sSUFBSSxJQUFJSSxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQ1UsSUFBSSxDQUFDLElBQ3hGLElBQUksQ0FBQ2QsZ0JBQWdCLENBQUNjLElBQUksQ0FBQ0MsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUMxQyxJQUFJLENBQUNmLGdCQUFnQixDQUFDZ0IsR0FBRyxLQUFLLEtBQUssRUFBRTtNQUNyQyxNQUFNLElBQUl0QixXQUFXLENBQUN1QixVQUFVLENBQUMscUNBQXFDLENBQUM7SUFDM0U7SUFDQSxPQUFPWixHQUFHLENBQUNKLElBQUksQ0FBQ0MsR0FBRyxFQUFFQyxPQUFPLENBQUM7RUFDakM7QUFDSjtBQUNBZCxlQUFlLEdBQUdFLE9BQU8iLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd3Qvc2lnbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2lnbkpXVCA9IHZvaWQgMDtcbmNvbnN0IHNpZ25fanNfMSA9IHJlcXVpcmUoXCIuLi9qd3MvY29tcGFjdC9zaWduLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgcHJvZHVjZV9qc18xID0gcmVxdWlyZShcIi4vcHJvZHVjZS5qc1wiKTtcbmNsYXNzIFNpZ25KV1QgZXh0ZW5kcyBwcm9kdWNlX2pzXzEuUHJvZHVjZUpXVCB7XG4gICAgc2V0UHJvdGVjdGVkSGVhZGVyKHByb3RlY3RlZEhlYWRlcikge1xuICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIgPSBwcm90ZWN0ZWRIZWFkZXI7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhc3luYyBzaWduKGtleSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IHNpZyA9IG5ldyBzaWduX2pzXzEuQ29tcGFjdFNpZ24oYnVmZmVyX3V0aWxzX2pzXzEuZW5jb2Rlci5lbmNvZGUoSlNPTi5zdHJpbmdpZnkodGhpcy5fcGF5bG9hZCkpKTtcbiAgICAgICAgc2lnLnNldFByb3RlY3RlZEhlYWRlcih0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSgoX2EgPSB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jcml0KSAmJlxuICAgICAgICAgICAgdGhpcy5fcHJvdGVjdGVkSGVhZGVyLmNyaXQuaW5jbHVkZXMoJ2I2NCcpICYmXG4gICAgICAgICAgICB0aGlzLl9wcm90ZWN0ZWRIZWFkZXIuYjY0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0pXVHMgTVVTVCBOT1QgdXNlIHVuZW5jb2RlZCBwYXlsb2FkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNpZy5zaWduKGtleSwgb3B0aW9ucyk7XG4gICAgfVxufVxuZXhwb3J0cy5TaWduSldUID0gU2lnbkpXVDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlNpZ25KV1QiLCJzaWduX2pzXzEiLCJyZXF1aXJlIiwiZXJyb3JzX2pzXzEiLCJidWZmZXJfdXRpbHNfanNfMSIsInByb2R1Y2VfanNfMSIsIlByb2R1Y2VKV1QiLCJzZXRQcm90ZWN0ZWRIZWFkZXIiLCJwcm90ZWN0ZWRIZWFkZXIiLCJfcHJvdGVjdGVkSGVhZGVyIiwic2lnbiIsImtleSIsIm9wdGlvbnMiLCJfYSIsInNpZyIsIkNvbXBhY3RTaWduIiwiZW5jb2RlciIsImVuY29kZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJfcGF5bG9hZCIsIkFycmF5IiwiaXNBcnJheSIsImNyaXQiLCJpbmNsdWRlcyIsImI2NCIsIkpXVEludmFsaWQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/unsecured.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/unsecured.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.UnsecuredJWT = void 0;\nconst base64url = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst jwt_claims_set_js_1 = __webpack_require__(/*! ../lib/jwt_claims_set.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js\");\nconst produce_js_1 = __webpack_require__(/*! ./produce.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/produce.js\");\nclass UnsecuredJWT extends produce_js_1.ProduceJWT {\n  encode() {\n    const header = base64url.encode(JSON.stringify({\n      alg: 'none'\n    }));\n    const payload = base64url.encode(JSON.stringify(this._payload));\n    return `${header}.${payload}.`;\n  }\n  static decode(jwt, options) {\n    if (typeof jwt !== 'string') {\n      throw new errors_js_1.JWTInvalid('Unsecured JWT must be a string');\n    }\n    const {\n      0: encodedHeader,\n      1: encodedPayload,\n      2: signature,\n      length\n    } = jwt.split('.');\n    if (length !== 3 || signature !== '') {\n      throw new errors_js_1.JWTInvalid('Invalid Unsecured JWT');\n    }\n    let header;\n    try {\n      header = JSON.parse(buffer_utils_js_1.decoder.decode(base64url.decode(encodedHeader)));\n      if (header.alg !== 'none') throw new Error();\n    } catch {\n      throw new errors_js_1.JWTInvalid('Invalid Unsecured JWT');\n    }\n    const payload = (0, jwt_claims_set_js_1.default)(header, base64url.decode(encodedPayload), options);\n    return {\n      payload,\n      header\n    };\n  }\n}\nexports.UnsecuredJWT = UnsecuredJWT;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC91bnNlY3VyZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELG9CQUFvQixHQUFHLEtBQUssQ0FBQztBQUM3QixNQUFNRyxTQUFTLEdBQUdDLG1CQUFPLENBQUMsd0hBQXlCLENBQUM7QUFDcEQsTUFBTUMsaUJBQWlCLEdBQUdELG1CQUFPLENBQUMsc0hBQXdCLENBQUM7QUFDM0QsTUFBTUUsV0FBVyxHQUFHRixtQkFBTyxDQUFDLDRHQUFtQixDQUFDO0FBQ2hELE1BQU1HLG1CQUFtQixHQUFHSCxtQkFBTyxDQUFDLDBIQUEwQixDQUFDO0FBQy9ELE1BQU1JLFlBQVksR0FBR0osbUJBQU8sQ0FBQyx1R0FBYyxDQUFDO0FBQzVDLE1BQU1GLFlBQVksU0FBU00sWUFBWSxDQUFDQyxVQUFVLENBQUM7RUFDL0NDLE1BQU1BLENBQUEsRUFBRztJQUNMLE1BQU1DLE1BQU0sR0FBR1IsU0FBUyxDQUFDTyxNQUFNLENBQUNFLElBQUksQ0FBQ0MsU0FBUyxDQUFDO01BQUVDLEdBQUcsRUFBRTtJQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLE1BQU1DLE9BQU8sR0FBR1osU0FBUyxDQUFDTyxNQUFNLENBQUNFLElBQUksQ0FBQ0MsU0FBUyxDQUFDLElBQUksQ0FBQ0csUUFBUSxDQUFDLENBQUM7SUFDL0QsT0FBUSxHQUFFTCxNQUFPLElBQUdJLE9BQVEsR0FBRTtFQUNsQztFQUNBLE9BQU9FLE1BQU1BLENBQUNDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO0lBQ3hCLElBQUksT0FBT0QsR0FBRyxLQUFLLFFBQVEsRUFBRTtNQUN6QixNQUFNLElBQUlaLFdBQVcsQ0FBQ2MsVUFBVSxDQUFDLGdDQUFnQyxDQUFDO0lBQ3RFO0lBQ0EsTUFBTTtNQUFFLENBQUMsRUFBRUMsYUFBYTtNQUFFLENBQUMsRUFBRUMsY0FBYztNQUFFLENBQUMsRUFBRUMsU0FBUztNQUFFQztJQUFPLENBQUMsR0FBR04sR0FBRyxDQUFDTyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQ3BGLElBQUlELE1BQU0sS0FBSyxDQUFDLElBQUlELFNBQVMsS0FBSyxFQUFFLEVBQUU7TUFDbEMsTUFBTSxJQUFJakIsV0FBVyxDQUFDYyxVQUFVLENBQUMsdUJBQXVCLENBQUM7SUFDN0Q7SUFDQSxJQUFJVCxNQUFNO0lBQ1YsSUFBSTtNQUNBQSxNQUFNLEdBQUdDLElBQUksQ0FBQ2MsS0FBSyxDQUFDckIsaUJBQWlCLENBQUNzQixPQUFPLENBQUNWLE1BQU0sQ0FBQ2QsU0FBUyxDQUFDYyxNQUFNLENBQUNJLGFBQWEsQ0FBQyxDQUFDLENBQUM7TUFDdEYsSUFBSVYsTUFBTSxDQUFDRyxHQUFHLEtBQUssTUFBTSxFQUNyQixNQUFNLElBQUljLEtBQUssQ0FBQyxDQUFDO0lBQ3pCLENBQUMsQ0FDRCxNQUFNO01BQ0YsTUFBTSxJQUFJdEIsV0FBVyxDQUFDYyxVQUFVLENBQUMsdUJBQXVCLENBQUM7SUFDN0Q7SUFDQSxNQUFNTCxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUVSLG1CQUFtQixDQUFDc0IsT0FBTyxFQUFFbEIsTUFBTSxFQUFFUixTQUFTLENBQUNjLE1BQU0sQ0FBQ0ssY0FBYyxDQUFDLEVBQUVILE9BQU8sQ0FBQztJQUNuRyxPQUFPO01BQUVKLE9BQU87TUFBRUo7SUFBTyxDQUFDO0VBQzlCO0FBQ0o7QUFDQVgsb0JBQW9CLEdBQUdFLFlBQVkiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9qd3QvdW5zZWN1cmVkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VbnNlY3VyZWRKV1QgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmwgPSByZXF1aXJlKFwiLi4vcnVudGltZS9iYXNlNjR1cmwuanNcIik7XG5jb25zdCBidWZmZXJfdXRpbHNfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvYnVmZmVyX3V0aWxzLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBqd3RfY2xhaW1zX3NldF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9qd3RfY2xhaW1zX3NldC5qc1wiKTtcbmNvbnN0IHByb2R1Y2VfanNfMSA9IHJlcXVpcmUoXCIuL3Byb2R1Y2UuanNcIik7XG5jbGFzcyBVbnNlY3VyZWRKV1QgZXh0ZW5kcyBwcm9kdWNlX2pzXzEuUHJvZHVjZUpXVCB7XG4gICAgZW5jb2RlKCkge1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBiYXNlNjR1cmwuZW5jb2RlKEpTT04uc3RyaW5naWZ5KHsgYWxnOiAnbm9uZScgfSkpO1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gYmFzZTY0dXJsLmVuY29kZShKU09OLnN0cmluZ2lmeSh0aGlzLl9wYXlsb2FkKSk7XG4gICAgICAgIHJldHVybiBgJHtoZWFkZXJ9LiR7cGF5bG9hZH0uYDtcbiAgICB9XG4gICAgc3RhdGljIGRlY29kZShqd3QsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBqd3QgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnVW5zZWN1cmVkIEpXVCBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyAwOiBlbmNvZGVkSGVhZGVyLCAxOiBlbmNvZGVkUGF5bG9hZCwgMjogc2lnbmF0dXJlLCBsZW5ndGggfSA9IGp3dC5zcGxpdCgnLicpO1xuICAgICAgICBpZiAobGVuZ3RoICE9PSAzIHx8IHNpZ25hdHVyZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdJbnZhbGlkIFVuc2VjdXJlZCBKV1QnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaGVhZGVyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaGVhZGVyID0gSlNPTi5wYXJzZShidWZmZXJfdXRpbHNfanNfMS5kZWNvZGVyLmRlY29kZShiYXNlNjR1cmwuZGVjb2RlKGVuY29kZWRIZWFkZXIpKSk7XG4gICAgICAgICAgICBpZiAoaGVhZGVyLmFsZyAhPT0gJ25vbmUnKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdJbnZhbGlkIFVuc2VjdXJlZCBKV1QnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXlsb2FkID0gKDAsIGp3dF9jbGFpbXNfc2V0X2pzXzEuZGVmYXVsdCkoaGVhZGVyLCBiYXNlNjR1cmwuZGVjb2RlKGVuY29kZWRQYXlsb2FkKSwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB7IHBheWxvYWQsIGhlYWRlciB9O1xuICAgIH1cbn1cbmV4cG9ydHMuVW5zZWN1cmVkSldUID0gVW5zZWN1cmVkSldUO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVW5zZWN1cmVkSldUIiwiYmFzZTY0dXJsIiwicmVxdWlyZSIsImJ1ZmZlcl91dGlsc19qc18xIiwiZXJyb3JzX2pzXzEiLCJqd3RfY2xhaW1zX3NldF9qc18xIiwicHJvZHVjZV9qc18xIiwiUHJvZHVjZUpXVCIsImVuY29kZSIsImhlYWRlciIsIkpTT04iLCJzdHJpbmdpZnkiLCJhbGciLCJwYXlsb2FkIiwiX3BheWxvYWQiLCJkZWNvZGUiLCJqd3QiLCJvcHRpb25zIiwiSldUSW52YWxpZCIsImVuY29kZWRIZWFkZXIiLCJlbmNvZGVkUGF5bG9hZCIsInNpZ25hdHVyZSIsImxlbmd0aCIsInNwbGl0IiwicGFyc2UiLCJkZWNvZGVyIiwiRXJyb3IiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/unsecured.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/verify.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/verify.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.jwtVerify = void 0;\nconst verify_js_1 = __webpack_require__(/*! ../jws/compact/verify.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jws/compact/verify.js\");\nconst jwt_claims_set_js_1 = __webpack_require__(/*! ../lib/jwt_claims_set.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nasync function jwtVerify(jwt, key, options) {\n  var _a;\n  const verified = await (0, verify_js_1.compactVerify)(jwt, key, options);\n  if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && verified.protectedHeader.b64 === false) {\n    throw new errors_js_1.JWTInvalid('JWTs MUST NOT use unencoded payload');\n  }\n  const payload = (0, jwt_claims_set_js_1.default)(verified.protectedHeader, verified.payload, options);\n  const result = {\n    payload,\n    protectedHeader: verified.protectedHeader\n  };\n  if (typeof key === 'function') {\n    return _objectSpread(_objectSpread({}, result), {}, {\n      key: verified.key\n    });\n  }\n  return result;\n}\nexports.jwtVerify = jwtVerify;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC92ZXJpZnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQUEsU0FBQUEsUUFBQUMsQ0FBQSxFQUFBQyxDQUFBLFFBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxJQUFBLENBQUFKLENBQUEsT0FBQUcsTUFBQSxDQUFBRSxxQkFBQSxRQUFBQyxDQUFBLEdBQUFILE1BQUEsQ0FBQUUscUJBQUEsQ0FBQUwsQ0FBQSxHQUFBQyxDQUFBLEtBQUFLLENBQUEsR0FBQUEsQ0FBQSxDQUFBQyxNQUFBLFdBQUFOLENBQUEsV0FBQUUsTUFBQSxDQUFBSyx3QkFBQSxDQUFBUixDQUFBLEVBQUFDLENBQUEsRUFBQVEsVUFBQSxPQUFBUCxDQUFBLENBQUFRLElBQUEsQ0FBQUMsS0FBQSxDQUFBVCxDQUFBLEVBQUFJLENBQUEsWUFBQUosQ0FBQTtBQUFBLFNBQUFVLGNBQUFaLENBQUEsYUFBQUMsQ0FBQSxNQUFBQSxDQUFBLEdBQUFZLFNBQUEsQ0FBQUMsTUFBQSxFQUFBYixDQUFBLFVBQUFDLENBQUEsV0FBQVcsU0FBQSxDQUFBWixDQUFBLElBQUFZLFNBQUEsQ0FBQVosQ0FBQSxRQUFBQSxDQUFBLE9BQUFGLE9BQUEsQ0FBQUksTUFBQSxDQUFBRCxDQUFBLE9BQUFhLE9BQUEsV0FBQWQsQ0FBQSxJQUFBZSxlQUFBLENBQUFoQixDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxDQUFBRCxDQUFBLFNBQUFFLE1BQUEsQ0FBQWMseUJBQUEsR0FBQWQsTUFBQSxDQUFBZSxnQkFBQSxDQUFBbEIsQ0FBQSxFQUFBRyxNQUFBLENBQUFjLHlCQUFBLENBQUFmLENBQUEsS0FBQUgsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsR0FBQWEsT0FBQSxXQUFBZCxDQUFBLElBQUFFLE1BQUEsQ0FBQWdCLGNBQUEsQ0FBQW5CLENBQUEsRUFBQUMsQ0FBQSxFQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFOLENBQUEsRUFBQUQsQ0FBQSxpQkFBQUQsQ0FBQTtBQUFBLFNBQUFnQixnQkFBQUksR0FBQSxFQUFBQyxHQUFBLEVBQUFDLEtBQUEsSUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUEsT0FBQUEsR0FBQSxJQUFBRCxHQUFBLElBQUFqQixNQUFBLENBQUFnQixjQUFBLENBQUFDLEdBQUEsRUFBQUMsR0FBQSxJQUFBQyxLQUFBLEVBQUFBLEtBQUEsRUFBQWIsVUFBQSxRQUFBZSxZQUFBLFFBQUFDLFFBQUEsb0JBQUFMLEdBQUEsQ0FBQUMsR0FBQSxJQUFBQyxLQUFBLFdBQUFGLEdBQUE7QUFBQSxTQUFBRyxlQUFBRyxHQUFBLFFBQUFMLEdBQUEsR0FBQU0sWUFBQSxDQUFBRCxHQUFBLDJCQUFBTCxHQUFBLGdCQUFBQSxHQUFBLEdBQUFPLE1BQUEsQ0FBQVAsR0FBQTtBQUFBLFNBQUFNLGFBQUFFLEtBQUEsRUFBQUMsSUFBQSxlQUFBRCxLQUFBLGlCQUFBQSxLQUFBLGtCQUFBQSxLQUFBLE1BQUFFLElBQUEsR0FBQUYsS0FBQSxDQUFBRyxNQUFBLENBQUFDLFdBQUEsT0FBQUYsSUFBQSxLQUFBRyxTQUFBLFFBQUFDLEdBQUEsR0FBQUosSUFBQSxDQUFBSyxJQUFBLENBQUFQLEtBQUEsRUFBQUMsSUFBQSwyQkFBQUssR0FBQSxzQkFBQUEsR0FBQSxZQUFBRSxTQUFBLDREQUFBUCxJQUFBLGdCQUFBRixNQUFBLEdBQUFVLE1BQUEsRUFBQVQsS0FBQTtBQUNiMUIsOENBQTZDO0VBQUVtQixLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RpQixpQkFBaUIsR0FBRyxLQUFLLENBQUM7QUFDMUIsTUFBTUUsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLDBIQUEwQixDQUFDO0FBQ3ZELE1BQU1DLG1CQUFtQixHQUFHRCxtQkFBTyxDQUFDLDBIQUEwQixDQUFDO0FBQy9ELE1BQU1FLFdBQVcsR0FBR0YsbUJBQU8sQ0FBQyw0R0FBbUIsQ0FBQztBQUNoRCxlQUFlRixTQUFTQSxDQUFDSyxHQUFHLEVBQUV4QixHQUFHLEVBQUV5QixPQUFPLEVBQUU7RUFDeEMsSUFBSUMsRUFBRTtFQUNOLE1BQU1DLFFBQVEsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFUCxXQUFXLENBQUNRLGFBQWEsRUFBRUosR0FBRyxFQUFFeEIsR0FBRyxFQUFFeUIsT0FBTyxDQUFDO0VBQ3hFLElBQUksQ0FBQyxDQUFDQyxFQUFFLEdBQUdDLFFBQVEsQ0FBQ0UsZUFBZSxDQUFDQyxJQUFJLE1BQU0sSUFBSSxJQUFJSixFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQ0ssUUFBUSxDQUFDLEtBQUssQ0FBQyxLQUFLSixRQUFRLENBQUNFLGVBQWUsQ0FBQ0csR0FBRyxLQUFLLEtBQUssRUFBRTtJQUMxSSxNQUFNLElBQUlULFdBQVcsQ0FBQ1UsVUFBVSxDQUFDLHFDQUFxQyxDQUFDO0VBQzNFO0VBQ0EsTUFBTUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFWixtQkFBbUIsQ0FBQ2EsT0FBTyxFQUFFUixRQUFRLENBQUNFLGVBQWUsRUFBRUYsUUFBUSxDQUFDTyxPQUFPLEVBQUVULE9BQU8sQ0FBQztFQUNyRyxNQUFNVyxNQUFNLEdBQUc7SUFBRUYsT0FBTztJQUFFTCxlQUFlLEVBQUVGLFFBQVEsQ0FBQ0U7RUFBZ0IsQ0FBQztFQUNyRSxJQUFJLE9BQU83QixHQUFHLEtBQUssVUFBVSxFQUFFO0lBQzNCLE9BQUFULGFBQUEsQ0FBQUEsYUFBQSxLQUFZNkMsTUFBTTtNQUFFcEMsR0FBRyxFQUFFMkIsUUFBUSxDQUFDM0I7SUFBRztFQUN6QztFQUNBLE9BQU9vQyxNQUFNO0FBQ2pCO0FBQ0FsQixpQkFBaUIsR0FBR0MsU0FBUyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2p3dC92ZXJpZnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmp3dFZlcmlmeSA9IHZvaWQgMDtcbmNvbnN0IHZlcmlmeV9qc18xID0gcmVxdWlyZShcIi4uL2p3cy9jb21wYWN0L3ZlcmlmeS5qc1wiKTtcbmNvbnN0IGp3dF9jbGFpbXNfc2V0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2p3dF9jbGFpbXNfc2V0LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5hc3luYyBmdW5jdGlvbiBqd3RWZXJpZnkoand0LCBrZXksIG9wdGlvbnMpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgdmVyaWZpZWQgPSBhd2FpdCAoMCwgdmVyaWZ5X2pzXzEuY29tcGFjdFZlcmlmeSkoand0LCBrZXksIG9wdGlvbnMpO1xuICAgIGlmICgoKF9hID0gdmVyaWZpZWQucHJvdGVjdGVkSGVhZGVyLmNyaXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmNsdWRlcygnYjY0JykpICYmIHZlcmlmaWVkLnByb3RlY3RlZEhlYWRlci5iNjQgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdKV1RzIE1VU1QgTk9UIHVzZSB1bmVuY29kZWQgcGF5bG9hZCcpO1xuICAgIH1cbiAgICBjb25zdCBwYXlsb2FkID0gKDAsIGp3dF9jbGFpbXNfc2V0X2pzXzEuZGVmYXVsdCkodmVyaWZpZWQucHJvdGVjdGVkSGVhZGVyLCB2ZXJpZmllZC5wYXlsb2FkLCBvcHRpb25zKTtcbiAgICBjb25zdCByZXN1bHQgPSB7IHBheWxvYWQsIHByb3RlY3RlZEhlYWRlcjogdmVyaWZpZWQucHJvdGVjdGVkSGVhZGVyIH07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHsgLi4ucmVzdWx0LCBrZXk6IHZlcmlmaWVkLmtleSB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5qd3RWZXJpZnkgPSBqd3RWZXJpZnk7XG4iXSwibmFtZXMiOlsib3duS2V5cyIsImUiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJvIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJTeW1ib2wiLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJleHBvcnRzIiwiand0VmVyaWZ5IiwidmVyaWZ5X2pzXzEiLCJyZXF1aXJlIiwiand0X2NsYWltc19zZXRfanNfMSIsImVycm9yc19qc18xIiwiand0Iiwib3B0aW9ucyIsIl9hIiwidmVyaWZpZWQiLCJjb21wYWN0VmVyaWZ5IiwicHJvdGVjdGVkSGVhZGVyIiwiY3JpdCIsImluY2x1ZGVzIiwiYjY0IiwiSldUSW52YWxpZCIsInBheWxvYWQiLCJkZWZhdWx0IiwicmVzdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/jwt/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.exportJWK = exports.exportPKCS8 = exports.exportSPKI = void 0;\nconst asn1_js_1 = __webpack_require__(/*! ../runtime/asn1.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js\");\nconst asn1_js_2 = __webpack_require__(/*! ../runtime/asn1.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js\");\nconst key_to_jwk_js_1 = __webpack_require__(/*! ../runtime/key_to_jwk.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/key_to_jwk.js\");\nasync function exportSPKI(key) {\n  return (0, asn1_js_1.toSPKI)(key);\n}\nexports.exportSPKI = exportSPKI;\nasync function exportPKCS8(key) {\n  return (0, asn1_js_2.toPKCS8)(key);\n}\nexports.exportPKCS8 = exportPKCS8;\nasync function exportJWK(key) {\n  return (0, key_to_jwk_js_1.default)(key);\n}\nexports.exportJWK = exportJWK;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9leHBvcnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHQSxtQkFBbUIsR0FBR0Esa0JBQWtCLEdBQUcsS0FBSyxDQUFDO0FBQ3JFLE1BQU1LLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyw4R0FBb0IsQ0FBQztBQUMvQyxNQUFNQyxTQUFTLEdBQUdELG1CQUFPLENBQUMsOEdBQW9CLENBQUM7QUFDL0MsTUFBTUUsZUFBZSxHQUFHRixtQkFBTyxDQUFDLDBIQUEwQixDQUFDO0FBQzNELGVBQWVGLFVBQVVBLENBQUNLLEdBQUcsRUFBRTtFQUMzQixPQUFPLENBQUMsQ0FBQyxFQUFFSixTQUFTLENBQUNLLE1BQU0sRUFBRUQsR0FBRyxDQUFDO0FBQ3JDO0FBQ0FULGtCQUFrQixHQUFHSSxVQUFVO0FBQy9CLGVBQWVELFdBQVdBLENBQUNNLEdBQUcsRUFBRTtFQUM1QixPQUFPLENBQUMsQ0FBQyxFQUFFRixTQUFTLENBQUNJLE9BQU8sRUFBRUYsR0FBRyxDQUFDO0FBQ3RDO0FBQ0FULG1CQUFtQixHQUFHRyxXQUFXO0FBQ2pDLGVBQWVELFNBQVNBLENBQUNPLEdBQUcsRUFBRTtFQUMxQixPQUFPLENBQUMsQ0FBQyxFQUFFRCxlQUFlLENBQUNJLE9BQU8sRUFBRUgsR0FBRyxDQUFDO0FBQzVDO0FBQ0FULGlCQUFpQixHQUFHRSxTQUFTIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMva2V5L2V4cG9ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhwb3J0SldLID0gZXhwb3J0cy5leHBvcnRQS0NTOCA9IGV4cG9ydHMuZXhwb3J0U1BLSSA9IHZvaWQgMDtcbmNvbnN0IGFzbjFfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2FzbjEuanNcIik7XG5jb25zdCBhc24xX2pzXzIgPSByZXF1aXJlKFwiLi4vcnVudGltZS9hc24xLmpzXCIpO1xuY29uc3Qga2V5X3RvX2p3a19qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUva2V5X3RvX2p3ay5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGV4cG9ydFNQS0koa2V5KSB7XG4gICAgcmV0dXJuICgwLCBhc24xX2pzXzEudG9TUEtJKShrZXkpO1xufVxuZXhwb3J0cy5leHBvcnRTUEtJID0gZXhwb3J0U1BLSTtcbmFzeW5jIGZ1bmN0aW9uIGV4cG9ydFBLQ1M4KGtleSkge1xuICAgIHJldHVybiAoMCwgYXNuMV9qc18yLnRvUEtDUzgpKGtleSk7XG59XG5leHBvcnRzLmV4cG9ydFBLQ1M4ID0gZXhwb3J0UEtDUzg7XG5hc3luYyBmdW5jdGlvbiBleHBvcnRKV0soa2V5KSB7XG4gICAgcmV0dXJuICgwLCBrZXlfdG9fandrX2pzXzEuZGVmYXVsdCkoa2V5KTtcbn1cbmV4cG9ydHMuZXhwb3J0SldLID0gZXhwb3J0SldLO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXhwb3J0SldLIiwiZXhwb3J0UEtDUzgiLCJleHBvcnRTUEtJIiwiYXNuMV9qc18xIiwicmVxdWlyZSIsImFzbjFfanNfMiIsImtleV90b19qd2tfanNfMSIsImtleSIsInRvU1BLSSIsInRvUEtDUzgiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_key_pair.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_key_pair.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.generateKeyPair = void 0;\nconst generate_js_1 = __webpack_require__(/*! ../runtime/generate.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js\");\nasync function generateKeyPair(alg, options) {\n  return (0, generate_js_1.generateKeyPair)(alg, options);\n}\nexports.generateKeyPair = generateKeyPair;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9nZW5lcmF0ZV9rZXlfcGFpci5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQsdUJBQXVCLEdBQUcsS0FBSyxDQUFDO0FBQ2hDLE1BQU1HLGFBQWEsR0FBR0MsbUJBQU8sQ0FBQyxzSEFBd0IsQ0FBQztBQUN2RCxlQUFlRixlQUFlQSxDQUFDRyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtFQUN6QyxPQUFPLENBQUMsQ0FBQyxFQUFFSCxhQUFhLENBQUNELGVBQWUsRUFBRUcsR0FBRyxFQUFFQyxPQUFPLENBQUM7QUFDM0Q7QUFDQU4sdUJBQXVCLEdBQUdFLGVBQWUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9rZXkvZ2VuZXJhdGVfa2V5X3BhaXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYXRlS2V5UGFpciA9IHZvaWQgMDtcbmNvbnN0IGdlbmVyYXRlX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9nZW5lcmF0ZS5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlS2V5UGFpcihhbGcsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKDAsIGdlbmVyYXRlX2pzXzEuZ2VuZXJhdGVLZXlQYWlyKShhbGcsIG9wdGlvbnMpO1xufVxuZXhwb3J0cy5nZW5lcmF0ZUtleVBhaXIgPSBnZW5lcmF0ZUtleVBhaXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZW5lcmF0ZUtleVBhaXIiLCJnZW5lcmF0ZV9qc18xIiwicmVxdWlyZSIsImFsZyIsIm9wdGlvbnMiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_key_pair.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_secret.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_secret.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.generateSecret = void 0;\nconst generate_js_1 = __webpack_require__(/*! ../runtime/generate.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js\");\nasync function generateSecret(alg, options) {\n  return (0, generate_js_1.generateSecret)(alg, options);\n}\nexports.generateSecret = generateSecret;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2tleS9nZW5lcmF0ZV9zZWNyZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHLEtBQUssQ0FBQztBQUMvQixNQUFNRyxhQUFhLEdBQUdDLG1CQUFPLENBQUMsc0hBQXdCLENBQUM7QUFDdkQsZUFBZUYsY0FBY0EsQ0FBQ0csR0FBRyxFQUFFQyxPQUFPLEVBQUU7RUFDeEMsT0FBTyxDQUFDLENBQUMsRUFBRUgsYUFBYSxDQUFDRCxjQUFjLEVBQUVHLEdBQUcsRUFBRUMsT0FBTyxDQUFDO0FBQzFEO0FBQ0FOLHNCQUFzQixHQUFHRSxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMva2V5L2dlbmVyYXRlX3NlY3JldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2VuZXJhdGVTZWNyZXQgPSB2b2lkIDA7XG5jb25zdCBnZW5lcmF0ZV9qc18xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvZ2VuZXJhdGUuanNcIik7XG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZVNlY3JldChhbGcsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKDAsIGdlbmVyYXRlX2pzXzEuZ2VuZXJhdGVTZWNyZXQpKGFsZywgb3B0aW9ucyk7XG59XG5leHBvcnRzLmdlbmVyYXRlU2VjcmV0ID0gZ2VuZXJhdGVTZWNyZXQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZW5lcmF0ZVNlY3JldCIsImdlbmVyYXRlX2pzXzEiLCJyZXF1aXJlIiwiYWxnIiwib3B0aW9ucyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/generate_secret.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.importJWK = exports.importPKCS8 = exports.importX509 = exports.importSPKI = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst asn1_js_1 = __webpack_require__(/*! ../runtime/asn1.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js\");\nconst jwk_to_key_js_1 = __webpack_require__(/*! ../runtime/jwk_to_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/jwk_to_key.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nasync function importSPKI(spki, alg, options) {\n  if (typeof spki !== 'string' || spki.indexOf('-----BEGIN PUBLIC KEY-----') !== 0) {\n    throw new TypeError('\"spki\" must be SPKI formatted string');\n  }\n  return (0, asn1_js_1.fromSPKI)(spki, alg, options);\n}\nexports.importSPKI = importSPKI;\nasync function importX509(x509, alg, options) {\n  if (typeof x509 !== 'string' || x509.indexOf('-----BEGIN CERTIFICATE-----') !== 0) {\n    throw new TypeError('\"x509\" must be X.509 formatted string');\n  }\n  return (0, asn1_js_1.fromX509)(x509, alg, options);\n}\nexports.importX509 = importX509;\nasync function importPKCS8(pkcs8, alg, options) {\n  if (typeof pkcs8 !== 'string' || pkcs8.indexOf('-----BEGIN PRIVATE KEY-----') !== 0) {\n    throw new TypeError('\"pkcs8\" must be PKCS#8 formatted string');\n  }\n  return (0, asn1_js_1.fromPKCS8)(pkcs8, alg, options);\n}\nexports.importPKCS8 = importPKCS8;\nasync function importJWK(jwk, alg, octAsKeyObject) {\n  var _a;\n  if (!(0, is_object_js_1.default)(jwk)) {\n    throw new TypeError('JWK must be an object');\n  }\n  alg || (alg = jwk.alg);\n  switch (jwk.kty) {\n    case 'oct':\n      if (typeof jwk.k !== 'string' || !jwk.k) {\n        throw new TypeError('missing \"k\" (Key Value) Parameter value');\n      }\n      octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : octAsKeyObject = jwk.ext !== true;\n      if (octAsKeyObject) {\n        return (0, jwk_to_key_js_1.default)(_objectSpread(_objectSpread({}, jwk), {}, {\n          alg,\n          ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false\n        }));\n      }\n      return (0, base64url_js_1.decode)(jwk.k);\n    case 'RSA':\n      if (jwk.oth !== undefined) {\n        throw new errors_js_1.JOSENotSupported('RSA JWK \"oth\" (Other Primes Info) Parameter value is not supported');\n      }\n    case 'EC':\n    case 'OKP':\n      return (0, jwk_to_key_js_1.default)(_objectSpread(_objectSpread({}, jwk), {}, {\n        alg\n      }));\n    default:\n      throw new errors_js_1.JOSENotSupported('Unsupported \"kty\" (Key Type) Parameter value');\n  }\n}\nexports.importJWK = importJWK;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.unwrap = exports.wrap = void 0;\nconst encrypt_js_1 = __webpack_require__(/*! ../runtime/encrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js\");\nconst decrypt_js_1 = __webpack_require__(/*! ../runtime/decrypt.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js\");\nconst iv_js_1 = __webpack_require__(/*! ./iv.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nasync function wrap(alg, key, cek, iv) {\n  const jweAlgorithm = alg.slice(0, 7);\n  iv || (iv = (0, iv_js_1.default)(jweAlgorithm));\n  const {\n    ciphertext: encryptedKey,\n    tag\n  } = await (0, encrypt_js_1.default)(jweAlgorithm, cek, key, iv, new Uint8Array(0));\n  return {\n    encryptedKey,\n    iv: (0, base64url_js_1.encode)(iv),\n    tag: (0, base64url_js_1.encode)(tag)\n  };\n}\nexports.wrap = wrap;\nasync function unwrap(alg, key, encryptedKey, iv, tag) {\n  const jweAlgorithm = alg.slice(0, 7);\n  return (0, decrypt_js_1.default)(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));\n}\nexports.unwrap = unwrap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9hZXNnY21rdy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQsY0FBYyxHQUFHQSxZQUFZLEdBQUcsS0FBSyxDQUFDO0FBQ3RDLE1BQU1JLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyxvSEFBdUIsQ0FBQztBQUNyRCxNQUFNQyxZQUFZLEdBQUdELG1CQUFPLENBQUMsb0hBQXVCLENBQUM7QUFDckQsTUFBTUUsT0FBTyxHQUFHRixtQkFBTyxDQUFDLDZGQUFTLENBQUM7QUFDbEMsTUFBTUcsY0FBYyxHQUFHSCxtQkFBTyxDQUFDLHdIQUF5QixDQUFDO0FBQ3pELGVBQWVGLElBQUlBLENBQUNNLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEVBQUUsRUFBRTtFQUNuQyxNQUFNQyxZQUFZLEdBQUdKLEdBQUcsQ0FBQ0ssS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7RUFDcENGLEVBQUUsS0FBS0EsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFTCxPQUFPLENBQUNRLE9BQU8sRUFBRUYsWUFBWSxDQUFDLENBQUM7RUFDL0MsTUFBTTtJQUFFRyxVQUFVLEVBQUVDLFlBQVk7SUFBRUM7RUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRWQsWUFBWSxDQUFDVyxPQUFPLEVBQUVGLFlBQVksRUFBRUYsR0FBRyxFQUFFRCxHQUFHLEVBQUVFLEVBQUUsRUFBRSxJQUFJTyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDeEgsT0FBTztJQUFFRixZQUFZO0lBQUVMLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRUosY0FBYyxDQUFDWSxNQUFNLEVBQUVSLEVBQUUsQ0FBQztJQUFFTSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUVWLGNBQWMsQ0FBQ1ksTUFBTSxFQUFFRixHQUFHO0VBQUUsQ0FBQztBQUNyRztBQUNBbEIsWUFBWSxHQUFHRyxJQUFJO0FBQ25CLGVBQWVELE1BQU1BLENBQUNPLEdBQUcsRUFBRUMsR0FBRyxFQUFFTyxZQUFZLEVBQUVMLEVBQUUsRUFBRU0sR0FBRyxFQUFFO0VBQ25ELE1BQU1MLFlBQVksR0FBR0osR0FBRyxDQUFDSyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztFQUNwQyxPQUFPLENBQUMsQ0FBQyxFQUFFUixZQUFZLENBQUNTLE9BQU8sRUFBRUYsWUFBWSxFQUFFSCxHQUFHLEVBQUVPLFlBQVksRUFBRUwsRUFBRSxFQUFFTSxHQUFHLEVBQUUsSUFBSUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pHO0FBQ0FuQixjQUFjLEdBQUdFLE1BQU0iLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvYWVzZ2Nta3cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVud3JhcCA9IGV4cG9ydHMud3JhcCA9IHZvaWQgMDtcbmNvbnN0IGVuY3J5cHRfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL2VuY3J5cHQuanNcIik7XG5jb25zdCBkZWNyeXB0X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9kZWNyeXB0LmpzXCIpO1xuY29uc3QgaXZfanNfMSA9IHJlcXVpcmUoXCIuL2l2LmpzXCIpO1xuY29uc3QgYmFzZTY0dXJsX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9iYXNlNjR1cmwuanNcIik7XG5hc3luYyBmdW5jdGlvbiB3cmFwKGFsZywga2V5LCBjZWssIGl2KSB7XG4gICAgY29uc3QgandlQWxnb3JpdGhtID0gYWxnLnNsaWNlKDAsIDcpO1xuICAgIGl2IHx8IChpdiA9ICgwLCBpdl9qc18xLmRlZmF1bHQpKGp3ZUFsZ29yaXRobSkpO1xuICAgIGNvbnN0IHsgY2lwaGVydGV4dDogZW5jcnlwdGVkS2V5LCB0YWcgfSA9IGF3YWl0ICgwLCBlbmNyeXB0X2pzXzEuZGVmYXVsdCkoandlQWxnb3JpdGhtLCBjZWssIGtleSwgaXYsIG5ldyBVaW50OEFycmF5KDApKTtcbiAgICByZXR1cm4geyBlbmNyeXB0ZWRLZXksIGl2OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShpdiksIHRhZzogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkodGFnKSB9O1xufVxuZXhwb3J0cy53cmFwID0gd3JhcDtcbmFzeW5jIGZ1bmN0aW9uIHVud3JhcChhbGcsIGtleSwgZW5jcnlwdGVkS2V5LCBpdiwgdGFnKSB7XG4gICAgY29uc3QgandlQWxnb3JpdGhtID0gYWxnLnNsaWNlKDAsIDcpO1xuICAgIHJldHVybiAoMCwgZGVjcnlwdF9qc18xLmRlZmF1bHQpKGp3ZUFsZ29yaXRobSwga2V5LCBlbmNyeXB0ZWRLZXksIGl2LCB0YWcsIG5ldyBVaW50OEFycmF5KDApKTtcbn1cbmV4cG9ydHMudW53cmFwID0gdW53cmFwO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidW53cmFwIiwid3JhcCIsImVuY3J5cHRfanNfMSIsInJlcXVpcmUiLCJkZWNyeXB0X2pzXzEiLCJpdl9qc18xIiwiYmFzZTY0dXJsX2pzXzEiLCJhbGciLCJrZXkiLCJjZWsiLCJpdiIsImp3ZUFsZ29yaXRobSIsInNsaWNlIiwiZGVmYXVsdCIsImNpcGhlcnRleHQiLCJlbmNyeXB0ZWRLZXkiLCJ0YWciLCJVaW50OEFycmF5IiwiZW5jb2RlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.concatKdf = exports.lengthAndInput = exports.uint32be = exports.uint64be = exports.p2s = exports.concat = exports.decoder = exports.encoder = void 0;\nconst digest_js_1 = __webpack_require__(/*! ../runtime/digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js\");\nexports.encoder = new TextEncoder();\nexports.decoder = new TextDecoder();\nconst MAX_INT32 = 2 ** 32;\nfunction concat(...buffers) {\n  const size = buffers.reduce((acc, {\n    length\n  }) => acc + length, 0);\n  const buf = new Uint8Array(size);\n  let i = 0;\n  buffers.forEach(buffer => {\n    buf.set(buffer, i);\n    i += buffer.length;\n  });\n  return buf;\n}\nexports.concat = concat;\nfunction p2s(alg, p2sInput) {\n  return concat(exports.encoder.encode(alg), new Uint8Array([0]), p2sInput);\n}\nexports.p2s = p2s;\nfunction writeUInt32BE(buf, value, offset) {\n  if (value < 0 || value >= MAX_INT32) {\n    throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);\n  }\n  buf.set([value >>> 24, value >>> 16, value >>> 8, value & 0xff], offset);\n}\nfunction uint64be(value) {\n  const high = Math.floor(value / MAX_INT32);\n  const low = value % MAX_INT32;\n  const buf = new Uint8Array(8);\n  writeUInt32BE(buf, high, 0);\n  writeUInt32BE(buf, low, 4);\n  return buf;\n}\nexports.uint64be = uint64be;\nfunction uint32be(value) {\n  const buf = new Uint8Array(4);\n  writeUInt32BE(buf, value);\n  return buf;\n}\nexports.uint32be = uint32be;\nfunction lengthAndInput(input) {\n  return concat(uint32be(input.length), input);\n}\nexports.lengthAndInput = lengthAndInput;\nasync function concatKdf(secret, bits, value) {\n  const iterations = Math.ceil((bits >> 3) / 32);\n  const res = new Uint8Array(iterations * 32);\n  for (let iter = 0; iter < iterations; iter++) {\n    const buf = new Uint8Array(4 + secret.length + value.length);\n    buf.set(uint32be(iter + 1));\n    buf.set(secret, 4);\n    buf.set(value, 4 + secret.length);\n    res.set(await (0, digest_js_1.default)('sha256', buf), iter * 32);\n  }\n  return res.slice(0, bits >> 3);\n}\nexports.concatKdf = concatKdf;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9idWZmZXJfdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHQSxzQkFBc0IsR0FBR0EsZ0JBQWdCLEdBQUdBLGdCQUFnQixHQUFHQSxXQUFXLEdBQUdBLGNBQWMsR0FBR0EsZUFBZSxHQUFHQSxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQzVKLE1BQU1VLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyxrSEFBc0IsQ0FBQztBQUNuRFgsZUFBZSxHQUFHLElBQUlZLFdBQVcsQ0FBQyxDQUFDO0FBQ25DWixlQUFlLEdBQUcsSUFBSWEsV0FBVyxDQUFDLENBQUM7QUFDbkMsTUFBTUMsU0FBUyxHQUFHLENBQUMsSUFBSSxFQUFFO0FBQ3pCLFNBQVNQLE1BQU1BLENBQUMsR0FBR1EsT0FBTyxFQUFFO0VBQ3hCLE1BQU1DLElBQUksR0FBR0QsT0FBTyxDQUFDRSxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxFQUFFO0lBQUVDO0VBQU8sQ0FBQyxLQUFLRCxHQUFHLEdBQUdDLE1BQU0sRUFBRSxDQUFDLENBQUM7RUFDakUsTUFBTUMsR0FBRyxHQUFHLElBQUlDLFVBQVUsQ0FBQ0wsSUFBSSxDQUFDO0VBQ2hDLElBQUlNLENBQUMsR0FBRyxDQUFDO0VBQ1RQLE9BQU8sQ0FBQ1EsT0FBTyxDQUFFQyxNQUFNLElBQUs7SUFDeEJKLEdBQUcsQ0FBQ0ssR0FBRyxDQUFDRCxNQUFNLEVBQUVGLENBQUMsQ0FBQztJQUNsQkEsQ0FBQyxJQUFJRSxNQUFNLENBQUNMLE1BQU07RUFDdEIsQ0FBQyxDQUFDO0VBQ0YsT0FBT0MsR0FBRztBQUNkO0FBQ0FwQixjQUFjLEdBQUdPLE1BQU07QUFDdkIsU0FBU0QsR0FBR0EsQ0FBQ29CLEdBQUcsRUFBRUMsUUFBUSxFQUFFO0VB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SUFBSSxHQUFHLEVBQUUsQ0FBQztFQUNyRTtFQUNBLE9BQU9ELEdBQUcsQ0FBQ0csS0FBSyxDQUFDLENBQUMsRUFBRU4sSUFBSSxJQUFJLENBQUMsQ0FBQztBQUNsQztBQUNBdEMsaUJBQWlCLEdBQUdFLFNBQVMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvYnVmZmVyX3V0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25jYXRLZGYgPSBleHBvcnRzLmxlbmd0aEFuZElucHV0ID0gZXhwb3J0cy51aW50MzJiZSA9IGV4cG9ydHMudWludDY0YmUgPSBleHBvcnRzLnAycyA9IGV4cG9ydHMuY29uY2F0ID0gZXhwb3J0cy5kZWNvZGVyID0gZXhwb3J0cy5lbmNvZGVyID0gdm9pZCAwO1xuY29uc3QgZGlnZXN0X2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9kaWdlc3QuanNcIik7XG5leHBvcnRzLmVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbmV4cG9ydHMuZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuY29uc3QgTUFYX0lOVDMyID0gMiAqKiAzMjtcbmZ1bmN0aW9uIGNvbmNhdCguLi5idWZmZXJzKSB7XG4gICAgY29uc3Qgc2l6ZSA9IGJ1ZmZlcnMucmVkdWNlKChhY2MsIHsgbGVuZ3RoIH0pID0+IGFjYyArIGxlbmd0aCwgMCk7XG4gICAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGJ1ZmZlcnMuZm9yRWFjaCgoYnVmZmVyKSA9PiB7XG4gICAgICAgIGJ1Zi5zZXQoYnVmZmVyLCBpKTtcbiAgICAgICAgaSArPSBidWZmZXIubGVuZ3RoO1xuICAgIH0pO1xuICAgIHJldHVybiBidWY7XG59XG5leHBvcnRzLmNvbmNhdCA9IGNvbmNhdDtcbmZ1bmN0aW9uIHAycyhhbGcsIHAyc0lucHV0KSB7XG4gICAgcmV0dXJuIGNvbmNhdChleHBvcnRzLmVuY29kZXIuZW5jb2RlKGFsZyksIG5ldyBVaW50OEFycmF5KFswXSksIHAyc0lucHV0KTtcbn1cbmV4cG9ydHMucDJzID0gcDJzO1xuZnVuY3Rpb24gd3JpdGVVSW50MzJCRShidWYsIHZhbHVlLCBvZmZzZXQpIHtcbiAgICBpZiAodmFsdWUgPCAwIHx8IHZhbHVlID49IE1BWF9JTlQzMikge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdmFsdWUgbXVzdCBiZSA+PSAwIGFuZCA8PSAke01BWF9JTlQzMiAtIDF9LiBSZWNlaXZlZCAke3ZhbHVlfWApO1xuICAgIH1cbiAgICBidWYuc2V0KFt2YWx1ZSA+Pj4gMjQsIHZhbHVlID4+PiAxNiwgdmFsdWUgPj4+IDgsIHZhbHVlICYgMHhmZl0sIG9mZnNldCk7XG59XG5mdW5jdGlvbiB1aW50NjRiZSh2YWx1ZSkge1xuICAgIGNvbnN0IGhpZ2ggPSBNYXRoLmZsb29yKHZhbHVlIC8gTUFYX0lOVDMyKTtcbiAgICBjb25zdCBsb3cgPSB2YWx1ZSAlIE1BWF9JTlQzMjtcbiAgICBjb25zdCBidWYgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICB3cml0ZVVJbnQzMkJFKGJ1ZiwgaGlnaCwgMCk7XG4gICAgd3JpdGVVSW50MzJCRShidWYsIGxvdywgNCk7XG4gICAgcmV0dXJuIGJ1Zjtcbn1cbmV4cG9ydHMudWludDY0YmUgPSB1aW50NjRiZTtcbmZ1bmN0aW9uIHVpbnQzMmJlKHZhbHVlKSB7XG4gICAgY29uc3QgYnVmID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgd3JpdGVVSW50MzJCRShidWYsIHZhbHVlKTtcbiAgICByZXR1cm4gYnVmO1xufVxuZXhwb3J0cy51aW50MzJiZSA9IHVpbnQzMmJlO1xuZnVuY3Rpb24gbGVuZ3RoQW5kSW5wdXQoaW5wdXQpIHtcbiAgICByZXR1cm4gY29uY2F0KHVpbnQzMmJlKGlucHV0Lmxlbmd0aCksIGlucHV0KTtcbn1cbmV4cG9ydHMubGVuZ3RoQW5kSW5wdXQgPSBsZW5ndGhBbmRJbnB1dDtcbmFzeW5jIGZ1bmN0aW9uIGNvbmNhdEtkZihzZWNyZXQsIGJpdHMsIHZhbHVlKSB7XG4gICAgY29uc3QgaXRlcmF0aW9ucyA9IE1hdGguY2VpbCgoYml0cyA+PiAzKSAvIDMyKTtcbiAgICBjb25zdCByZXMgPSBuZXcgVWludDhBcnJheShpdGVyYXRpb25zICogMzIpO1xuICAgIGZvciAobGV0IGl0ZXIgPSAwOyBpdGVyIDwgaXRlcmF0aW9uczsgaXRlcisrKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KDQgKyBzZWNyZXQubGVuZ3RoICsgdmFsdWUubGVuZ3RoKTtcbiAgICAgICAgYnVmLnNldCh1aW50MzJiZShpdGVyICsgMSkpO1xuICAgICAgICBidWYuc2V0KHNlY3JldCwgNCk7XG4gICAgICAgIGJ1Zi5zZXQodmFsdWUsIDQgKyBzZWNyZXQubGVuZ3RoKTtcbiAgICAgICAgcmVzLnNldChhd2FpdCAoMCwgZGlnZXN0X2pzXzEuZGVmYXVsdCkoJ3NoYTI1NicsIGJ1ZiksIGl0ZXIgKiAzMik7XG4gICAgfVxuICAgIHJldHVybiByZXMuc2xpY2UoMCwgYml0cyA+PiAzKTtcbn1cbmV4cG9ydHMuY29uY2F0S2RmID0gY29uY2F0S2RmO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY29uY2F0S2RmIiwibGVuZ3RoQW5kSW5wdXQiLCJ1aW50MzJiZSIsInVpbnQ2NGJlIiwicDJzIiwiY29uY2F0IiwiZGVjb2RlciIsImVuY29kZXIiLCJkaWdlc3RfanNfMSIsInJlcXVpcmUiLCJUZXh0RW5jb2RlciIsIlRleHREZWNvZGVyIiwiTUFYX0lOVDMyIiwiYnVmZmVycyIsInNpemUiLCJyZWR1Y2UiLCJhY2MiLCJsZW5ndGgiLCJidWYiLCJVaW50OEFycmF5IiwiaSIsImZvckVhY2giLCJidWZmZXIiLCJzZXQiLCJhbGciLCJwMnNJbnB1dCIsImVuY29kZSIsIndyaXRlVUludDMyQkUiLCJvZmZzZXQiLCJSYW5nZUVycm9yIiwiaGlnaCIsIk1hdGgiLCJmbG9vciIsImxvdyIsImlucHV0Iiwic2VjcmV0IiwiYml0cyIsIml0ZXJhdGlvbnMiLCJjZWlsIiwicmVzIiwiaXRlciIsImRlZmF1bHQiLCJzbGljZSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.bitLength = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst random_js_1 = __webpack_require__(/*! ../runtime/random.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\");\nfunction bitLength(alg) {\n  switch (alg) {\n    case 'A128GCM':\n      return 128;\n    case 'A192GCM':\n      return 192;\n    case 'A256GCM':\n    case 'A128CBC-HS256':\n      return 256;\n    case 'A192CBC-HS384':\n      return 384;\n    case 'A256CBC-HS512':\n      return 512;\n    default:\n      throw new errors_js_1.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);\n  }\n}\nexports.bitLength = bitLength;\nexports[\"default\"] = alg => (0, random_js_1.default)(new Uint8Array(bitLength(alg) >> 3));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jZWsuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHLEtBQUssQ0FBQztBQUMxQixNQUFNRyxXQUFXLEdBQUdDLG1CQUFPLENBQUMsNEdBQW1CLENBQUM7QUFDaEQsTUFBTUMsV0FBVyxHQUFHRCxtQkFBTyxDQUFDLGtIQUFzQixDQUFDO0FBQ25ELFNBQVNGLFNBQVNBLENBQUNJLEdBQUcsRUFBRTtFQUNwQixRQUFRQSxHQUFHO0lBQ1AsS0FBSyxTQUFTO01BQ1YsT0FBTyxHQUFHO0lBQ2QsS0FBSyxTQUFTO01BQ1YsT0FBTyxHQUFHO0lBQ2QsS0FBSyxTQUFTO0lBQ2QsS0FBSyxlQUFlO01BQ2hCLE9BQU8sR0FBRztJQUNkLEtBQUssZUFBZTtNQUNoQixPQUFPLEdBQUc7SUFDZCxLQUFLLGVBQWU7TUFDaEIsT0FBTyxHQUFHO0lBQ2Q7TUFDSSxNQUFNLElBQUlILFdBQVcsQ0FBQ0ksZ0JBQWdCLENBQUUsOEJBQTZCRCxHQUFJLEVBQUMsQ0FBQztFQUNuRjtBQUNKO0FBQ0FOLGlCQUFpQixHQUFHRSxTQUFTO0FBQzdCRixrQkFBZSxHQUFJTSxHQUFHLElBQUssQ0FBQyxDQUFDLEVBQUVELFdBQVcsQ0FBQ0csT0FBTyxFQUFFLElBQUlDLFVBQVUsQ0FBQ1AsU0FBUyxDQUFDSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jZWsuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJpdExlbmd0aCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgcmFuZG9tX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9yYW5kb20uanNcIik7XG5mdW5jdGlvbiBiaXRMZW5ndGgoYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgICAgICByZXR1cm4gMTI4O1xuICAgICAgICBjYXNlICdBMTkyR0NNJzpcbiAgICAgICAgICAgIHJldHVybiAxOTI7XG4gICAgICAgIGNhc2UgJ0EyNTZHQ00nOlxuICAgICAgICBjYXNlICdBMTI4Q0JDLUhTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiAyNTY7XG4gICAgICAgIGNhc2UgJ0ExOTJDQkMtSFMzODQnOlxuICAgICAgICAgICAgcmV0dXJuIDM4NDtcbiAgICAgICAgY2FzZSAnQTI1NkNCQy1IUzUxMic6XG4gICAgICAgICAgICByZXR1cm4gNTEyO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoYFVuc3VwcG9ydGVkIEpXRSBBbGdvcml0aG06ICR7YWxnfWApO1xuICAgIH1cbn1cbmV4cG9ydHMuYml0TGVuZ3RoID0gYml0TGVuZ3RoO1xuZXhwb3J0cy5kZWZhdWx0ID0gKGFsZykgPT4gKDAsIHJhbmRvbV9qc18xLmRlZmF1bHQpKG5ldyBVaW50OEFycmF5KGJpdExlbmd0aChhbGcpID4+IDMpKTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImJpdExlbmd0aCIsImVycm9yc19qc18xIiwicmVxdWlyZSIsInJhbmRvbV9qc18xIiwiYWxnIiwiSk9TRU5vdFN1cHBvcnRlZCIsImRlZmF1bHQiLCJVaW50OEFycmF5Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst iv_js_1 = __webpack_require__(/*! ./iv.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js\");\nconst checkIvLength = (enc, iv) => {\n  if (iv.length << 3 !== (0, iv_js_1.bitLength)(enc)) {\n    throw new errors_js_1.JWEInvalid('Invalid Initialization Vector length');\n  }\n};\nexports[\"default\"] = checkIvLength;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19pdl9sZW5ndGguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLDRHQUFtQixDQUFDO0FBQ2hELE1BQU1DLE9BQU8sR0FBR0QsbUJBQU8sQ0FBQyw2RkFBUyxDQUFDO0FBQ2xDLE1BQU1FLGFBQWEsR0FBR0EsQ0FBQ0MsR0FBRyxFQUFFQyxFQUFFLEtBQUs7RUFDL0IsSUFBSUEsRUFBRSxDQUFDQyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFSixPQUFPLENBQUNLLFNBQVMsRUFBRUgsR0FBRyxDQUFDLEVBQUU7SUFDaEQsTUFBTSxJQUFJSixXQUFXLENBQUNRLFVBQVUsQ0FBQyxzQ0FBc0MsQ0FBQztFQUM1RTtBQUNKLENBQUM7QUFDRFYsa0JBQWUsR0FBR0ssYUFBYSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19pdl9sZW5ndGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGl2X2pzXzEgPSByZXF1aXJlKFwiLi9pdi5qc1wiKTtcbmNvbnN0IGNoZWNrSXZMZW5ndGggPSAoZW5jLCBpdikgPT4ge1xuICAgIGlmIChpdi5sZW5ndGggPDwgMyAhPT0gKDAsIGl2X2pzXzEuYml0TGVuZ3RoKShlbmMpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdJbnZhbGlkIEluaXRpYWxpemF0aW9uIFZlY3RvciBsZW5ndGgnKTtcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tJdkxlbmd0aDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVycm9yc19qc18xIiwicmVxdWlyZSIsIml2X2pzXzEiLCJjaGVja0l2TGVuZ3RoIiwiZW5jIiwiaXYiLCJsZW5ndGgiLCJiaXRMZW5ndGgiLCJKV0VJbnZhbGlkIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst invalid_key_input_js_1 = __webpack_require__(/*! ./invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ../runtime/is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst symmetricTypeCheck = (alg, key) => {\n  if (key instanceof Uint8Array) return;\n  if (!(0, is_key_like_js_1.default)(key)) {\n    throw new TypeError((0, invalid_key_input_js_1.withAlg)(alg, key, ...is_key_like_js_1.types, 'Uint8Array'));\n  }\n  if (key.type !== 'secret') {\n    throw new TypeError(`${is_key_like_js_1.types.join(' or ')} instances for symmetric algorithms must be of type \"secret\"`);\n  }\n};\nconst asymmetricTypeCheck = (alg, key, usage) => {\n  if (!(0, is_key_like_js_1.default)(key)) {\n    throw new TypeError((0, invalid_key_input_js_1.withAlg)(alg, key, ...is_key_like_js_1.types));\n  }\n  if (key.type === 'secret') {\n    throw new TypeError(`${is_key_like_js_1.types.join(' or ')} instances for asymmetric algorithms must not be of type \"secret\"`);\n  }\n  if (usage === 'sign' && key.type === 'public') {\n    throw new TypeError(`${is_key_like_js_1.types.join(' or ')} instances for asymmetric algorithm signing must be of type \"private\"`);\n  }\n  if (usage === 'decrypt' && key.type === 'public') {\n    throw new TypeError(`${is_key_like_js_1.types.join(' or ')} instances for asymmetric algorithm decryption must be of type \"private\"`);\n  }\n  if (key.algorithm && usage === 'verify' && key.type === 'private') {\n    throw new TypeError(`${is_key_like_js_1.types.join(' or ')} instances for asymmetric algorithm verifying must be of type \"public\"`);\n  }\n  if (key.algorithm && usage === 'encrypt' && key.type === 'private') {\n    throw new TypeError(`${is_key_like_js_1.types.join(' or ')} instances for asymmetric algorithm encryption must be of type \"public\"`);\n  }\n};\nconst checkKeyType = (alg, key, usage) => {\n  const symmetric = alg.startsWith('HS') || alg === 'dir' || alg.startsWith('PBES2') || /^A\\d{3}(?:GCM)?KW$/.test(alg);\n  if (symmetric) {\n    symmetricTypeCheck(alg, key);\n  } else {\n    asymmetricTypeCheck(alg, key, usage);\n  }\n};\nexports[\"default\"] = checkKeyType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19rZXlfdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxzQkFBc0IsR0FBR0MsbUJBQU8sQ0FBQywySEFBd0IsQ0FBQztBQUNoRSxNQUFNQyxnQkFBZ0IsR0FBR0QsbUJBQU8sQ0FBQyw0SEFBMkIsQ0FBQztBQUM3RCxNQUFNRSxrQkFBa0IsR0FBR0EsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEtBQUs7RUFDckMsSUFBSUEsR0FBRyxZQUFZQyxVQUFVLEVBQ3pCO0VBQ0osSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFSixnQkFBZ0IsQ0FBQ0ssT0FBTyxFQUFFRixHQUFHLENBQUMsRUFBRTtJQUNyQyxNQUFNLElBQUlHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRVIsc0JBQXNCLENBQUNTLE9BQU8sRUFBRUwsR0FBRyxFQUFFQyxHQUFHLEVBQUUsR0FBR0gsZ0JBQWdCLENBQUNRLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztFQUMvRztFQUNBLElBQUlMLEdBQUcsQ0FBQ00sSUFBSSxLQUFLLFFBQVEsRUFBRTtJQUN2QixNQUFNLElBQUlILFNBQVMsQ0FBRSxHQUFFTixnQkFBZ0IsQ0FBQ1EsS0FBSyxDQUFDRSxJQUFJLENBQUMsTUFBTSxDQUFFLDhEQUE2RCxDQUFDO0VBQzdIO0FBQ0osQ0FBQztBQUNELE1BQU1DLG1CQUFtQixHQUFHQSxDQUFDVCxHQUFHLEVBQUVDLEdBQUcsRUFBRVMsS0FBSyxLQUFLO0VBQzdDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRVosZ0JBQWdCLENBQUNLLE9BQU8sRUFBRUYsR0FBRyxDQUFDLEVBQUU7SUFDckMsTUFBTSxJQUFJRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUVSLHNCQUFzQixDQUFDUyxPQUFPLEVBQUVMLEdBQUcsRUFBRUMsR0FBRyxFQUFFLEdBQUdILGdCQUFnQixDQUFDUSxLQUFLLENBQUMsQ0FBQztFQUNqRztFQUNBLElBQUlMLEdBQUcsQ0FBQ00sSUFBSSxLQUFLLFFBQVEsRUFBRTtJQUN2QixNQUFNLElBQUlILFNBQVMsQ0FBRSxHQUFFTixnQkFBZ0IsQ0FBQ1EsS0FBSyxDQUFDRSxJQUFJLENBQUMsTUFBTSxDQUFFLG1FQUFrRSxDQUFDO0VBQ2xJO0VBQ0EsSUFBSUUsS0FBSyxLQUFLLE1BQU0sSUFBSVQsR0FBRyxDQUFDTSxJQUFJLEtBQUssUUFBUSxFQUFFO0lBQzNDLE1BQU0sSUFBSUgsU0FBUyxDQUFFLEdBQUVOLGdCQUFnQixDQUFDUSxLQUFLLENBQUNFLElBQUksQ0FBQyxNQUFNLENBQUUsdUVBQXNFLENBQUM7RUFDdEk7RUFDQSxJQUFJRSxLQUFLLEtBQUssU0FBUyxJQUFJVCxHQUFHLENBQUNNLElBQUksS0FBSyxRQUFRLEVBQUU7SUFDOUMsTUFBTSxJQUFJSCxTQUFTLENBQUUsR0FBRU4sZ0JBQWdCLENBQUNRLEtBQUssQ0FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBRSwwRUFBeUUsQ0FBQztFQUN6STtFQUNBLElBQUlQLEdBQUcsQ0FBQ1UsU0FBUyxJQUFJRCxLQUFLLEtBQUssUUFBUSxJQUFJVCxHQUFHLENBQUNNLElBQUksS0FBSyxTQUFTLEVBQUU7SUFDL0QsTUFBTSxJQUFJSCxTQUFTLENBQUUsR0FBRU4sZ0JBQWdCLENBQUNRLEtBQUssQ0FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBRSx3RUFBdUUsQ0FBQztFQUN2STtFQUNBLElBQUlQLEdBQUcsQ0FBQ1UsU0FBUyxJQUFJRCxLQUFLLEtBQUssU0FBUyxJQUFJVCxHQUFHLENBQUNNLElBQUksS0FBSyxTQUFTLEVBQUU7SUFDaEUsTUFBTSxJQUFJSCxTQUFTLENBQUUsR0FBRU4sZ0JBQWdCLENBQUNRLEtBQUssQ0FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBRSx5RUFBd0UsQ0FBQztFQUN4STtBQUNKLENBQUM7QUFDRCxNQUFNSSxZQUFZLEdBQUdBLENBQUNaLEdBQUcsRUFBRUMsR0FBRyxFQUFFUyxLQUFLLEtBQUs7RUFDdEMsTUFBTUcsU0FBUyxHQUFHYixHQUFHLENBQUNjLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFDbENkLEdBQUcsS0FBSyxLQUFLLElBQ2JBLEdBQUcsQ0FBQ2MsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUN2QixvQkFBb0IsQ0FBQ0MsSUFBSSxDQUFDZixHQUFHLENBQUM7RUFDbEMsSUFBSWEsU0FBUyxFQUFFO0lBQ1hkLGtCQUFrQixDQUFDQyxHQUFHLEVBQUVDLEdBQUcsQ0FBQztFQUNoQyxDQUFDLE1BQ0k7SUFDRFEsbUJBQW1CLENBQUNULEdBQUcsRUFBRUMsR0FBRyxFQUFFUyxLQUFLLENBQUM7RUFDeEM7QUFDSixDQUFDO0FBQ0RoQixrQkFBZSxHQUFHa0IsWUFBWSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19rZXlfdHlwZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGludmFsaWRfa2V5X2lucHV0X2pzXzEgPSByZXF1aXJlKFwiLi9pbnZhbGlkX2tleV9pbnB1dC5qc1wiKTtcbmNvbnN0IGlzX2tleV9saWtlX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9pc19rZXlfbGlrZS5qc1wiKTtcbmNvbnN0IHN5bW1ldHJpY1R5cGVDaGVjayA9IChhbGcsIGtleSkgPT4ge1xuICAgIGlmIChrZXkgaW5zdGFuY2VvZiBVaW50OEFycmF5KVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKCEoMCwgaXNfa2V5X2xpa2VfanNfMS5kZWZhdWx0KShrZXkpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEud2l0aEFsZykoYWxnLCBrZXksIC4uLmlzX2tleV9saWtlX2pzXzEudHlwZXMsICdVaW50OEFycmF5JykpO1xuICAgIH1cbiAgICBpZiAoa2V5LnR5cGUgIT09ICdzZWNyZXQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7aXNfa2V5X2xpa2VfanNfMS50eXBlcy5qb2luKCcgb3IgJyl9IGluc3RhbmNlcyBmb3Igc3ltbWV0cmljIGFsZ29yaXRobXMgbXVzdCBiZSBvZiB0eXBlIFwic2VjcmV0XCJgKTtcbiAgICB9XG59O1xuY29uc3QgYXN5bW1ldHJpY1R5cGVDaGVjayA9IChhbGcsIGtleSwgdXNhZ2UpID0+IHtcbiAgICBpZiAoISgwLCBpc19rZXlfbGlrZV9qc18xLmRlZmF1bHQpKGtleSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS53aXRoQWxnKShhbGcsIGtleSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcykpO1xuICAgIH1cbiAgICBpZiAoa2V5LnR5cGUgPT09ICdzZWNyZXQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7aXNfa2V5X2xpa2VfanNfMS50eXBlcy5qb2luKCcgb3IgJyl9IGluc3RhbmNlcyBmb3IgYXN5bW1ldHJpYyBhbGdvcml0aG1zIG11c3Qgbm90IGJlIG9mIHR5cGUgXCJzZWNyZXRcImApO1xuICAgIH1cbiAgICBpZiAodXNhZ2UgPT09ICdzaWduJyAmJiBrZXkudHlwZSA9PT0gJ3B1YmxpYycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtpc19rZXlfbGlrZV9qc18xLnR5cGVzLmpvaW4oJyBvciAnKX0gaW5zdGFuY2VzIGZvciBhc3ltbWV0cmljIGFsZ29yaXRobSBzaWduaW5nIG11c3QgYmUgb2YgdHlwZSBcInByaXZhdGVcImApO1xuICAgIH1cbiAgICBpZiAodXNhZ2UgPT09ICdkZWNyeXB0JyAmJiBrZXkudHlwZSA9PT0gJ3B1YmxpYycpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtpc19rZXlfbGlrZV9qc18xLnR5cGVzLmpvaW4oJyBvciAnKX0gaW5zdGFuY2VzIGZvciBhc3ltbWV0cmljIGFsZ29yaXRobSBkZWNyeXB0aW9uIG11c3QgYmUgb2YgdHlwZSBcInByaXZhdGVcImApO1xuICAgIH1cbiAgICBpZiAoa2V5LmFsZ29yaXRobSAmJiB1c2FnZSA9PT0gJ3ZlcmlmeScgJiYga2V5LnR5cGUgPT09ICdwcml2YXRlJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2lzX2tleV9saWtlX2pzXzEudHlwZXMuam9pbignIG9yICcpfSBpbnN0YW5jZXMgZm9yIGFzeW1tZXRyaWMgYWxnb3JpdGhtIHZlcmlmeWluZyBtdXN0IGJlIG9mIHR5cGUgXCJwdWJsaWNcImApO1xuICAgIH1cbiAgICBpZiAoa2V5LmFsZ29yaXRobSAmJiB1c2FnZSA9PT0gJ2VuY3J5cHQnICYmIGtleS50eXBlID09PSAncHJpdmF0ZScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtpc19rZXlfbGlrZV9qc18xLnR5cGVzLmpvaW4oJyBvciAnKX0gaW5zdGFuY2VzIGZvciBhc3ltbWV0cmljIGFsZ29yaXRobSBlbmNyeXB0aW9uIG11c3QgYmUgb2YgdHlwZSBcInB1YmxpY1wiYCk7XG4gICAgfVxufTtcbmNvbnN0IGNoZWNrS2V5VHlwZSA9IChhbGcsIGtleSwgdXNhZ2UpID0+IHtcbiAgICBjb25zdCBzeW1tZXRyaWMgPSBhbGcuc3RhcnRzV2l0aCgnSFMnKSB8fFxuICAgICAgICBhbGcgPT09ICdkaXInIHx8XG4gICAgICAgIGFsZy5zdGFydHNXaXRoKCdQQkVTMicpIHx8XG4gICAgICAgIC9eQVxcZHszfSg/OkdDTSk/S1ckLy50ZXN0KGFsZyk7XG4gICAgaWYgKHN5bW1ldHJpYykge1xuICAgICAgICBzeW1tZXRyaWNUeXBlQ2hlY2soYWxnLCBrZXkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXN5bW1ldHJpY1R5cGVDaGVjayhhbGcsIGtleSwgdXNhZ2UpO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBjaGVja0tleVR5cGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbnZhbGlkX2tleV9pbnB1dF9qc18xIiwicmVxdWlyZSIsImlzX2tleV9saWtlX2pzXzEiLCJzeW1tZXRyaWNUeXBlQ2hlY2siLCJhbGciLCJrZXkiLCJVaW50OEFycmF5IiwiZGVmYXVsdCIsIlR5cGVFcnJvciIsIndpdGhBbGciLCJ0eXBlcyIsInR5cGUiLCJqb2luIiwiYXN5bW1ldHJpY1R5cGVDaGVjayIsInVzYWdlIiwiYWxnb3JpdGhtIiwiY2hlY2tLZXlUeXBlIiwic3ltbWV0cmljIiwic3RhcnRzV2l0aCIsInRlc3QiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_p2s.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_p2s.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction checkP2s(p2s) {\n  if (!(p2s instanceof Uint8Array) || p2s.length < 8) {\n    throw new errors_js_1.JWEInvalid('PBES2 Salt Input must be 8 or more octets');\n  }\n}\nexports[\"default\"] = checkP2s;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19wMnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLDRHQUFtQixDQUFDO0FBQ2hELFNBQVNDLFFBQVFBLENBQUNDLEdBQUcsRUFBRTtFQUNuQixJQUFJLEVBQUVBLEdBQUcsWUFBWUMsVUFBVSxDQUFDLElBQUlELEdBQUcsQ0FBQ0UsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUNoRCxNQUFNLElBQUlMLFdBQVcsQ0FBQ00sVUFBVSxDQUFDLDJDQUEyQyxDQUFDO0VBQ2pGO0FBQ0o7QUFDQVIsa0JBQWUsR0FBR0ksUUFBUSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9jaGVja19wMnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmZ1bmN0aW9uIGNoZWNrUDJzKHAycykge1xuICAgIGlmICghKHAycyBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHx8IHAycy5sZW5ndGggPCA4KSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKCdQQkVTMiBTYWx0IElucHV0IG11c3QgYmUgOCBvciBtb3JlIG9jdGV0cycpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGNoZWNrUDJzO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZXJyb3JzX2pzXzEiLCJyZXF1aXJlIiwiY2hlY2tQMnMiLCJwMnMiLCJVaW50OEFycmF5IiwibGVuZ3RoIiwiSldFSW52YWxpZCIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_p2s.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.checkEncCryptoKey = exports.checkSigCryptoKey = void 0;\nfunction unusable(name, prop = 'algorithm.name') {\n  return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);\n}\nfunction isAlgorithm(algorithm, name) {\n  return algorithm.name === name;\n}\nfunction getHashLength(hash) {\n  return parseInt(hash.name.slice(4), 10);\n}\nfunction getNamedCurve(alg) {\n  switch (alg) {\n    case 'ES256':\n      return 'P-256';\n    case 'ES384':\n      return 'P-384';\n    case 'ES512':\n      return 'P-521';\n    default:\n      throw new Error('unreachable');\n  }\n}\nfunction checkUsage(key, usages) {\n  if (usages.length && !usages.some(expected => key.usages.includes(expected))) {\n    let msg = 'CryptoKey does not support this operation, its usages must include ';\n    if (usages.length > 2) {\n      const last = usages.pop();\n      msg += `one of ${usages.join(', ')}, or ${last}.`;\n    } else if (usages.length === 2) {\n      msg += `one of ${usages[0]} or ${usages[1]}.`;\n    } else {\n      msg += `${usages[0]}.`;\n    }\n    throw new TypeError(msg);\n  }\n}\nfunction checkSigCryptoKey(key, alg, ...usages) {\n  switch (alg) {\n    case 'HS256':\n    case 'HS384':\n    case 'HS512':\n      {\n        if (!isAlgorithm(key.algorithm, 'HMAC')) throw unusable('HMAC');\n        const expected = parseInt(alg.slice(2), 10);\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n      {\n        if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5')) throw unusable('RSASSA-PKCS1-v1_5');\n        const expected = parseInt(alg.slice(2), 10);\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n    case 'PS256':\n    case 'PS384':\n    case 'PS512':\n      {\n        if (!isAlgorithm(key.algorithm, 'RSA-PSS')) throw unusable('RSA-PSS');\n        const expected = parseInt(alg.slice(2), 10);\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n    case 'EdDSA':\n      {\n        if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') {\n          throw unusable('Ed25519 or Ed448');\n        }\n        break;\n      }\n    case 'ES256':\n    case 'ES384':\n    case 'ES512':\n      {\n        if (!isAlgorithm(key.algorithm, 'ECDSA')) throw unusable('ECDSA');\n        const expected = getNamedCurve(alg);\n        const actual = key.algorithm.namedCurve;\n        if (actual !== expected) throw unusable(expected, 'algorithm.namedCurve');\n        break;\n      }\n    default:\n      throw new TypeError('CryptoKey does not support this operation');\n  }\n  checkUsage(key, usages);\n}\nexports.checkSigCryptoKey = checkSigCryptoKey;\nfunction checkEncCryptoKey(key, alg, ...usages) {\n  switch (alg) {\n    case 'A128GCM':\n    case 'A192GCM':\n    case 'A256GCM':\n      {\n        if (!isAlgorithm(key.algorithm, 'AES-GCM')) throw unusable('AES-GCM');\n        const expected = parseInt(alg.slice(1, 4), 10);\n        const actual = key.algorithm.length;\n        if (actual !== expected) throw unusable(expected, 'algorithm.length');\n        break;\n      }\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n      {\n        if (!isAlgorithm(key.algorithm, 'AES-KW')) throw unusable('AES-KW');\n        const expected = parseInt(alg.slice(1, 4), 10);\n        const actual = key.algorithm.length;\n        if (actual !== expected) throw unusable(expected, 'algorithm.length');\n        break;\n      }\n    case 'ECDH':\n      {\n        switch (key.algorithm.name) {\n          case 'ECDH':\n          case 'X25519':\n          case 'X448':\n            break;\n          default:\n            throw unusable('ECDH, X25519, or X448');\n        }\n        break;\n      }\n    case 'PBES2-HS256+A128KW':\n    case 'PBES2-HS384+A192KW':\n    case 'PBES2-HS512+A256KW':\n      if (!isAlgorithm(key.algorithm, 'PBKDF2')) throw unusable('PBKDF2');\n      break;\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      {\n        if (!isAlgorithm(key.algorithm, 'RSA-OAEP')) throw unusable('RSA-OAEP');\n        const expected = parseInt(alg.slice(9), 10) || 1;\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n    default:\n      throw new TypeError('CryptoKey does not support this operation');\n  }\n  checkUsage(key, usages);\n}\nexports.checkEncCryptoKey = checkEncCryptoKey;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/decrypt_key_management.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/decrypt_key_management.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst aeskw_js_1 = __webpack_require__(/*! ../runtime/aeskw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js\");\nconst ECDH = __webpack_require__(/*! ../runtime/ecdhes.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js\");\nconst pbes2kw_js_1 = __webpack_require__(/*! ../runtime/pbes2kw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js\");\nconst rsaes_js_1 = __webpack_require__(/*! ../runtime/rsaes.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst cek_js_1 = __webpack_require__(/*! ../lib/cek.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\");\nconst import_js_1 = __webpack_require__(/*! ../key/import.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/import.js\");\nconst check_key_type_js_1 = __webpack_require__(/*! ./check_key_type.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\");\nconst is_object_js_1 = __webpack_require__(/*! ./is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst aesgcmkw_js_1 = __webpack_require__(/*! ./aesgcmkw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js\");\nasync function decryptKeyManagement(alg, key, encryptedKey, joseHeader, options) {\n  (0, check_key_type_js_1.default)(alg, key, 'decrypt');\n  switch (alg) {\n    case 'dir':\n      {\n        if (encryptedKey !== undefined) throw new errors_js_1.JWEInvalid('Encountered unexpected JWE Encrypted Key');\n        return key;\n      }\n    case 'ECDH-ES':\n      if (encryptedKey !== undefined) throw new errors_js_1.JWEInvalid('Encountered unexpected JWE Encrypted Key');\n    case 'ECDH-ES+A128KW':\n    case 'ECDH-ES+A192KW':\n    case 'ECDH-ES+A256KW':\n      {\n        if (!(0, is_object_js_1.default)(joseHeader.epk)) throw new errors_js_1.JWEInvalid(`JOSE Header \"epk\" (Ephemeral Public Key) missing or invalid`);\n        if (!ECDH.ecdhAllowed(key)) throw new errors_js_1.JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n        const epk = await (0, import_js_1.importJWK)(joseHeader.epk, alg);\n        let partyUInfo;\n        let partyVInfo;\n        if (joseHeader.apu !== undefined) {\n          if (typeof joseHeader.apu !== 'string') throw new errors_js_1.JWEInvalid(`JOSE Header \"apu\" (Agreement PartyUInfo) invalid`);\n          try {\n            partyUInfo = (0, base64url_js_1.decode)(joseHeader.apu);\n          } catch {\n            throw new errors_js_1.JWEInvalid('Failed to base64url decode the apu');\n          }\n        }\n        if (joseHeader.apv !== undefined) {\n          if (typeof joseHeader.apv !== 'string') throw new errors_js_1.JWEInvalid(`JOSE Header \"apv\" (Agreement PartyVInfo) invalid`);\n          try {\n            partyVInfo = (0, base64url_js_1.decode)(joseHeader.apv);\n          } catch {\n            throw new errors_js_1.JWEInvalid('Failed to base64url decode the apv');\n          }\n        }\n        const sharedSecret = await ECDH.deriveKey(epk, key, alg === 'ECDH-ES' ? joseHeader.enc : alg, alg === 'ECDH-ES' ? (0, cek_js_1.bitLength)(joseHeader.enc) : parseInt(alg.slice(-5, -2), 10), partyUInfo, partyVInfo);\n        if (alg === 'ECDH-ES') return sharedSecret;\n        if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid('JWE Encrypted Key missing');\n        return (0, aeskw_js_1.unwrap)(alg.slice(-6), sharedSecret, encryptedKey);\n      }\n    case 'RSA1_5':\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      {\n        if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid('JWE Encrypted Key missing');\n        return (0, rsaes_js_1.decrypt)(alg, key, encryptedKey);\n      }\n    case 'PBES2-HS256+A128KW':\n    case 'PBES2-HS384+A192KW':\n    case 'PBES2-HS512+A256KW':\n      {\n        if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid('JWE Encrypted Key missing');\n        if (typeof joseHeader.p2c !== 'number') throw new errors_js_1.JWEInvalid(`JOSE Header \"p2c\" (PBES2 Count) missing or invalid`);\n        const p2cLimit = (options === null || options === void 0 ? void 0 : options.maxPBES2Count) || 10000;\n        if (joseHeader.p2c > p2cLimit) throw new errors_js_1.JWEInvalid(`JOSE Header \"p2c\" (PBES2 Count) out is of acceptable bounds`);\n        if (typeof joseHeader.p2s !== 'string') throw new errors_js_1.JWEInvalid(`JOSE Header \"p2s\" (PBES2 Salt) missing or invalid`);\n        let p2s;\n        try {\n          p2s = (0, base64url_js_1.decode)(joseHeader.p2s);\n        } catch {\n          throw new errors_js_1.JWEInvalid('Failed to base64url decode the p2s');\n        }\n        return (0, pbes2kw_js_1.decrypt)(alg, key, encryptedKey, joseHeader.p2c, p2s);\n      }\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n      {\n        if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid('JWE Encrypted Key missing');\n        return (0, aeskw_js_1.unwrap)(alg, key, encryptedKey);\n      }\n    case 'A128GCMKW':\n    case 'A192GCMKW':\n    case 'A256GCMKW':\n      {\n        if (encryptedKey === undefined) throw new errors_js_1.JWEInvalid('JWE Encrypted Key missing');\n        if (typeof joseHeader.iv !== 'string') throw new errors_js_1.JWEInvalid(`JOSE Header \"iv\" (Initialization Vector) missing or invalid`);\n        if (typeof joseHeader.tag !== 'string') throw new errors_js_1.JWEInvalid(`JOSE Header \"tag\" (Authentication Tag) missing or invalid`);\n        let iv;\n        try {\n          iv = (0, base64url_js_1.decode)(joseHeader.iv);\n        } catch {\n          throw new errors_js_1.JWEInvalid('Failed to base64url decode the iv');\n        }\n        let tag;\n        try {\n          tag = (0, base64url_js_1.decode)(joseHeader.tag);\n        } catch {\n          throw new errors_js_1.JWEInvalid('Failed to base64url decode the tag');\n        }\n        return (0, aesgcmkw_js_1.unwrap)(alg, key, encryptedKey, iv, tag);\n      }\n    default:\n      {\n        throw new errors_js_1.JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n      }\n  }\n}\nexports[\"default\"] = decryptKeyManagement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/decrypt_key_management.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nconst _excluded = [\"encryptedKey\"],\n  _excluded2 = [\"encryptedKey\"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst aeskw_js_1 = __webpack_require__(/*! ../runtime/aeskw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js\");\nconst ECDH = __webpack_require__(/*! ../runtime/ecdhes.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js\");\nconst pbes2kw_js_1 = __webpack_require__(/*! ../runtime/pbes2kw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js\");\nconst rsaes_js_1 = __webpack_require__(/*! ../runtime/rsaes.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js\");\nconst base64url_js_1 = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst cek_js_1 = __webpack_require__(/*! ../lib/cek.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/cek.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst export_js_1 = __webpack_require__(/*! ../key/export.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/key/export.js\");\nconst check_key_type_js_1 = __webpack_require__(/*! ./check_key_type.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_key_type.js\");\nconst aesgcmkw_js_1 = __webpack_require__(/*! ./aesgcmkw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/aesgcmkw.js\");\nasync function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {\n  let encryptedKey;\n  let parameters;\n  let cek;\n  (0, check_key_type_js_1.default)(alg, key, 'encrypt');\n  switch (alg) {\n    case 'dir':\n      {\n        cek = key;\n        break;\n      }\n    case 'ECDH-ES':\n    case 'ECDH-ES+A128KW':\n    case 'ECDH-ES+A192KW':\n    case 'ECDH-ES+A256KW':\n      {\n        if (!ECDH.ecdhAllowed(key)) {\n          throw new errors_js_1.JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n        }\n        const {\n          apu,\n          apv\n        } = providedParameters;\n        let {\n          epk: ephemeralKey\n        } = providedParameters;\n        ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);\n        const {\n          x,\n          y,\n          crv,\n          kty\n        } = await (0, export_js_1.exportJWK)(ephemeralKey);\n        const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? (0, cek_js_1.bitLength)(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n        parameters = {\n          epk: {\n            x,\n            crv,\n            kty\n          }\n        };\n        if (kty === 'EC') parameters.epk.y = y;\n        if (apu) parameters.apu = (0, base64url_js_1.encode)(apu);\n        if (apv) parameters.apv = (0, base64url_js_1.encode)(apv);\n        if (alg === 'ECDH-ES') {\n          cek = sharedSecret;\n          break;\n        }\n        cek = providedCek || (0, cek_js_1.default)(enc);\n        const kwAlg = alg.slice(-6);\n        encryptedKey = await (0, aeskw_js_1.wrap)(kwAlg, sharedSecret, cek);\n        break;\n      }\n    case 'RSA1_5':\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      {\n        cek = providedCek || (0, cek_js_1.default)(enc);\n        encryptedKey = await (0, rsaes_js_1.encrypt)(alg, key, cek);\n        break;\n      }\n    case 'PBES2-HS256+A128KW':\n    case 'PBES2-HS384+A192KW':\n    case 'PBES2-HS512+A256KW':\n      {\n        cek = providedCek || (0, cek_js_1.default)(enc);\n        const {\n          p2c,\n          p2s\n        } = providedParameters;\n        var _await = await (0, pbes2kw_js_1.encrypt)(alg, key, cek, p2c, p2s);\n        ({\n          encryptedKey\n        } = _await);\n        parameters = _objectWithoutProperties(_await, _excluded);\n        _await;\n        break;\n      }\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n      {\n        cek = providedCek || (0, cek_js_1.default)(enc);\n        encryptedKey = await (0, aeskw_js_1.wrap)(alg, key, cek);\n        break;\n      }\n    case 'A128GCMKW':\n    case 'A192GCMKW':\n    case 'A256GCMKW':\n      {\n        cek = providedCek || (0, cek_js_1.default)(enc);\n        const {\n          iv\n        } = providedParameters;\n        var _await2 = await (0, aesgcmkw_js_1.wrap)(alg, key, cek, iv);\n        ({\n          encryptedKey\n        } = _await2);\n        parameters = _objectWithoutProperties(_await2, _excluded2);\n        _await2;\n        break;\n      }\n    default:\n      {\n        throw new errors_js_1.JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n      }\n  }\n  return {\n    cek,\n    encryptedKey,\n    parameters\n  };\n}\nexports[\"default\"] = encryptKeyManagement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/encrypt_key_management.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = date => Math.floor(date.getTime() / 1000);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9lcG9jaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWUsR0FBSUcsSUFBSSxJQUFLQyxJQUFJLENBQUNDLEtBQUssQ0FBQ0YsSUFBSSxDQUFDRyxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9lcG9jaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdCA9IChkYXRlKSA9PiBNYXRoLmZsb29yKGRhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiZGF0ZSIsIk1hdGgiLCJmbG9vciIsImdldFRpbWUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.withAlg = void 0;\nfunction message(msg, actual, ...types) {\n  if (types.length > 2) {\n    const last = types.pop();\n    msg += `one of type ${types.join(', ')}, or ${last}.`;\n  } else if (types.length === 2) {\n    msg += `one of type ${types[0]} or ${types[1]}.`;\n  } else {\n    msg += `of type ${types[0]}.`;\n  }\n  if (actual == null) {\n    msg += ` Received ${actual}`;\n  } else if (typeof actual === 'function' && actual.name) {\n    msg += ` Received function ${actual.name}`;\n  } else if (typeof actual === 'object' && actual != null) {\n    if (actual.constructor && actual.constructor.name) {\n      msg += ` Received an instance of ${actual.constructor.name}`;\n    }\n  }\n  return msg;\n}\nexports[\"default\"] = (actual, ...types) => {\n  return message('Key must be ', actual, ...types);\n};\nfunction withAlg(alg, actual, ...types) {\n  return message(`Key for the ${alg} algorithm must be `, actual, ...types);\n}\nexports.withAlg = withAlg;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHLEtBQUssQ0FBQztBQUN4QixTQUFTRyxPQUFPQSxDQUFDQyxHQUFHLEVBQUVDLE1BQU0sRUFBRSxHQUFHQyxLQUFLLEVBQUU7RUFDcEMsSUFBSUEsS0FBSyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQ2xCLE1BQU1DLElBQUksR0FBR0YsS0FBSyxDQUFDRyxHQUFHLENBQUMsQ0FBQztJQUN4QkwsR0FBRyxJQUFLLGVBQWNFLEtBQUssQ0FBQ0ksSUFBSSxDQUFDLElBQUksQ0FBRSxRQUFPRixJQUFLLEdBQUU7RUFDekQsQ0FBQyxNQUNJLElBQUlGLEtBQUssQ0FBQ0MsTUFBTSxLQUFLLENBQUMsRUFBRTtJQUN6QkgsR0FBRyxJQUFLLGVBQWNFLEtBQUssQ0FBQyxDQUFDLENBQUUsT0FBTUEsS0FBSyxDQUFDLENBQUMsQ0FBRSxHQUFFO0VBQ3BELENBQUMsTUFDSTtJQUNERixHQUFHLElBQUssV0FBVUUsS0FBSyxDQUFDLENBQUMsQ0FBRSxHQUFFO0VBQ2pDO0VBQ0EsSUFBSUQsTUFBTSxJQUFJLElBQUksRUFBRTtJQUNoQkQsR0FBRyxJQUFLLGFBQVlDLE1BQU8sRUFBQztFQUNoQyxDQUFDLE1BQ0ksSUFBSSxPQUFPQSxNQUFNLEtBQUssVUFBVSxJQUFJQSxNQUFNLENBQUNNLElBQUksRUFBRTtJQUNsRFAsR0FBRyxJQUFLLHNCQUFxQkMsTUFBTSxDQUFDTSxJQUFLLEVBQUM7RUFDOUMsQ0FBQyxNQUNJLElBQUksT0FBT04sTUFBTSxLQUFLLFFBQVEsSUFBSUEsTUFBTSxJQUFJLElBQUksRUFBRTtJQUNuRCxJQUFJQSxNQUFNLENBQUNPLFdBQVcsSUFBSVAsTUFBTSxDQUFDTyxXQUFXLENBQUNELElBQUksRUFBRTtNQUMvQ1AsR0FBRyxJQUFLLDRCQUEyQkMsTUFBTSxDQUFDTyxXQUFXLENBQUNELElBQUssRUFBQztJQUNoRTtFQUNKO0VBQ0EsT0FBT1AsR0FBRztBQUNkO0FBQ0FKLGtCQUFlLEdBQUcsQ0FBQ0ssTUFBTSxFQUFFLEdBQUdDLEtBQUssS0FBSztFQUNwQyxPQUFPSCxPQUFPLENBQUMsY0FBYyxFQUFFRSxNQUFNLEVBQUUsR0FBR0MsS0FBSyxDQUFDO0FBQ3BELENBQUM7QUFDRCxTQUFTSixPQUFPQSxDQUFDWSxHQUFHLEVBQUVULE1BQU0sRUFBRSxHQUFHQyxLQUFLLEVBQUU7RUFDcEMsT0FBT0gsT0FBTyxDQUFFLGVBQWNXLEdBQUkscUJBQW9CLEVBQUVULE1BQU0sRUFBRSxHQUFHQyxLQUFLLENBQUM7QUFDN0U7QUFDQU4sZUFBZSxHQUFHRSxPQUFPIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL2ludmFsaWRfa2V5X2lucHV0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aXRoQWxnID0gdm9pZCAwO1xuZnVuY3Rpb24gbWVzc2FnZShtc2csIGFjdHVhbCwgLi4udHlwZXMpIHtcbiAgICBpZiAodHlwZXMubGVuZ3RoID4gMikge1xuICAgICAgICBjb25zdCBsYXN0ID0gdHlwZXMucG9wKCk7XG4gICAgICAgIG1zZyArPSBgb25lIG9mIHR5cGUgJHt0eXBlcy5qb2luKCcsICcpfSwgb3IgJHtsYXN0fS5gO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgbXNnICs9IGBvbmUgb2YgdHlwZSAke3R5cGVzWzBdfSBvciAke3R5cGVzWzFdfS5gO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbXNnICs9IGBvZiB0eXBlICR7dHlwZXNbMF19LmA7XG4gICAgfVxuICAgIGlmIChhY3R1YWwgPT0gbnVsbCkge1xuICAgICAgICBtc2cgKz0gYCBSZWNlaXZlZCAke2FjdHVhbH1gO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgYWN0dWFsID09PSAnZnVuY3Rpb24nICYmIGFjdHVhbC5uYW1lKSB7XG4gICAgICAgIG1zZyArPSBgIFJlY2VpdmVkIGZ1bmN0aW9uICR7YWN0dWFsLm5hbWV9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGFjdHVhbCA9PT0gJ29iamVjdCcgJiYgYWN0dWFsICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGFjdHVhbC5jb25zdHJ1Y3RvciAmJiBhY3R1YWwuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgICAgICAgbXNnICs9IGAgUmVjZWl2ZWQgYW4gaW5zdGFuY2Ugb2YgJHthY3R1YWwuY29uc3RydWN0b3IubmFtZX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtc2c7XG59XG5leHBvcnRzLmRlZmF1bHQgPSAoYWN0dWFsLCAuLi50eXBlcykgPT4ge1xuICAgIHJldHVybiBtZXNzYWdlKCdLZXkgbXVzdCBiZSAnLCBhY3R1YWwsIC4uLnR5cGVzKTtcbn07XG5mdW5jdGlvbiB3aXRoQWxnKGFsZywgYWN0dWFsLCAuLi50eXBlcykge1xuICAgIHJldHVybiBtZXNzYWdlKGBLZXkgZm9yIHRoZSAke2FsZ30gYWxnb3JpdGhtIG11c3QgYmUgYCwgYWN0dWFsLCAuLi50eXBlcyk7XG59XG5leHBvcnRzLndpdGhBbGcgPSB3aXRoQWxnO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwid2l0aEFsZyIsIm1lc3NhZ2UiLCJtc2ciLCJhY3R1YWwiLCJ0eXBlcyIsImxlbmd0aCIsImxhc3QiLCJwb3AiLCJqb2luIiwibmFtZSIsImNvbnN0cnVjdG9yIiwiZGVmYXVsdCIsImFsZyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst isDisjoint = (...headers) => {\n  const sources = headers.filter(Boolean);\n  if (sources.length === 0 || sources.length === 1) {\n    return true;\n  }\n  let acc;\n  for (const header of sources) {\n    const parameters = Object.keys(header);\n    if (!acc || acc.size === 0) {\n      acc = new Set(parameters);\n      continue;\n    }\n    for (const parameter of parameters) {\n      if (acc.has(parameter)) {\n        return false;\n      }\n      acc.add(parameter);\n    }\n  }\n  return true;\n};\nexports[\"default\"] = isDisjoint;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pc19kaXNqb2ludC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxVQUFVLEdBQUdBLENBQUMsR0FBR0MsT0FBTyxLQUFLO0VBQy9CLE1BQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDRSxNQUFNLENBQUNDLE9BQU8sQ0FBQztFQUN2QyxJQUFJRixPQUFPLENBQUNHLE1BQU0sS0FBSyxDQUFDLElBQUlILE9BQU8sQ0FBQ0csTUFBTSxLQUFLLENBQUMsRUFBRTtJQUM5QyxPQUFPLElBQUk7RUFDZjtFQUNBLElBQUlDLEdBQUc7RUFDUCxLQUFLLE1BQU1DLE1BQU0sSUFBSUwsT0FBTyxFQUFFO0lBQzFCLE1BQU1NLFVBQVUsR0FBR1osTUFBTSxDQUFDYSxJQUFJLENBQUNGLE1BQU0sQ0FBQztJQUN0QyxJQUFJLENBQUNELEdBQUcsSUFBSUEsR0FBRyxDQUFDSSxJQUFJLEtBQUssQ0FBQyxFQUFFO01BQ3hCSixHQUFHLEdBQUcsSUFBSUssR0FBRyxDQUFDSCxVQUFVLENBQUM7TUFDekI7SUFDSjtJQUNBLEtBQUssTUFBTUksU0FBUyxJQUFJSixVQUFVLEVBQUU7TUFDaEMsSUFBSUYsR0FBRyxDQUFDTyxHQUFHLENBQUNELFNBQVMsQ0FBQyxFQUFFO1FBQ3BCLE9BQU8sS0FBSztNQUNoQjtNQUNBTixHQUFHLENBQUNRLEdBQUcsQ0FBQ0YsU0FBUyxDQUFDO0lBQ3RCO0VBQ0o7RUFDQSxPQUFPLElBQUk7QUFDZixDQUFDO0FBQ0RkLGtCQUFlLEdBQUdFLFVBQVUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvaXNfZGlzam9pbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpc0Rpc2pvaW50ID0gKC4uLmhlYWRlcnMpID0+IHtcbiAgICBjb25zdCBzb3VyY2VzID0gaGVhZGVycy5maWx0ZXIoQm9vbGVhbik7XG4gICAgaWYgKHNvdXJjZXMubGVuZ3RoID09PSAwIHx8IHNvdXJjZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgYWNjO1xuICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIHNvdXJjZXMpIHtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IE9iamVjdC5rZXlzKGhlYWRlcik7XG4gICAgICAgIGlmICghYWNjIHx8IGFjYy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBhY2MgPSBuZXcgU2V0KHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgcGFyYW1ldGVycykge1xuICAgICAgICAgICAgaWYgKGFjYy5oYXMocGFyYW1ldGVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFjYy5hZGQocGFyYW1ldGVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Rpc2pvaW50O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNEaXNqb2ludCIsImhlYWRlcnMiLCJzb3VyY2VzIiwiZmlsdGVyIiwiQm9vbGVhbiIsImxlbmd0aCIsImFjYyIsImhlYWRlciIsInBhcmFtZXRlcnMiLCJrZXlzIiwic2l6ZSIsIlNldCIsInBhcmFtZXRlciIsImhhcyIsImFkZCIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_disjoint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nfunction isObjectLike(value) {\n  return typeof value === 'object' && value !== null;\n}\nfunction isObject(input) {\n  if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') {\n    return false;\n  }\n  if (Object.getPrototypeOf(input) === null) {\n    return true;\n  }\n  let proto = input;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(input) === proto;\n}\nexports[\"default\"] = isObject;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pc19vYmplY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0QsU0FBU0MsWUFBWUEsQ0FBQ0QsS0FBSyxFQUFFO0VBQ3pCLE9BQU8sT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSUEsS0FBSyxLQUFLLElBQUk7QUFDdEQ7QUFDQSxTQUFTRSxRQUFRQSxDQUFDQyxLQUFLLEVBQUU7RUFDckIsSUFBSSxDQUFDRixZQUFZLENBQUNFLEtBQUssQ0FBQyxJQUFJTixNQUFNLENBQUNPLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNILEtBQUssQ0FBQyxLQUFLLGlCQUFpQixFQUFFO0lBQ3JGLE9BQU8sS0FBSztFQUNoQjtFQUNBLElBQUlOLE1BQU0sQ0FBQ1UsY0FBYyxDQUFDSixLQUFLLENBQUMsS0FBSyxJQUFJLEVBQUU7SUFDdkMsT0FBTyxJQUFJO0VBQ2Y7RUFDQSxJQUFJSyxLQUFLLEdBQUdMLEtBQUs7RUFDakIsT0FBT04sTUFBTSxDQUFDVSxjQUFjLENBQUNDLEtBQUssQ0FBQyxLQUFLLElBQUksRUFBRTtJQUMxQ0EsS0FBSyxHQUFHWCxNQUFNLENBQUNVLGNBQWMsQ0FBQ0MsS0FBSyxDQUFDO0VBQ3hDO0VBQ0EsT0FBT1gsTUFBTSxDQUFDVSxjQUFjLENBQUNKLEtBQUssQ0FBQyxLQUFLSyxLQUFLO0FBQ2pEO0FBQ0FULGtCQUFlLEdBQUdHLFFBQVEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvaXNfb2JqZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGw7XG59XG5mdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgIGlmICghaXNPYmplY3RMaWtlKGlucHV0KSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5wdXQpID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgcHJvdG8gPSBpbnB1dDtcbiAgICB3aGlsZSAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSAhPT0gbnVsbCkge1xuICAgICAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5wdXQpID09PSBwcm90bztcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGlzT2JqZWN0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNPYmplY3RMaWtlIiwiaXNPYmplY3QiLCJpbnB1dCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImdldFByb3RvdHlwZU9mIiwicHJvdG8iLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js":
/*!******************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.bitLength = void 0;\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst random_js_1 = __webpack_require__(/*! ../runtime/random.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\");\nfunction bitLength(alg) {\n  switch (alg) {\n    case 'A128GCM':\n    case 'A128GCMKW':\n    case 'A192GCM':\n    case 'A192GCMKW':\n    case 'A256GCM':\n    case 'A256GCMKW':\n      return 96;\n    case 'A128CBC-HS256':\n    case 'A192CBC-HS384':\n    case 'A256CBC-HS512':\n      return 128;\n    default:\n      throw new errors_js_1.JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);\n  }\n}\nexports.bitLength = bitLength;\nexports[\"default\"] = alg => (0, random_js_1.default)(new Uint8Array(bitLength(alg) >> 3));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9pdi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQzFCLE1BQU1HLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyw0R0FBbUIsQ0FBQztBQUNoRCxNQUFNQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsa0hBQXNCLENBQUM7QUFDbkQsU0FBU0YsU0FBU0EsQ0FBQ0ksR0FBRyxFQUFFO0VBQ3BCLFFBQVFBLEdBQUc7SUFDUCxLQUFLLFNBQVM7SUFDZCxLQUFLLFdBQVc7SUFDaEIsS0FBSyxTQUFTO0lBQ2QsS0FBSyxXQUFXO0lBQ2hCLEtBQUssU0FBUztJQUNkLEtBQUssV0FBVztNQUNaLE9BQU8sRUFBRTtJQUNiLEtBQUssZUFBZTtJQUNwQixLQUFLLGVBQWU7SUFDcEIsS0FBSyxlQUFlO01BQ2hCLE9BQU8sR0FBRztJQUNkO01BQ0ksTUFBTSxJQUFJSCxXQUFXLENBQUNJLGdCQUFnQixDQUFFLDhCQUE2QkQsR0FBSSxFQUFDLENBQUM7RUFDbkY7QUFDSjtBQUNBTixpQkFBaUIsR0FBR0UsU0FBUztBQUM3QkYsa0JBQWUsR0FBSU0sR0FBRyxJQUFLLENBQUMsQ0FBQyxFQUFFRCxXQUFXLENBQUNHLE9BQU8sRUFBRSxJQUFJQyxVQUFVLENBQUNQLFNBQVMsQ0FBQ0ksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9saWIvaXYuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJpdExlbmd0aCA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgcmFuZG9tX2pzXzEgPSByZXF1aXJlKFwiLi4vcnVudGltZS9yYW5kb20uanNcIik7XG5mdW5jdGlvbiBiaXRMZW5ndGgoYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnQTEyOEdDTSc6XG4gICAgICAgIGNhc2UgJ0ExMjhHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ00nOlxuICAgICAgICBjYXNlICdBMTkyR0NNS1cnOlxuICAgICAgICBjYXNlICdBMjU2R0NNJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTUtXJzpcbiAgICAgICAgICAgIHJldHVybiA5NjtcbiAgICAgICAgY2FzZSAnQTEyOENCQy1IUzI1Nic6XG4gICAgICAgIGNhc2UgJ0ExOTJDQkMtSFMzODQnOlxuICAgICAgICBjYXNlICdBMjU2Q0JDLUhTNTEyJzpcbiAgICAgICAgICAgIHJldHVybiAxMjg7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgVW5zdXBwb3J0ZWQgSldFIEFsZ29yaXRobTogJHthbGd9YCk7XG4gICAgfVxufVxuZXhwb3J0cy5iaXRMZW5ndGggPSBiaXRMZW5ndGg7XG5leHBvcnRzLmRlZmF1bHQgPSAoYWxnKSA9PiAoMCwgcmFuZG9tX2pzXzEuZGVmYXVsdCkobmV3IFVpbnQ4QXJyYXkoYml0TGVuZ3RoKGFsZykgPj4gMykpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYml0TGVuZ3RoIiwiZXJyb3JzX2pzXzEiLCJyZXF1aXJlIiwicmFuZG9tX2pzXzEiLCJhbGciLCJKT1NFTm90U3VwcG9ydGVkIiwiZGVmYXVsdCIsIlVpbnQ4QXJyYXkiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/iv.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ./buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst epoch_js_1 = __webpack_require__(/*! ./epoch.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/epoch.js\");\nconst secs_js_1 = __webpack_require__(/*! ./secs.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js\");\nconst is_object_js_1 = __webpack_require__(/*! ./is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst normalizeTyp = value => value.toLowerCase().replace(/^application\\//, '');\nconst checkAudiencePresence = (audPayload, audOption) => {\n  if (typeof audPayload === 'string') {\n    return audOption.includes(audPayload);\n  }\n  if (Array.isArray(audPayload)) {\n    return audOption.some(Set.prototype.has.bind(new Set(audPayload)));\n  }\n  return false;\n};\nexports[\"default\"] = (protectedHeader, encodedPayload, options = {}) => {\n  const {\n    typ\n  } = options;\n  if (typ && (typeof protectedHeader.typ !== 'string' || normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {\n    throw new errors_js_1.JWTClaimValidationFailed('unexpected \"typ\" JWT header value', 'typ', 'check_failed');\n  }\n  let payload;\n  try {\n    payload = JSON.parse(buffer_utils_js_1.decoder.decode(encodedPayload));\n  } catch {}\n  if (!(0, is_object_js_1.default)(payload)) {\n    throw new errors_js_1.JWTInvalid('JWT Claims Set must be a top-level JSON object');\n  }\n  const {\n    requiredClaims = [],\n    issuer,\n    subject,\n    audience,\n    maxTokenAge\n  } = options;\n  if (maxTokenAge !== undefined) requiredClaims.push('iat');\n  if (audience !== undefined) requiredClaims.push('aud');\n  if (subject !== undefined) requiredClaims.push('sub');\n  if (issuer !== undefined) requiredClaims.push('iss');\n  for (const claim of new Set(requiredClaims.reverse())) {\n    if (!(claim in payload)) {\n      throw new errors_js_1.JWTClaimValidationFailed(`missing required \"${claim}\" claim`, claim, 'missing');\n    }\n  }\n  if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {\n    throw new errors_js_1.JWTClaimValidationFailed('unexpected \"iss\" claim value', 'iss', 'check_failed');\n  }\n  if (subject && payload.sub !== subject) {\n    throw new errors_js_1.JWTClaimValidationFailed('unexpected \"sub\" claim value', 'sub', 'check_failed');\n  }\n  if (audience && !checkAudiencePresence(payload.aud, typeof audience === 'string' ? [audience] : audience)) {\n    throw new errors_js_1.JWTClaimValidationFailed('unexpected \"aud\" claim value', 'aud', 'check_failed');\n  }\n  let tolerance;\n  switch (typeof options.clockTolerance) {\n    case 'string':\n      tolerance = (0, secs_js_1.default)(options.clockTolerance);\n      break;\n    case 'number':\n      tolerance = options.clockTolerance;\n      break;\n    case 'undefined':\n      tolerance = 0;\n      break;\n    default:\n      throw new TypeError('Invalid clockTolerance option type');\n  }\n  const {\n    currentDate\n  } = options;\n  const now = (0, epoch_js_1.default)(currentDate || new Date());\n  if ((payload.iat !== undefined || maxTokenAge) && typeof payload.iat !== 'number') {\n    throw new errors_js_1.JWTClaimValidationFailed('\"iat\" claim must be a number', 'iat', 'invalid');\n  }\n  if (payload.nbf !== undefined) {\n    if (typeof payload.nbf !== 'number') {\n      throw new errors_js_1.JWTClaimValidationFailed('\"nbf\" claim must be a number', 'nbf', 'invalid');\n    }\n    if (payload.nbf > now + tolerance) {\n      throw new errors_js_1.JWTClaimValidationFailed('\"nbf\" claim timestamp check failed', 'nbf', 'check_failed');\n    }\n  }\n  if (payload.exp !== undefined) {\n    if (typeof payload.exp !== 'number') {\n      throw new errors_js_1.JWTClaimValidationFailed('\"exp\" claim must be a number', 'exp', 'invalid');\n    }\n    if (payload.exp <= now - tolerance) {\n      throw new errors_js_1.JWTExpired('\"exp\" claim timestamp check failed', 'exp', 'check_failed');\n    }\n  }\n  if (maxTokenAge) {\n    const age = now - payload.iat;\n    const max = typeof maxTokenAge === 'number' ? maxTokenAge : (0, secs_js_1.default)(maxTokenAge);\n    if (age - tolerance > max) {\n      throw new errors_js_1.JWTExpired('\"iat\" claim timestamp check failed (too far in the past)', 'iat', 'check_failed');\n    }\n    if (age < 0 - tolerance) {\n      throw new errors_js_1.JWTClaimValidationFailed('\"iat\" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');\n    }\n  }\n  return payload;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9qd3RfY2xhaW1zX3NldC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXLEdBQUdDLG1CQUFPLENBQUMsNEdBQW1CLENBQUM7QUFDaEQsTUFBTUMsaUJBQWlCLEdBQUdELG1CQUFPLENBQUMsaUhBQW1CLENBQUM7QUFDdEQsTUFBTUUsVUFBVSxHQUFHRixtQkFBTyxDQUFDLG1HQUFZLENBQUM7QUFDeEMsTUFBTUcsU0FBUyxHQUFHSCxtQkFBTyxDQUFDLGlHQUFXLENBQUM7QUFDdEMsTUFBTUksY0FBYyxHQUFHSixtQkFBTyxDQUFDLDJHQUFnQixDQUFDO0FBQ2hELE1BQU1LLFlBQVksR0FBSVAsS0FBSyxJQUFLQSxLQUFLLENBQUNRLFdBQVcsQ0FBQyxDQUFDLENBQUNDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQUM7QUFDakYsTUFBTUMscUJBQXFCLEdBQUdBLENBQUNDLFVBQVUsRUFBRUMsU0FBUyxLQUFLO0VBQ3JELElBQUksT0FBT0QsVUFBVSxLQUFLLFFBQVEsRUFBRTtJQUNoQyxPQUFPQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0YsVUFBVSxDQUFDO0VBQ3pDO0VBQ0EsSUFBSUcsS0FBSyxDQUFDQyxPQUFPLENBQUNKLFVBQVUsQ0FBQyxFQUFFO0lBQzNCLE9BQU9DLFNBQVMsQ0FBQ0ksSUFBSSxDQUFDQyxHQUFHLENBQUNDLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDQyxJQUFJLENBQUMsSUFBSUgsR0FBRyxDQUFDTixVQUFVLENBQUMsQ0FBQyxDQUFDO0VBQ3RFO0VBQ0EsT0FBTyxLQUFLO0FBQ2hCLENBQUM7QUFDRFosa0JBQWUsR0FBRyxDQUFDdUIsZUFBZSxFQUFFQyxjQUFjLEVBQUVDLE9BQU8sR0FBRyxDQUFDLENBQUMs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QUFJcEQsV0FBVyxDQUFDeUIsd0JBQXdCLENBQUMsOEJBQThCLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQztJQUNwRztJQUNBLElBQUlDLE9BQU8sQ0FBQzBCLEdBQUcsSUFBSUosR0FBRyxHQUFHSixTQUFTLEVBQUU7TUFDaEMsTUFBTSxJQUFJNUMsV0FBVyxDQUFDcUQsVUFBVSxDQUFDLG9DQUFvQyxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUM7SUFDakc7RUFDSjtFQUNBLElBQUlqQixXQUFXLEVBQUU7SUFDYixNQUFNa0IsR0FBRyxHQUFHTixHQUFHLEdBQUd0QixPQUFPLENBQUN3QixHQUFHO0lBQzdCLE1BQU1LLEdBQUcsR0FBRyxPQUFPbkIsV0FBVyxLQUFLLFFBQVEsR0FBR0EsV0FBVyxHQUFHLENBQUMsQ0FBQyxFQUFFaEMsU0FBUyxDQUFDZ0IsT0FBTyxFQUFFZ0IsV0FBVyxDQUFDO0lBQy9GLElBQUlrQixHQUFHLEdBQUdWLFNBQVMsR0FBR1csR0FBRyxFQUFFO01BQ3ZCLE1BQU0sSUFBSXZELFdBQVcsQ0FBQ3FELFVBQVUsQ0FBQywwREFBMEQsRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDO0lBQ3ZIO0lBQ0EsSUFBSUMsR0FBRyxHQUFHLENBQUMsR0FBR1YsU0FBUyxFQUFFO01BQ3JCLE1BQU0sSUFBSTVDLFdBQVcsQ0FBQ3lCLHdCQUF3QixDQUFDLCtEQUErRCxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUM7SUFDMUk7RUFDSjtFQUNBLE9BQU9DLE9BQU87QUFDbEIsQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9qd3RfY2xhaW1zX3NldC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi9idWZmZXJfdXRpbHMuanNcIik7XG5jb25zdCBlcG9jaF9qc18xID0gcmVxdWlyZShcIi4vZXBvY2guanNcIik7XG5jb25zdCBzZWNzX2pzXzEgPSByZXF1aXJlKFwiLi9zZWNzLmpzXCIpO1xuY29uc3QgaXNfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19vYmplY3QuanNcIik7XG5jb25zdCBub3JtYWxpemVUeXAgPSAodmFsdWUpID0+IHZhbHVlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXmFwcGxpY2F0aW9uXFwvLywgJycpO1xuY29uc3QgY2hlY2tBdWRpZW5jZVByZXNlbmNlID0gKGF1ZFBheWxvYWQsIGF1ZE9wdGlvbikgPT4ge1xuICAgIGlmICh0eXBlb2YgYXVkUGF5bG9hZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGF1ZE9wdGlvbi5pbmNsdWRlcyhhdWRQYXlsb2FkKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXVkUGF5bG9hZCkpIHtcbiAgICAgICAgcmV0dXJuIGF1ZE9wdGlvbi5zb21lKFNldC5wcm90b3R5cGUuaGFzLmJpbmQobmV3IFNldChhdWRQYXlsb2FkKSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gKHByb3RlY3RlZEhlYWRlciwgZW5jb2RlZFBheWxvYWQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgdHlwIH0gPSBvcHRpb25zO1xuICAgIGlmICh0eXAgJiZcbiAgICAgICAgKHR5cGVvZiBwcm90ZWN0ZWRIZWFkZXIudHlwICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgbm9ybWFsaXplVHlwKHByb3RlY3RlZEhlYWRlci50eXApICE9PSBub3JtYWxpemVUeXAodHlwKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgndW5leHBlY3RlZCBcInR5cFwiIEpXVCBoZWFkZXIgdmFsdWUnLCAndHlwJywgJ2NoZWNrX2ZhaWxlZCcpO1xuICAgIH1cbiAgICBsZXQgcGF5bG9hZDtcbiAgICB0cnkge1xuICAgICAgICBwYXlsb2FkID0gSlNPTi5wYXJzZShidWZmZXJfdXRpbHNfanNfMS5kZWNvZGVyLmRlY29kZShlbmNvZGVkUGF5bG9hZCkpO1xuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgfVxuICAgIGlmICghKDAsIGlzX29iamVjdF9qc18xLmRlZmF1bHQpKHBheWxvYWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdKV1QgQ2xhaW1zIFNldCBtdXN0IGJlIGEgdG9wLWxldmVsIEpTT04gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgcmVxdWlyZWRDbGFpbXMgPSBbXSwgaXNzdWVyLCBzdWJqZWN0LCBhdWRpZW5jZSwgbWF4VG9rZW5BZ2UgfSA9IG9wdGlvbnM7XG4gICAgaWYgKG1heFRva2VuQWdlICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJlcXVpcmVkQ2xhaW1zLnB1c2goJ2lhdCcpO1xuICAgIGlmIChhdWRpZW5jZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXF1aXJlZENsYWltcy5wdXNoKCdhdWQnKTtcbiAgICBpZiAoc3ViamVjdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXF1aXJlZENsYWltcy5wdXNoKCdzdWInKTtcbiAgICBpZiAoaXNzdWVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJlcXVpcmVkQ2xhaW1zLnB1c2goJ2lzcycpO1xuICAgIGZvciAoY29uc3QgY2xhaW0gb2YgbmV3IFNldChyZXF1aXJlZENsYWltcy5yZXZlcnNlKCkpKSB7XG4gICAgICAgIGlmICghKGNsYWltIGluIHBheWxvYWQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKGBtaXNzaW5nIHJlcXVpcmVkIFwiJHtjbGFpbX1cIiBjbGFpbWAsIGNsYWltLCAnbWlzc2luZycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc3N1ZXIgJiYgIShBcnJheS5pc0FycmF5KGlzc3VlcikgPyBpc3N1ZXIgOiBbaXNzdWVyXSkuaW5jbHVkZXMocGF5bG9hZC5pc3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3VuZXhwZWN0ZWQgXCJpc3NcIiBjbGFpbSB2YWx1ZScsICdpc3MnLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgfVxuICAgIGlmIChzdWJqZWN0ICYmIHBheWxvYWQuc3ViICE9PSBzdWJqZWN0KSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ3VuZXhwZWN0ZWQgXCJzdWJcIiBjbGFpbSB2YWx1ZScsICdzdWInLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgfVxuICAgIGlmIChhdWRpZW5jZSAmJlxuICAgICAgICAhY2hlY2tBdWRpZW5jZVByZXNlbmNlKHBheWxvYWQuYXVkLCB0eXBlb2YgYXVkaWVuY2UgPT09ICdzdHJpbmcnID8gW2F1ZGllbmNlXSA6IGF1ZGllbmNlKSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCd1bmV4cGVjdGVkIFwiYXVkXCIgY2xhaW0gdmFsdWUnLCAnYXVkJywgJ2NoZWNrX2ZhaWxlZCcpO1xuICAgIH1cbiAgICBsZXQgdG9sZXJhbmNlO1xuICAgIHN3aXRjaCAodHlwZW9mIG9wdGlvbnMuY2xvY2tUb2xlcmFuY2UpIHtcbiAgICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgICAgIHRvbGVyYW5jZSA9ICgwLCBzZWNzX2pzXzEuZGVmYXVsdCkob3B0aW9ucy5jbG9ja1RvbGVyYW5jZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIHRvbGVyYW5jZSA9IG9wdGlvbnMuY2xvY2tUb2xlcmFuY2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgIHRvbGVyYW5jZSA9IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2xvY2tUb2xlcmFuY2Ugb3B0aW9uIHR5cGUnKTtcbiAgICB9XG4gICAgY29uc3QgeyBjdXJyZW50RGF0ZSB9ID0gb3B0aW9ucztcbiAgICBjb25zdCBub3cgPSAoMCwgZXBvY2hfanNfMS5kZWZhdWx0KShjdXJyZW50RGF0ZSB8fCBuZXcgRGF0ZSgpKTtcbiAgICBpZiAoKHBheWxvYWQuaWF0ICE9PSB1bmRlZmluZWQgfHwgbWF4VG9rZW5BZ2UpICYmIHR5cGVvZiBwYXlsb2FkLmlhdCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgnXCJpYXRcIiBjbGFpbSBtdXN0IGJlIGEgbnVtYmVyJywgJ2lhdCcsICdpbnZhbGlkJyk7XG4gICAgfVxuICAgIGlmIChwYXlsb2FkLm5iZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5uYmYgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUQ2xhaW1WYWxpZGF0aW9uRmFpbGVkKCdcIm5iZlwiIGNsYWltIG11c3QgYmUgYSBudW1iZXInLCAnbmJmJywgJ2ludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF5bG9hZC5uYmYgPiBub3cgKyB0b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ1wibmJmXCIgY2xhaW0gdGltZXN0YW1wIGNoZWNrIGZhaWxlZCcsICduYmYnLCAnY2hlY2tfZmFpbGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBheWxvYWQuZXhwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkLmV4cCAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RDbGFpbVZhbGlkYXRpb25GYWlsZWQoJ1wiZXhwXCIgY2xhaW0gbXVzdCBiZSBhIG51bWJlcicsICdleHAnLCAnaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXlsb2FkLmV4cCA8PSBub3cgLSB0b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RFeHBpcmVkKCdcImV4cFwiIGNsYWltIHRpbWVzdGFtcCBjaGVjayBmYWlsZWQnLCAnZXhwJywgJ2NoZWNrX2ZhaWxlZCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChtYXhUb2tlbkFnZSkge1xuICAgICAgICBjb25zdCBhZ2UgPSBub3cgLSBwYXlsb2FkLmlhdDtcbiAgICAgICAgY29uc3QgbWF4ID0gdHlwZW9mIG1heFRva2VuQWdlID09PSAnbnVtYmVyJyA/IG1heFRva2VuQWdlIDogKDAsIHNlY3NfanNfMS5kZWZhdWx0KShtYXhUb2tlbkFnZSk7XG4gICAgICAgIGlmIChhZ2UgLSB0b2xlcmFuY2UgPiBtYXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RFeHBpcmVkKCdcImlhdFwiIGNsYWltIHRpbWVzdGFtcCBjaGVjayBmYWlsZWQgKHRvbyBmYXIgaW4gdGhlIHBhc3QpJywgJ2lhdCcsICdjaGVja19mYWlsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWdlIDwgMCAtIHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCgnXCJpYXRcIiBjbGFpbSB0aW1lc3RhbXAgY2hlY2sgZmFpbGVkIChpdCBzaG91bGQgYmUgaW4gdGhlIHBhc3QpJywgJ2lhdCcsICdjaGVja19mYWlsZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGF5bG9hZDtcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlcnJvcnNfanNfMSIsInJlcXVpcmUiLCJidWZmZXJfdXRpbHNfanNfMSIsImVwb2NoX2pzXzEiLCJzZWNzX2pzXzEiLCJpc19vYmplY3RfanNfMSIsIm5vcm1hbGl6ZVR5cCIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsImNoZWNrQXVkaWVuY2VQcmVzZW5jZSIsImF1ZFBheWxvYWQiLCJhdWRPcHRpb24iLCJpbmNsdWRlcyIsIkFycmF5IiwiaXNBcnJheSIsInNvbWUiLCJTZXQiLCJwcm90b3R5cGUiLCJoYXMiLCJiaW5kIiwiZGVmYXVsdCIsInByb3RlY3RlZEhlYWRlciIsImVuY29kZWRQYXlsb2FkIiwib3B0aW9ucyIsInR5cCIsIkpXVENsYWltVmFsaWRhdGlvbkZhaWxlZCIsInBheWxvYWQiLCJKU09OIiwicGFyc2UiLCJkZWNvZGVyIiwiZGVjb2RlIiwiSldUSW52YWxpZCIsInJlcXVpcmVkQ2xhaW1zIiwiaXNzdWVyIiwic3ViamVjdCIsImF1ZGllbmNlIiwibWF4VG9rZW5BZ2UiLCJ1bmRlZmluZWQiLCJwdXNoIiwiY2xhaW0iLCJyZXZlcnNlIiwiaXNzIiwic3ViIiwiYXVkIiwidG9sZXJhbmNlIiwiY2xvY2tUb2xlcmFuY2UiLCJUeXBlRXJyb3IiLCJjdXJyZW50RGF0ZSIsIm5vdyIsIkRhdGUiLCJpYXQiLCJuYmYiLCJleHAiLCJKV1RFeHBpcmVkIiwiYWdlIiwibWF4Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/jwt_claims_set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js":
/*!********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst minute = 60;\nconst hour = minute * 60;\nconst day = hour * 24;\nconst week = day * 7;\nconst year = day * 365.25;\nconst REGEX = /^(\\d+|\\d+\\.\\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;\nexports[\"default\"] = str => {\n  const matched = REGEX.exec(str);\n  if (!matched) {\n    throw new TypeError('Invalid time period format');\n  }\n  const value = parseFloat(matched[1]);\n  const unit = matched[2].toLowerCase();\n  switch (unit) {\n    case 'sec':\n    case 'secs':\n    case 'second':\n    case 'seconds':\n    case 's':\n      return Math.round(value);\n    case 'minute':\n    case 'minutes':\n    case 'min':\n    case 'mins':\n    case 'm':\n      return Math.round(value * minute);\n    case 'hour':\n    case 'hours':\n    case 'hr':\n    case 'hrs':\n    case 'h':\n      return Math.round(value * hour);\n    case 'day':\n    case 'days':\n    case 'd':\n      return Math.round(value * day);\n    case 'week':\n    case 'weeks':\n    case 'w':\n      return Math.round(value * week);\n    default:\n      return Math.round(value * year);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9zZWNzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE1BQU0sR0FBRyxFQUFFO0FBQ2pCLE1BQU1DLElBQUksR0FBR0QsTUFBTSxHQUFHLEVBQUU7QUFDeEIsTUFBTUUsR0FBRyxHQUFHRCxJQUFJLEdBQUcsRUFBRTtBQUNyQixNQUFNRSxJQUFJLEdBQUdELEdBQUcsR0FBRyxDQUFDO0FBQ3BCLE1BQU1FLElBQUksR0FBR0YsR0FBRyxHQUFHLE1BQU07QUFDekIsTUFBTUcsS0FBSyxHQUFHLHFHQUFxRztBQUNuSFAsa0JBQWUsR0FBSVMsR0FBRyxJQUFLO0VBQ3ZCLE1BQU1DLE9BQU8sR0FBR0gsS0FBSyxDQUFDSSxJQUFJLENBQUNGLEdBQUcsQ0FBQztFQUMvQixJQUFJLENBQUNDLE9BQU8sRUFBRTtJQUNWLE1BQU0sSUFBSUUsU0FBUyxDQUFDLDRCQUE0QixDQUFDO0VBQ3JEO0VBQ0EsTUFBTVgsS0FBSyxHQUFHWSxVQUFVLENBQUNILE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNwQyxNQUFNSSxJQUFJLEdBQUdKLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQ0ssV0FBVyxDQUFDLENBQUM7RUFDckMsUUFBUUQsSUFBSTtJQUNSLEtBQUssS0FBSztJQUNWLEtBQUssTUFBTTtJQUNYLEtBQUssUUFBUTtJQUNiLEtBQUssU0FBUztJQUNkLEtBQUssR0FBRztNQUNKLE9BQU9FLElBQUksQ0FBQ0MsS0FBSyxDQUFDaEIsS0FBSyxDQUFDO0lBQzVCLEtBQUssUUFBUTtJQUNiLEtBQUssU0FBUztJQUNkLEtBQUssS0FBSztJQUNWLEtBQUssTUFBTTtJQUNYLEtBQUssR0FBRztNQUNKLE9BQU9lLElBQUksQ0FBQ0MsS0FBSyxDQUFDaEIsS0FBSyxHQUFHQyxNQUFNLENBQUM7SUFDckMsS0FBSyxNQUFNO0lBQ1gsS0FBSyxPQUFPO0lBQ1osS0FBSyxJQUFJO0lBQ1QsS0FBSyxLQUFLO0lBQ1YsS0FBSyxHQUFHO01BQ0osT0FBT2MsSUFBSSxDQUFDQyxLQUFLLENBQUNoQixLQUFLLEdBQUdFLElBQUksQ0FBQztJQUNuQyxLQUFLLEtBQUs7SUFDVixLQUFLLE1BQU07SUFDWCxLQUFLLEdBQUc7TUFDSixPQUFPYSxJQUFJLENBQUNDLEtBQUssQ0FBQ2hCLEtBQUssR0FBR0csR0FBRyxDQUFDO0lBQ2xDLEtBQUssTUFBTTtJQUNYLEtBQUssT0FBTztJQUNaLEtBQUssR0FBRztNQUNKLE9BQU9ZLElBQUksQ0FBQ0MsS0FBSyxDQUFDaEIsS0FBSyxHQUFHSSxJQUFJLENBQUM7SUFDbkM7TUFDSSxPQUFPVyxJQUFJLENBQUNDLEtBQUssQ0FBQ2hCLEtBQUssR0FBR0ssSUFBSSxDQUFDO0VBQ3ZDO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi9zZWNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbWludXRlID0gNjA7XG5jb25zdCBob3VyID0gbWludXRlICogNjA7XG5jb25zdCBkYXkgPSBob3VyICogMjQ7XG5jb25zdCB3ZWVrID0gZGF5ICogNztcbmNvbnN0IHllYXIgPSBkYXkgKiAzNjUuMjU7XG5jb25zdCBSRUdFWCA9IC9eKFxcZCt8XFxkK1xcLlxcZCspID8oc2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx3ZWVrcz98d3x5ZWFycz98eXJzP3x5KSQvaTtcbmV4cG9ydHMuZGVmYXVsdCA9IChzdHIpID0+IHtcbiAgICBjb25zdCBtYXRjaGVkID0gUkVHRVguZXhlYyhzdHIpO1xuICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHRpbWUgcGVyaW9kIGZvcm1hdCcpO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IHBhcnNlRmxvYXQobWF0Y2hlZFsxXSk7XG4gICAgY29uc3QgdW5pdCA9IG1hdGNoZWRbMl0udG9Mb3dlckNhc2UoKTtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgY2FzZSAnc2VjJzpcbiAgICAgICAgY2FzZSAnc2Vjcyc6XG4gICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgY2FzZSAnbWludXRlcyc6XG4gICAgICAgIGNhc2UgJ21pbic6XG4gICAgICAgIGNhc2UgJ21pbnMnOlxuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogbWludXRlKTtcbiAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgIGNhc2UgJ2hvdXJzJzpcbiAgICAgICAgY2FzZSAnaHInOlxuICAgICAgICBjYXNlICdocnMnOlxuICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogaG91cik7XG4gICAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIGNhc2UgJ2RheXMnOlxuICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogZGF5KTtcbiAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIGNhc2UgJ3dlZWtzJzpcbiAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIHdlZWspO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiB5ZWFyKTtcbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibWludXRlIiwiaG91ciIsImRheSIsIndlZWsiLCJ5ZWFyIiwiUkVHRVgiLCJkZWZhdWx0Iiwic3RyIiwibWF0Y2hlZCIsImV4ZWMiLCJUeXBlRXJyb3IiLCJwYXJzZUZsb2F0IiwidW5pdCIsInRvTG93ZXJDYXNlIiwiTWF0aCIsInJvdW5kIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/secs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst validateAlgorithms = (option, algorithms) => {\n  if (algorithms !== undefined && (!Array.isArray(algorithms) || algorithms.some(s => typeof s !== 'string'))) {\n    throw new TypeError(`\"${option}\" option must be an array of strings`);\n  }\n  if (!algorithms) {\n    return undefined;\n  }\n  return new Set(algorithms);\n};\nexports[\"default\"] = validateAlgorithms;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi92YWxpZGF0ZV9hbGdvcml0aG1zLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGtCQUFrQixHQUFHQSxDQUFDQyxNQUFNLEVBQUVDLFVBQVUsS0FBSztFQUMvQyxJQUFJQSxVQUFVLEtBQUtDLFNBQVMsS0FDdkIsQ0FBQ0MsS0FBSyxDQUFDQyxPQUFPLENBQUNILFVBQVUsQ0FBQyxJQUFJQSxVQUFVLENBQUNJLElBQUksQ0FBRUMsQ0FBQyxJQUFLLE9BQU9BLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxFQUFFO0lBQy9FLE1BQU0sSUFBSUMsU0FBUyxDQUFFLElBQUdQLE1BQU8sc0NBQXFDLENBQUM7RUFDekU7RUFDQSxJQUFJLENBQUNDLFVBQVUsRUFBRTtJQUNiLE9BQU9DLFNBQVM7RUFDcEI7RUFDQSxPQUFPLElBQUlNLEdBQUcsQ0FBQ1AsVUFBVSxDQUFDO0FBQzlCLENBQUM7QUFDREosa0JBQWUsR0FBR0Usa0JBQWtCIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvbGliL3ZhbGlkYXRlX2FsZ29yaXRobXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2YWxpZGF0ZUFsZ29yaXRobXMgPSAob3B0aW9uLCBhbGdvcml0aG1zKSA9PiB7XG4gICAgaWYgKGFsZ29yaXRobXMgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAoIUFycmF5LmlzQXJyYXkoYWxnb3JpdGhtcykgfHwgYWxnb3JpdGhtcy5zb21lKChzKSA9PiB0eXBlb2YgcyAhPT0gJ3N0cmluZycpKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBcIiR7b3B0aW9ufVwiIG9wdGlvbiBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3NgKTtcbiAgICB9XG4gICAgaWYgKCFhbGdvcml0aG1zKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2V0KGFsZ29yaXRobXMpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRlQWxnb3JpdGhtcztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZhbGlkYXRlQWxnb3JpdGhtcyIsIm9wdGlvbiIsImFsZ29yaXRobXMiLCJ1bmRlZmluZWQiLCJBcnJheSIsImlzQXJyYXkiLCJzb21lIiwicyIsIlR5cGVFcnJvciIsIlNldCIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_algorithms.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {\n  if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {\n    throw new Err('\"crit\" (Critical) Header Parameter MUST be integrity protected');\n  }\n  if (!protectedHeader || protectedHeader.crit === undefined) {\n    return new Set();\n  }\n  if (!Array.isArray(protectedHeader.crit) || protectedHeader.crit.length === 0 || protectedHeader.crit.some(input => typeof input !== 'string' || input.length === 0)) {\n    throw new Err('\"crit\" (Critical) Header Parameter MUST be an array of non-empty strings when present');\n  }\n  let recognized;\n  if (recognizedOption !== undefined) {\n    recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);\n  } else {\n    recognized = recognizedDefault;\n  }\n  for (const parameter of protectedHeader.crit) {\n    if (!recognized.has(parameter)) {\n      throw new errors_js_1.JOSENotSupported(`Extension Header Parameter \"${parameter}\" is not recognized`);\n    }\n    if (joseHeader[parameter] === undefined) {\n      throw new Err(`Extension Header Parameter \"${parameter}\" is missing`);\n    } else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {\n      throw new Err(`Extension Header Parameter \"${parameter}\" MUST be integrity protected`);\n    }\n  }\n  return new Set(protectedHeader.crit);\n}\nexports[\"default\"] = validateCrit;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi92YWxpZGF0ZV9jcml0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFdBQVcsR0FBR0MsbUJBQU8sQ0FBQyw0R0FBbUIsQ0FBQztBQUNoRCxTQUFTQyxZQUFZQSxDQUFDQyxHQUFHLEVBQUVDLGlCQUFpQixFQUFFQyxnQkFBZ0IsRUFBRUMsZUFBZSxFQUFFQyxVQUFVLEVBQUU7RUFDekYsSUFBSUEsVUFBVSxDQUFDQyxJQUFJLEtBQUtDLFNBQVMsSUFBSUgsZUFBZSxDQUFDRSxJQUFJLEtBQUtDLFNBQVMsRUFBRTtJQUNyRSxNQUFNLElBQUlOLEdBQUcsQ0FBQyxnRUFBZ0UsQ0FBQztFQUNuRjtFQUNBLElBQUksQ0FBQ0csZUFBZSxJQUFJQSxlQUFlLENBQUNFLElBQUksS0FBS0MsU0FBUyxFQUFFO0lBQ3hELE9BQU8sSUFBSUMsR0FBRyxDQUFDLENBQUM7RUFDcEI7RUFDQSxJQUFJLENBQUNDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDTixlQUFlLENBQUNFLElBQUksQ0FBQyxJQUNwQ0YsZUFBZSxDQUFDRSxJQUFJLENBQUNLLE1BQU0sS0FBSyxDQUFDLElBQ2pDUCxlQUFlLENBQUNFLElBQUksQ0FBQ00sSUFBSSxDQUFFQyxLQUFLLElBQUssT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSUEsS0FBSyxDQUFDRixNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUU7SUFDdkYsTUFBTSxJQUFJVixHQUFHLENBQUMsdUZBQXVGLENBQUM7RUFDMUc7RUFDQSxJQUFJYSxVQUFVO0VBQ2QsSUFBSVgsZ0JBQWdCLEtBQUtJLFNBQVMsRUFBRTtJQUNoQ08sVUFBVSxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUFDLEdBQUdyQixNQUFNLENBQUNzQixPQUFPLENBQUNiLGdCQUFnQixDQUFDLEVBQUUsR0FBR0QsaUJBQWlCLENBQUNjLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMvRixDQUFDLE1BQ0k7SUFDREYsVUFBVSxHQUFHWixpQkFBaUI7RUFDbEM7RUFDQSxLQUFLLE1BQU1lLFNBQVMsSUFBSWIsZUFBZSxDQUFDRSxJQUFJLEVBQUU7SUFDMUMsSUFBSSxDQUFDUSxVQUFVLENBQUNJLEdBQUcsQ0FBQ0QsU0FBUyxDQUFDLEVBQUU7TUFDNUIsTUFBTSxJQUFJbkIsV0FBVyxDQUFDcUIsZ0JBQWdCLENBQUUsK0JBQThCRixTQUFVLHFCQUFvQixDQUFDO0lBQ3pHO0lBQ0EsSUFBSVosVUFBVSxDQUFDWSxTQUFTLENBQUMsS0FBS1YsU0FBUyxFQUFFO01BQ3JDLE1BQU0sSUFBSU4sR0FBRyxDQUFFLCtCQUE4QmdCLFNBQVUsY0FBYSxDQUFDO0lBQ3pFLENBQUMsTUFDSSxJQUFJSCxVQUFVLENBQUNNLEdBQUcsQ0FBQ0gsU0FBUyxDQUFDLElBQUliLGVBQWUsQ0FBQ2EsU0FBUyxDQUFDLEtBQUtWLFNBQVMsRUFBRTtNQUM1RSxNQUFNLElBQUlOLEdBQUcsQ0FBRSwrQkFBOEJnQixTQUFVLCtCQUE4QixDQUFDO0lBQzFGO0VBQ0o7RUFDQSxPQUFPLElBQUlULEdBQUcsQ0FBQ0osZUFBZSxDQUFDRSxJQUFJLENBQUM7QUFDeEM7QUFDQVYsa0JBQWUsR0FBR0ksWUFBWSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL2xpYi92YWxpZGF0ZV9jcml0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5mdW5jdGlvbiB2YWxpZGF0ZUNyaXQoRXJyLCByZWNvZ25pemVkRGVmYXVsdCwgcmVjb2duaXplZE9wdGlvbiwgcHJvdGVjdGVkSGVhZGVyLCBqb3NlSGVhZGVyKSB7XG4gICAgaWYgKGpvc2VIZWFkZXIuY3JpdCAhPT0gdW5kZWZpbmVkICYmIHByb3RlY3RlZEhlYWRlci5jcml0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycignXCJjcml0XCIgKENyaXRpY2FsKSBIZWFkZXIgUGFyYW1ldGVyIE1VU1QgYmUgaW50ZWdyaXR5IHByb3RlY3RlZCcpO1xuICAgIH1cbiAgICBpZiAoIXByb3RlY3RlZEhlYWRlciB8fCBwcm90ZWN0ZWRIZWFkZXIuY3JpdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2V0KCk7XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm90ZWN0ZWRIZWFkZXIuY3JpdCkgfHxcbiAgICAgICAgcHJvdGVjdGVkSGVhZGVyLmNyaXQubGVuZ3RoID09PSAwIHx8XG4gICAgICAgIHByb3RlY3RlZEhlYWRlci5jcml0LnNvbWUoKGlucHV0KSA9PiB0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnIHx8IGlucHV0Lmxlbmd0aCA9PT0gMCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycignXCJjcml0XCIgKENyaXRpY2FsKSBIZWFkZXIgUGFyYW1ldGVyIE1VU1QgYmUgYW4gYXJyYXkgb2Ygbm9uLWVtcHR5IHN0cmluZ3Mgd2hlbiBwcmVzZW50Jyk7XG4gICAgfVxuICAgIGxldCByZWNvZ25pemVkO1xuICAgIGlmIChyZWNvZ25pemVkT3B0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVjb2duaXplZCA9IG5ldyBNYXAoWy4uLk9iamVjdC5lbnRyaWVzKHJlY29nbml6ZWRPcHRpb24pLCAuLi5yZWNvZ25pemVkRGVmYXVsdC5lbnRyaWVzKCldKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlY29nbml6ZWQgPSByZWNvZ25pemVkRGVmYXVsdDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBwYXJhbWV0ZXIgb2YgcHJvdGVjdGVkSGVhZGVyLmNyaXQpIHtcbiAgICAgICAgaWYgKCFyZWNvZ25pemVkLmhhcyhwYXJhbWV0ZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgRXh0ZW5zaW9uIEhlYWRlciBQYXJhbWV0ZXIgXCIke3BhcmFtZXRlcn1cIiBpcyBub3QgcmVjb2duaXplZGApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqb3NlSGVhZGVyW3BhcmFtZXRlcl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycihgRXh0ZW5zaW9uIEhlYWRlciBQYXJhbWV0ZXIgXCIke3BhcmFtZXRlcn1cIiBpcyBtaXNzaW5nYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjb2duaXplZC5nZXQocGFyYW1ldGVyKSAmJiBwcm90ZWN0ZWRIZWFkZXJbcGFyYW1ldGVyXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyKGBFeHRlbnNpb24gSGVhZGVyIFBhcmFtZXRlciBcIiR7cGFyYW1ldGVyfVwiIE1VU1QgYmUgaW50ZWdyaXR5IHByb3RlY3RlZGApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgU2V0KHByb3RlY3RlZEhlYWRlci5jcml0KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRlQ3JpdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVycm9yc19qc18xIiwicmVxdWlyZSIsInZhbGlkYXRlQ3JpdCIsIkVyciIsInJlY29nbml6ZWREZWZhdWx0IiwicmVjb2duaXplZE9wdGlvbiIsInByb3RlY3RlZEhlYWRlciIsImpvc2VIZWFkZXIiLCJjcml0IiwidW5kZWZpbmVkIiwiU2V0IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwic29tZSIsImlucHV0IiwicmVjb2duaXplZCIsIk1hcCIsImVudHJpZXMiLCJwYXJhbWV0ZXIiLCJoYXMiLCJKT1NFTm90U3VwcG9ydGVkIiwiZ2V0IiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/validate_crit.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.unwrap = exports.wrap = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst ciphers_js_1 = __webpack_require__(/*! ./ciphers.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nfunction checkKeySize(key, alg) {\n  if (key.symmetricKeySize << 3 !== parseInt(alg.slice(1, 4), 10)) {\n    throw new TypeError(`Invalid key size for alg: ${alg}`);\n  }\n}\nfunction ensureKeyObject(key, alg, usage) {\n  if ((0, is_key_object_js_1.default)(key)) {\n    return key;\n  }\n  if (key instanceof Uint8Array) {\n    return (0, crypto_1.createSecretKey)(key);\n  }\n  if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n    (0, crypto_key_js_1.checkEncCryptoKey)(key, alg, usage);\n    return crypto_1.KeyObject.from(key);\n  }\n  throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, 'Uint8Array'));\n}\nconst wrap = (alg, key, cek) => {\n  const size = parseInt(alg.slice(1, 4), 10);\n  const algorithm = `aes${size}-wrap`;\n  if (!(0, ciphers_js_1.default)(algorithm)) {\n    throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n  }\n  const keyObject = ensureKeyObject(key, alg, 'wrapKey');\n  checkKeySize(keyObject, alg);\n  const cipher = (0, crypto_1.createCipheriv)(algorithm, keyObject, buffer_1.Buffer.alloc(8, 0xa6));\n  return (0, buffer_utils_js_1.concat)(cipher.update(cek), cipher.final());\n};\nexports.wrap = wrap;\nconst unwrap = (alg, key, encryptedKey) => {\n  const size = parseInt(alg.slice(1, 4), 10);\n  const algorithm = `aes${size}-wrap`;\n  if (!(0, ciphers_js_1.default)(algorithm)) {\n    throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n  }\n  const keyObject = ensureKeyObject(key, alg, 'unwrapKey');\n  checkKeySize(keyObject, alg);\n  const cipher = (0, crypto_1.createDecipheriv)(algorithm, keyObject, buffer_1.Buffer.alloc(8, 0xa6));\n  return (0, buffer_utils_js_1.concat)(cipher.update(encryptedKey), cipher.final());\n};\nexports.unwrap = unwrap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.fromX509 = exports.fromSPKI = exports.fromPKCS8 = exports.toPKCS8 = exports.toSPKI = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst genericExport = (keyType, keyFormat, key) => {\n  let keyObject;\n  if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n    if (!key.extractable) {\n      throw new TypeError('CryptoKey is not extractable');\n    }\n    keyObject = crypto_1.KeyObject.from(key);\n  } else if ((0, is_key_object_js_1.default)(key)) {\n    keyObject = key;\n  } else {\n    throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types));\n  }\n  if (keyObject.type !== keyType) {\n    throw new TypeError(`key is not a ${keyType} key`);\n  }\n  return keyObject.export({\n    format: 'pem',\n    type: keyFormat\n  });\n};\nconst toSPKI = key => {\n  return genericExport('public', 'spki', key);\n};\nexports.toSPKI = toSPKI;\nconst toPKCS8 = key => {\n  return genericExport('private', 'pkcs8', key);\n};\nexports.toPKCS8 = toPKCS8;\nconst fromPKCS8 = pem => (0, crypto_1.createPrivateKey)({\n  key: buffer_1.Buffer.from(pem.replace(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\\s)/g, ''), 'base64'),\n  type: 'pkcs8',\n  format: 'der'\n});\nexports.fromPKCS8 = fromPKCS8;\nconst fromSPKI = pem => (0, crypto_1.createPublicKey)({\n  key: buffer_1.Buffer.from(pem.replace(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\\s)/g, ''), 'base64'),\n  type: 'spki',\n  format: 'der'\n});\nexports.fromSPKI = fromSPKI;\nconst fromX509 = pem => (0, crypto_1.createPublicKey)({\n  key: pem,\n  type: 'spki',\n  format: 'pem'\n});\nexports.fromX509 = fromX509;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYXNuMS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUdBLGdCQUFnQixHQUFHQSxpQkFBaUIsR0FBR0EsZUFBZSxHQUFHQSxjQUFjLEdBQUcsS0FBSyxDQUFDO0FBQ25HLE1BQU1PLFFBQVEsR0FBR0MsbUJBQU8sQ0FBQyxzQkFBUSxDQUFDO0FBQ2xDLE1BQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyxzQkFBUSxDQUFDO0FBQ2xDLE1BQU1FLGNBQWMsR0FBR0YsbUJBQU8sQ0FBQywrR0FBZ0IsQ0FBQztBQUNoRCxNQUFNRyxrQkFBa0IsR0FBR0gsbUJBQU8sQ0FBQyx1SEFBb0IsQ0FBQztBQUN4RCxNQUFNSSxzQkFBc0IsR0FBR0osbUJBQU8sQ0FBQyxnSUFBNkIsQ0FBQztBQUNyRSxNQUFNSyxnQkFBZ0IsR0FBR0wsbUJBQU8sQ0FBQyxtSEFBa0IsQ0FBQztBQUNwRCxNQUFNTSxhQUFhLEdBQUdBLENBQUNDLE9BQU8sRUFBRUMsU0FBUyxFQUFFQyxHQUFHLEtBQUs7RUFDL0MsSUFBSUMsU0FBUztFQUNiLElBQUksQ0FBQyxDQUFDLEVBQUVSLGNBQWMsQ0FBQ1MsV0FBVyxFQUFFRixHQUFHLENBQUMsRUFBRTtJQUN0QyxJQUFJLENBQUNBLEdBQUcsQ0FBQ0csV0FBVyxFQUFFO01BQ2xCLE1BQU0sSUFBSUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDO0lBQ3ZEO0lBQ0FILFNBQVMsR0FBR1gsUUFBUSxDQUFDZSxTQUFTLENBQUNDLElBQUksQ0FBQ04sR0FBRyxDQUFDO0VBQzVDLENBQUMsTUFDSSxJQUFJLENBQUMsQ0FBQyxFQUFFTixrQkFBa0IsQ0FBQ2EsT0FBTyxFQUFFUCxHQUFHLENBQUMsRUFBRTtJQUMzQ0MsU0FBUyxHQUFHRCxHQUFHO0VBQ25CLENBQUMsTUFDSTtJQUNELE1BQU0sSUFBSUksU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFVCxzQkFBc0IsQ0FBQ1ksT0FBTyxFQUFFUCxHQUFHLEVBQUUsR0FBR0osZ0JBQWdCLENBQUNZLEtBQUssQ0FBQyxDQUFDO0VBQzVGO0VBQ0EsSUFBSVAsU0FBUyxDQUFDUSxJQUFJLEtBQUtYLE9BQU8sRUFBRTtJQUM1QixNQUFNLElBQUlNLFNBQVMsQ0FBRSxnQkFBZU4sT0FBUSxNQUFLLENBQUM7RUFDdEQ7RUFDQSxPQUFPRyxTQUFTLENBQUNTLE1BQU0sQ0FBQztJQUFFQyxNQUFNLEVBQUUsS0FBSztJQUFFRixJQUFJLEVBQUVWO0VBQVUsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFDRCxNQUFNVixNQUFNLEdBQUlXLEdBQUcsSUFBSztFQUNwQixPQUFPSCxhQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRUcsR0FBRyxDQUFDO0FBQy9DLENBQUM7QUFDRGpCLGNBQWMsR0FBR00sTUFBTTtBQUN2QixNQUFNRCxPQUFPLEdBQUlZLEdBQUcsSUFBSztFQUNyQixPQUFPSCxhQUFhLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRUcsR0FBRyxDQUFDO0FBQ2pELENBQUM7QUFDRGpCLGVBQWUsR0FBR0ssT0FBTztBQUN6QixNQUFNRCxTQUFTLEdBQUl5QixHQUFHLElBQUssQ0FBQyxDQUFDLEVBQUV0QixRQUFRLENBQUN1QixnQkFBZ0IsRUFBRTtFQUN0RGIsR0FBRyxFQUFFUixRQUFRLENBQUNzQixNQUFNLENBQUNSLElBQUksQ0FBQ00sR0FBRyxDQUFDRyxPQUFPLENBQUMsNkNBQTZDLEVBQUUsRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDO0VBQ25HTixJQUFJLEVBQUUsT0FBTztFQUNiRSxNQUFNLEVBQUU7QUFDWixDQUFDLENBQUM7QUFDRjVCLGlCQUFpQixHQUFHSSxTQUFTO0FBQzdCLE1BQU1ELFFBQVEsR0FBSTBCLEdBQUcsSUFBSyxDQUFDLENBQUMsRUFBRXRCLFFBQVEsQ0FBQzBCLGVBQWUsRUFBRTtFQUNwRGhCLEdBQUcsRUFBRVIsUUFBUSxDQUFDc0IsTUFBTSxDQUFDUixJQUFJLENBQUNNLEdBQUcsQ0FBQ0csT0FBTyxDQUFDLDRDQUE0QyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQztFQUNsR04sSUFBSSxFQUFFLE1BQU07RUFDWkUsTUFBTSxFQUFFO0FBQ1osQ0FBQyxDQUFDO0FBQ0Y1QixnQkFBZ0IsR0FBR0csUUFBUTtBQUMzQixNQUFNRCxRQUFRLEdBQUkyQixHQUFHLElBQUssQ0FBQyxDQUFDLEVBQUV0QixRQUFRLENBQUMwQixlQUFlLEVBQUU7RUFDcERoQixHQUFHLEVBQUVZLEdBQUc7RUFDUkgsSUFBSSxFQUFFLE1BQU07RUFDWkUsTUFBTSxFQUFFO0FBQ1osQ0FBQyxDQUFDO0FBQ0Y1QixnQkFBZ0IsR0FBR0UsUUFBUSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYXNuMS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZnJvbVg1MDkgPSBleHBvcnRzLmZyb21TUEtJID0gZXhwb3J0cy5mcm9tUEtDUzggPSBleHBvcnRzLnRvUEtDUzggPSBleHBvcnRzLnRvU1BLSSA9IHZvaWQgMDtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IHdlYmNyeXB0b19qc18xID0gcmVxdWlyZShcIi4vd2ViY3J5cHRvLmpzXCIpO1xuY29uc3QgaXNfa2V5X29iamVjdF9qc18xID0gcmVxdWlyZShcIi4vaXNfa2V5X29iamVjdC5qc1wiKTtcbmNvbnN0IGludmFsaWRfa2V5X2lucHV0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuY29uc3QgZ2VuZXJpY0V4cG9ydCA9IChrZXlUeXBlLCBrZXlGb3JtYXQsIGtleSkgPT4ge1xuICAgIGxldCBrZXlPYmplY3Q7XG4gICAgaWYgKCgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkoa2V5KSkge1xuICAgICAgICBpZiAoIWtleS5leHRyYWN0YWJsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ3J5cHRvS2V5IGlzIG5vdCBleHRyYWN0YWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGtleU9iamVjdCA9IGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkoa2V5KSkge1xuICAgICAgICBrZXlPYmplY3QgPSBrZXk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLmRlZmF1bHQpKGtleSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcykpO1xuICAgIH1cbiAgICBpZiAoa2V5T2JqZWN0LnR5cGUgIT09IGtleVR5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihga2V5IGlzIG5vdCBhICR7a2V5VHlwZX0ga2V5YCk7XG4gICAgfVxuICAgIHJldHVybiBrZXlPYmplY3QuZXhwb3J0KHsgZm9ybWF0OiAncGVtJywgdHlwZToga2V5Rm9ybWF0IH0pO1xufTtcbmNvbnN0IHRvU1BLSSA9IChrZXkpID0+IHtcbiAgICByZXR1cm4gZ2VuZXJpY0V4cG9ydCgncHVibGljJywgJ3Nwa2knLCBrZXkpO1xufTtcbmV4cG9ydHMudG9TUEtJID0gdG9TUEtJO1xuY29uc3QgdG9QS0NTOCA9IChrZXkpID0+IHtcbiAgICByZXR1cm4gZ2VuZXJpY0V4cG9ydCgncHJpdmF0ZScsICdwa2NzOCcsIGtleSk7XG59O1xuZXhwb3J0cy50b1BLQ1M4ID0gdG9QS0NTODtcbmNvbnN0IGZyb21QS0NTOCA9IChwZW0pID0+ICgwLCBjcnlwdG9fMS5jcmVhdGVQcml2YXRlS2V5KSh7XG4gICAga2V5OiBidWZmZXJfMS5CdWZmZXIuZnJvbShwZW0ucmVwbGFjZSgvKD86LS0tLS0oPzpCRUdJTnxFTkQpIFBSSVZBVEUgS0VZLS0tLS18XFxzKS9nLCAnJyksICdiYXNlNjQnKSxcbiAgICB0eXBlOiAncGtjczgnLFxuICAgIGZvcm1hdDogJ2RlcicsXG59KTtcbmV4cG9ydHMuZnJvbVBLQ1M4ID0gZnJvbVBLQ1M4O1xuY29uc3QgZnJvbVNQS0kgPSAocGVtKSA9PiAoMCwgY3J5cHRvXzEuY3JlYXRlUHVibGljS2V5KSh7XG4gICAga2V5OiBidWZmZXJfMS5CdWZmZXIuZnJvbShwZW0ucmVwbGFjZSgvKD86LS0tLS0oPzpCRUdJTnxFTkQpIFBVQkxJQyBLRVktLS0tLXxcXHMpL2csICcnKSwgJ2Jhc2U2NCcpLFxuICAgIHR5cGU6ICdzcGtpJyxcbiAgICBmb3JtYXQ6ICdkZXInLFxufSk7XG5leHBvcnRzLmZyb21TUEtJID0gZnJvbVNQS0k7XG5jb25zdCBmcm9tWDUwOSA9IChwZW0pID0+ICgwLCBjcnlwdG9fMS5jcmVhdGVQdWJsaWNLZXkpKHtcbiAgICBrZXk6IHBlbSxcbiAgICB0eXBlOiAnc3BraScsXG4gICAgZm9ybWF0OiAncGVtJyxcbn0pO1xuZXhwb3J0cy5mcm9tWDUwOSA9IGZyb21YNTA5O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZnJvbVg1MDkiLCJmcm9tU1BLSSIsImZyb21QS0NTOCIsInRvUEtDUzgiLCJ0b1NQS0kiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJidWZmZXJfMSIsIndlYmNyeXB0b19qc18xIiwiaXNfa2V5X29iamVjdF9qc18xIiwiaW52YWxpZF9rZXlfaW5wdXRfanNfMSIsImlzX2tleV9saWtlX2pzXzEiLCJnZW5lcmljRXhwb3J0Iiwia2V5VHlwZSIsImtleUZvcm1hdCIsImtleSIsImtleU9iamVjdCIsImlzQ3J5cHRvS2V5IiwiZXh0cmFjdGFibGUiLCJUeXBlRXJyb3IiLCJLZXlPYmplY3QiLCJmcm9tIiwiZGVmYXVsdCIsInR5cGVzIiwidHlwZSIsImV4cG9ydCIsImZvcm1hdCIsInBlbSIsImNyZWF0ZVByaXZhdGVLZXkiLCJCdWZmZXIiLCJyZXBsYWNlIiwiY3JlYXRlUHVibGljS2V5Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_decoder.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_decoder.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst tagInteger = 0x02;\nconst tagSequence = 0x30;\nclass Asn1SequenceDecoder {\n  constructor(buffer) {\n    if (buffer[0] !== tagSequence) {\n      throw new TypeError();\n    }\n    this.buffer = buffer;\n    this.offset = 1;\n    const len = this.decodeLength();\n    if (len !== buffer.length - this.offset) {\n      throw new TypeError();\n    }\n  }\n  decodeLength() {\n    let length = this.buffer[this.offset++];\n    if (length & 0x80) {\n      const nBytes = length & ~0x80;\n      length = 0;\n      for (let i = 0; i < nBytes; i++) length = length << 8 | this.buffer[this.offset + i];\n      this.offset += nBytes;\n    }\n    return length;\n  }\n  unsignedInteger() {\n    if (this.buffer[this.offset++] !== tagInteger) {\n      throw new TypeError();\n    }\n    let length = this.decodeLength();\n    if (this.buffer[this.offset] === 0) {\n      this.offset++;\n      length--;\n    }\n    const result = this.buffer.slice(this.offset, this.offset + length);\n    this.offset += length;\n    return result;\n  }\n  end() {\n    if (this.offset !== this.buffer.length) {\n      throw new TypeError();\n    }\n  }\n}\nexports[\"default\"] = Asn1SequenceDecoder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYXNuMV9zZXF1ZW5jZV9kZWNvZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFVBQVUsR0FBRyxJQUFJO0FBQ3ZCLE1BQU1DLFdBQVcsR0FBRyxJQUFJO0FBQ3hCLE1BQU1DLG1CQUFtQixDQUFDO0VBQ3RCQyxXQUFXQSxDQUFDQyxNQUFNLEVBQUU7SUFDaEIsSUFBSUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLSCxXQUFXLEVBQUU7TUFDM0IsTUFBTSxJQUFJSSxTQUFTLENBQUMsQ0FBQztJQUN6QjtJQUNBLElBQUksQ0FBQ0QsTUFBTSxHQUFHQSxNQUFNO0lBQ3BCLElBQUksQ0FBQ0UsTUFBTSxHQUFHLENBQUM7SUFDZixNQUFNQyxHQUFHLEdBQUcsSUFBSSxDQUFDQyxZQUFZLENBQUMsQ0FBQztJQUMvQixJQUFJRCxHQUFHLEtBQUtILE1BQU0sQ0FBQ0ssTUFBTSxHQUFHLElBQUksQ0FBQ0gsTUFBTSxFQUFFO01BQ3JDLE1BQU0sSUFBSUQsU0FBUyxDQUFDLENBQUM7SUFDekI7RUFDSjtFQUNBRyxZQUFZQSxDQUFBLEVBQUc7SUFDWCxJQUFJQyxNQUFNLEdBQUcsSUFBSSxDQUFDTCxNQUFNLENBQUMsSUFBSSxDQUFDRSxNQUFNLEVBQUUsQ0FBQztJQUN2QyxJQUFJRyxNQUFNLEdBQUcsSUFBSSxFQUFFO01BQ2YsTUFBTUMsTUFBTSxHQUFHRCxNQUFNLEdBQUcsQ0FBQyxJQUFJO01BQzdCQSxNQUFNLEdBQUcsQ0FBQztNQUNWLEtBQUssSUFBSUUsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxNQUFNLEVBQUVDLENBQUMsRUFBRSxFQUMzQkYsTUFBTSxHQUFJQSxNQUFNLElBQUksQ0FBQyxHQUFJLElBQUksQ0FBQ0wsTUFBTSxDQUFDLElBQUksQ0FBQ0UsTUFBTSxHQUFHSyxDQUFDLENBQUM7TUFDekQsSUFBSSxDQUFDTCxNQUFNLElBQUlJLE1BQU07SUFDekI7SUFDQSxPQUFPRCxNQUFNO0VBQ2pCO0VBQ0FHLGVBQWVBLENBQUEsRUFBRztJQUNkLElBQUksSUFBSSxDQUFDUixNQUFNLENBQUMsSUFBSSxDQUFDRSxNQUFNLEVBQUUsQ0FBQyxLQUFLTixVQUFVLEVBQUU7TUFDM0MsTUFBTSxJQUFJSyxTQUFTLENBQUMsQ0FBQztJQUN6QjtJQUNBLElBQUlJLE1BQU0sR0FBRyxJQUFJLENBQUNELFlBQVksQ0FBQyxDQUFDO0lBQ2hDLElBQUksSUFBSSxDQUFDSixNQUFNLENBQUMsSUFBSSxDQUFDRSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7TUFDaEMsSUFBSSxDQUFDQSxNQUFNLEVBQUU7TUFDYkcsTUFBTSxFQUFFO0lBQ1o7SUFDQSxNQUFNSSxNQUFNLEdBQUcsSUFBSSxDQUFDVCxNQUFNLENBQUNVLEtBQUssQ0FBQyxJQUFJLENBQUNSLE1BQU0sRUFBRSxJQUFJLENBQUNBLE1BQU0sR0FBR0csTUFBTSxDQUFDO0lBQ25FLElBQUksQ0FBQ0gsTUFBTSxJQUFJRyxNQUFNO0lBQ3JCLE9BQU9JLE1BQU07RUFDakI7RUFDQUUsR0FBR0EsQ0FBQSxFQUFHO0lBQ0YsSUFBSSxJQUFJLENBQUNULE1BQU0sS0FBSyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0ssTUFBTSxFQUFFO01BQ3BDLE1BQU0sSUFBSUosU0FBUyxDQUFDLENBQUM7SUFDekI7RUFDSjtBQUNKO0FBQ0FQLGtCQUFlLEdBQUdJLG1CQUFtQiIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYXNuMV9zZXF1ZW5jZV9kZWNvZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdGFnSW50ZWdlciA9IDB4MDI7XG5jb25zdCB0YWdTZXF1ZW5jZSA9IDB4MzA7XG5jbGFzcyBBc24xU2VxdWVuY2VEZWNvZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihidWZmZXIpIHtcbiAgICAgICAgaWYgKGJ1ZmZlclswXSAhPT0gdGFnU2VxdWVuY2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAxO1xuICAgICAgICBjb25zdCBsZW4gPSB0aGlzLmRlY29kZUxlbmd0aCgpO1xuICAgICAgICBpZiAobGVuICE9PSBidWZmZXIubGVuZ3RoIC0gdGhpcy5vZmZzZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWNvZGVMZW5ndGgoKSB7XG4gICAgICAgIGxldCBsZW5ndGggPSB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXTtcbiAgICAgICAgaWYgKGxlbmd0aCAmIDB4ODApIHtcbiAgICAgICAgICAgIGNvbnN0IG5CeXRlcyA9IGxlbmd0aCAmIH4weDgwO1xuICAgICAgICAgICAgbGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbkJ5dGVzOyBpKyspXG4gICAgICAgICAgICAgICAgbGVuZ3RoID0gKGxlbmd0aCA8PCA4KSB8IHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0ICsgaV07XG4gICAgICAgICAgICB0aGlzLm9mZnNldCArPSBuQnl0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gICAgdW5zaWduZWRJbnRlZ2VyKCkge1xuICAgICAgICBpZiAodGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gIT09IHRhZ0ludGVnZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbGVuZ3RoID0gdGhpcy5kZWNvZGVMZW5ndGgoKTtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0XSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQrKztcbiAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmZmVyLnNsaWNlKHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIGxlbmd0aCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZW5kKCkge1xuICAgICAgICBpZiAodGhpcy5vZmZzZXQgIT09IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gQXNuMVNlcXVlbmNlRGVjb2RlcjtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRhZ0ludGVnZXIiLCJ0YWdTZXF1ZW5jZSIsIkFzbjFTZXF1ZW5jZURlY29kZXIiLCJjb25zdHJ1Y3RvciIsImJ1ZmZlciIsIlR5cGVFcnJvciIsIm9mZnNldCIsImxlbiIsImRlY29kZUxlbmd0aCIsImxlbmd0aCIsIm5CeXRlcyIsImkiLCJ1bnNpZ25lZEludGVnZXIiLCJyZXN1bHQiLCJzbGljZSIsImVuZCIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_decoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_encoder.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_encoder.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst tagInteger = 0x02;\nconst tagBitStr = 0x03;\nconst tagOctStr = 0x04;\nconst tagSequence = 0x30;\nconst bZero = buffer_1.Buffer.from([0x00]);\nconst bTagInteger = buffer_1.Buffer.from([tagInteger]);\nconst bTagBitStr = buffer_1.Buffer.from([tagBitStr]);\nconst bTagSequence = buffer_1.Buffer.from([tagSequence]);\nconst bTagOctStr = buffer_1.Buffer.from([tagOctStr]);\nconst encodeLength = len => {\n  if (len < 128) return buffer_1.Buffer.from([len]);\n  const buffer = buffer_1.Buffer.alloc(5);\n  buffer.writeUInt32BE(len, 1);\n  let offset = 1;\n  while (buffer[offset] === 0) offset++;\n  buffer[offset - 1] = 0x80 | 5 - offset;\n  return buffer.slice(offset - 1);\n};\nconst oids = new Map([['P-256', buffer_1.Buffer.from('06 08 2A 86 48 CE 3D 03 01 07'.replace(/ /g, ''), 'hex')], ['secp256k1', buffer_1.Buffer.from('06 05 2B 81 04 00 0A'.replace(/ /g, ''), 'hex')], ['P-384', buffer_1.Buffer.from('06 05 2B 81 04 00 22'.replace(/ /g, ''), 'hex')], ['P-521', buffer_1.Buffer.from('06 05 2B 81 04 00 23'.replace(/ /g, ''), 'hex')], ['ecPublicKey', buffer_1.Buffer.from('06 07 2A 86 48 CE 3D 02 01'.replace(/ /g, ''), 'hex')], ['X25519', buffer_1.Buffer.from('06 03 2B 65 6E'.replace(/ /g, ''), 'hex')], ['X448', buffer_1.Buffer.from('06 03 2B 65 6F'.replace(/ /g, ''), 'hex')], ['Ed25519', buffer_1.Buffer.from('06 03 2B 65 70'.replace(/ /g, ''), 'hex')], ['Ed448', buffer_1.Buffer.from('06 03 2B 65 71'.replace(/ /g, ''), 'hex')]]);\nclass DumbAsn1Encoder {\n  constructor() {\n    this.length = 0;\n    this.elements = [];\n  }\n  oidFor(oid) {\n    const bOid = oids.get(oid);\n    if (!bOid) {\n      throw new errors_js_1.JOSENotSupported('Invalid or unsupported OID');\n    }\n    this.elements.push(bOid);\n    this.length += bOid.length;\n  }\n  zero() {\n    this.elements.push(bTagInteger, buffer_1.Buffer.from([0x01]), bZero);\n    this.length += 3;\n  }\n  one() {\n    this.elements.push(bTagInteger, buffer_1.Buffer.from([0x01]), buffer_1.Buffer.from([0x01]));\n    this.length += 3;\n  }\n  unsignedInteger(integer) {\n    if (integer[0] & 0x80) {\n      const len = encodeLength(integer.length + 1);\n      this.elements.push(bTagInteger, len, bZero, integer);\n      this.length += 2 + len.length + integer.length;\n    } else {\n      let i = 0;\n      while (integer[i] === 0 && (integer[i + 1] & 0x80) === 0) i++;\n      const len = encodeLength(integer.length - i);\n      this.elements.push(bTagInteger, encodeLength(integer.length - i), integer.slice(i));\n      this.length += 1 + len.length + integer.length - i;\n    }\n  }\n  octStr(octStr) {\n    const len = encodeLength(octStr.length);\n    this.elements.push(bTagOctStr, encodeLength(octStr.length), octStr);\n    this.length += 1 + len.length + octStr.length;\n  }\n  bitStr(bitS) {\n    const len = encodeLength(bitS.length + 1);\n    this.elements.push(bTagBitStr, encodeLength(bitS.length + 1), bZero, bitS);\n    this.length += 1 + len.length + bitS.length + 1;\n  }\n  add(seq) {\n    this.elements.push(seq);\n    this.length += seq.length;\n  }\n  end(tag = bTagSequence) {\n    const len = encodeLength(this.length);\n    return buffer_1.Buffer.concat([tag, len, ...this.elements], 1 + len.length + this.length);\n  }\n}\nexports[\"default\"] = DumbAsn1Encoder;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_encoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.decode = exports.encode = exports.encodeBase64 = exports.decodeBase64 = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nlet encode;\nfunction normalize(input) {\n  let encoded = input;\n  if (encoded instanceof Uint8Array) {\n    encoded = buffer_utils_js_1.decoder.decode(encoded);\n  }\n  return encoded;\n}\nif (buffer_1.Buffer.isEncoding('base64url')) {\n  exports.encode = encode = input => buffer_1.Buffer.from(input).toString('base64url');\n} else {\n  exports.encode = encode = input => buffer_1.Buffer.from(input).toString('base64').replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\nconst decodeBase64 = input => buffer_1.Buffer.from(input, 'base64');\nexports.decodeBase64 = decodeBase64;\nconst encodeBase64 = input => buffer_1.Buffer.from(input).toString('base64');\nexports.encodeBase64 = encodeBase64;\nconst decode = input => buffer_1.Buffer.from(normalize(input), 'base64');\nexports.decode = decode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvYmFzZTY0dXJsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdBLGNBQWMsR0FBR0Esb0JBQW9CLEdBQUdBLG9CQUFvQixHQUFHLEtBQUssQ0FBQztBQUN0RixNQUFNTSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNsQyxNQUFNQyxpQkFBaUIsR0FBR0QsbUJBQU8sQ0FBQyxzSEFBd0IsQ0FBQztBQUMzRCxJQUFJSixNQUFNO0FBQ1YsU0FBU00sU0FBU0EsQ0FBQ0MsS0FBSyxFQUFFO0VBQ3RCLElBQUlDLE9BQU8sR0FBR0QsS0FBSztFQUNuQixJQUFJQyxPQUFPLFlBQVlDLFVBQVUsRUFBRTtJQUMvQkQsT0FBTyxHQUFHSCxpQkFBaUIsQ0FBQ0ssT0FBTyxDQUFDWCxNQUFNLENBQUNTLE9BQU8sQ0FBQztFQUN2RDtFQUNBLE9BQU9BLE9BQU87QUFDbEI7QUFDQSxJQUFJTCxRQUFRLENBQUNRLE1BQU0sQ0FBQ0MsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO0VBQ3pDZixjQUFjLEdBQUdHLE1BQU0sR0FBSU8sS0FBSyxJQUFLSixRQUFRLENBQUNRLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDTixLQUFLLENBQUMsQ0FBQ08sUUFBUSxDQUFDLFdBQVcsQ0FBQztBQUMxRixDQUFDLE1BQ0k7RUFDRGpCLGNBQWMsR0FBR0csTUFBTSxHQUFJTyxLQUFLLElBQUtKLFFBQVEsQ0FBQ1EsTUFBTSxDQUFDRSxJQUFJLENBQUNOLEtBQUssQ0FBQyxDQUFDTyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUNDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUNBLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUNBLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDO0FBQ2pKO0FBQ0EsTUFBTWIsWUFBWSxHQUFJSyxLQUFLLElBQUtKLFFBQVEsQ0FBQ1EsTUFBTSxDQUFDRSxJQUFJLENBQUNOLEtBQUssRUFBRSxRQUFRLENBQUM7QUFDckVWLG9CQUFvQixHQUFHSyxZQUFZO0FBQ25DLE1BQU1ELFlBQVksR0FBSU0sS0FBSyxJQUFLSixRQUFRLENBQUNRLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDTixLQUFLLENBQUMsQ0FBQ08sUUFBUSxDQUFDLFFBQVEsQ0FBQztBQUM5RWpCLG9CQUFvQixHQUFHSSxZQUFZO0FBQ25DLE1BQU1GLE1BQU0sR0FBSVEsS0FBSyxJQUFLSixRQUFRLENBQUNRLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDUCxTQUFTLENBQUNDLEtBQUssQ0FBQyxFQUFFLFFBQVEsQ0FBQztBQUMxRVYsY0FBYyxHQUFHRSxNQUFNIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9iYXNlNjR1cmwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY29kZSA9IGV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5lbmNvZGVCYXNlNjQgPSBleHBvcnRzLmRlY29kZUJhc2U2NCA9IHZvaWQgMDtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5sZXQgZW5jb2RlO1xuZnVuY3Rpb24gbm9ybWFsaXplKGlucHV0KSB7XG4gICAgbGV0IGVuY29kZWQgPSBpbnB1dDtcbiAgICBpZiAoZW5jb2RlZCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgZW5jb2RlZCA9IGJ1ZmZlcl91dGlsc19qc18xLmRlY29kZXIuZGVjb2RlKGVuY29kZWQpO1xuICAgIH1cbiAgICByZXR1cm4gZW5jb2RlZDtcbn1cbmlmIChidWZmZXJfMS5CdWZmZXIuaXNFbmNvZGluZygnYmFzZTY0dXJsJykpIHtcbiAgICBleHBvcnRzLmVuY29kZSA9IGVuY29kZSA9IChpbnB1dCkgPT4gYnVmZmVyXzEuQnVmZmVyLmZyb20oaW5wdXQpLnRvU3RyaW5nKCdiYXNlNjR1cmwnKTtcbn1cbmVsc2Uge1xuICAgIGV4cG9ydHMuZW5jb2RlID0gZW5jb2RlID0gKGlucHV0KSA9PiBidWZmZXJfMS5CdWZmZXIuZnJvbShpbnB1dCkudG9TdHJpbmcoJ2Jhc2U2NCcpLnJlcGxhY2UoLz0vZywgJycpLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xufVxuY29uc3QgZGVjb2RlQmFzZTY0ID0gKGlucHV0KSA9PiBidWZmZXJfMS5CdWZmZXIuZnJvbShpbnB1dCwgJ2Jhc2U2NCcpO1xuZXhwb3J0cy5kZWNvZGVCYXNlNjQgPSBkZWNvZGVCYXNlNjQ7XG5jb25zdCBlbmNvZGVCYXNlNjQgPSAoaW5wdXQpID0+IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGlucHV0KS50b1N0cmluZygnYmFzZTY0Jyk7XG5leHBvcnRzLmVuY29kZUJhc2U2NCA9IGVuY29kZUJhc2U2NDtcbmNvbnN0IGRlY29kZSA9IChpbnB1dCkgPT4gYnVmZmVyXzEuQnVmZmVyLmZyb20obm9ybWFsaXplKGlucHV0KSwgJ2Jhc2U2NCcpO1xuZXhwb3J0cy5kZWNvZGUgPSBkZWNvZGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGUiLCJlbmNvZGUiLCJlbmNvZGVCYXNlNjQiLCJkZWNvZGVCYXNlNjQiLCJidWZmZXJfMSIsInJlcXVpcmUiLCJidWZmZXJfdXRpbHNfanNfMSIsIm5vcm1hbGl6ZSIsImlucHV0IiwiZW5jb2RlZCIsIlVpbnQ4QXJyYXkiLCJkZWNvZGVyIiwiQnVmZmVyIiwiaXNFbmNvZGluZyIsImZyb20iLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nfunction cbcTag(aad, iv, ciphertext, macSize, macKey, keySize) {\n  const macData = (0, buffer_utils_js_1.concat)(aad, iv, ciphertext, (0, buffer_utils_js_1.uint64be)(aad.length << 3));\n  const hmac = (0, crypto_1.createHmac)(`sha${macSize}`, macKey);\n  hmac.update(macData);\n  return hmac.digest().slice(0, keySize >> 3);\n}\nexports[\"default\"] = cbcTag;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvY2JjX3RhZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxRQUFRLEdBQUdDLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNsQyxNQUFNQyxpQkFBaUIsR0FBR0QsbUJBQU8sQ0FBQyxzSEFBd0IsQ0FBQztBQUMzRCxTQUFTRSxNQUFNQSxDQUFDQyxHQUFHLEVBQUVDLEVBQUUsRUFBRUMsVUFBVSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFO0VBQzNELE1BQU1DLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRVIsaUJBQWlCLENBQUNTLE1BQU0sRUFBRVAsR0FBRyxFQUFFQyxFQUFFLEVBQUVDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRUosaUJBQWlCLENBQUNVLFFBQVEsRUFBRVIsR0FBRyxDQUFDUyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUM7RUFDcEgsTUFBTUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFZCxRQUFRLENBQUNlLFVBQVUsRUFBRyxNQUFLUixPQUFRLEVBQUMsRUFBRUMsTUFBTSxDQUFDO0VBQzlETSxJQUFJLENBQUNFLE1BQU0sQ0FBQ04sT0FBTyxDQUFDO0VBQ3BCLE9BQU9JLElBQUksQ0FBQ0csTUFBTSxDQUFDLENBQUMsQ0FBQ0MsS0FBSyxDQUFDLENBQUMsRUFBRVQsT0FBTyxJQUFJLENBQUMsQ0FBQztBQUMvQztBQUNBWCxrQkFBZSxHQUFHSyxNQUFNIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9jYmNfdGFnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgYnVmZmVyX3V0aWxzX2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2J1ZmZlcl91dGlscy5qc1wiKTtcbmZ1bmN0aW9uIGNiY1RhZyhhYWQsIGl2LCBjaXBoZXJ0ZXh0LCBtYWNTaXplLCBtYWNLZXksIGtleVNpemUpIHtcbiAgICBjb25zdCBtYWNEYXRhID0gKDAsIGJ1ZmZlcl91dGlsc19qc18xLmNvbmNhdCkoYWFkLCBpdiwgY2lwaGVydGV4dCwgKDAsIGJ1ZmZlcl91dGlsc19qc18xLnVpbnQ2NGJlKShhYWQubGVuZ3RoIDw8IDMpKTtcbiAgICBjb25zdCBobWFjID0gKDAsIGNyeXB0b18xLmNyZWF0ZUhtYWMpKGBzaGEke21hY1NpemV9YCwgbWFjS2V5KTtcbiAgICBobWFjLnVwZGF0ZShtYWNEYXRhKTtcbiAgICByZXR1cm4gaG1hYy5kaWdlc3QoKS5zbGljZSgwLCBrZXlTaXplID4+IDMpO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gY2JjVGFnO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwiYnVmZmVyX3V0aWxzX2pzXzEiLCJjYmNUYWciLCJhYWQiLCJpdiIsImNpcGhlcnRleHQiLCJtYWNTaXplIiwibWFjS2V5Iiwia2V5U2l6ZSIsIm1hY0RhdGEiLCJjb25jYXQiLCJ1aW50NjRiZSIsImxlbmd0aCIsImhtYWMiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0Iiwic2xpY2UiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst checkCekLength = (enc, cek) => {\n  let expected;\n  switch (enc) {\n    case 'A128CBC-HS256':\n    case 'A192CBC-HS384':\n    case 'A256CBC-HS512':\n      expected = parseInt(enc.slice(-3), 10);\n      break;\n    case 'A128GCM':\n    case 'A192GCM':\n    case 'A256GCM':\n      expected = parseInt(enc.slice(1, 4), 10);\n      break;\n    default:\n      throw new errors_js_1.JOSENotSupported(`Content Encryption Algorithm ${enc} is not supported either by JOSE or your javascript runtime`);\n  }\n  if (cek instanceof Uint8Array) {\n    const actual = cek.byteLength << 3;\n    if (actual !== expected) {\n      throw new errors_js_1.JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);\n    }\n    return;\n  }\n  if ((0, is_key_object_js_1.default)(cek) && cek.type === 'secret') {\n    const actual = cek.symmetricKeySize << 3;\n    if (actual !== expected) {\n      throw new errors_js_1.JWEInvalid(`Invalid Content Encryption Key length. Expected ${expected} bits, got ${actual} bits`);\n    }\n    return;\n  }\n  throw new TypeError('Invalid Content Encryption Key type');\n};\nexports[\"default\"] = checkCekLength;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvY2hlY2tfY2VrX2xlbmd0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXLEdBQUdDLG1CQUFPLENBQUMsNEdBQW1CLENBQUM7QUFDaEQsTUFBTUMsa0JBQWtCLEdBQUdELG1CQUFPLENBQUMsdUhBQW9CLENBQUM7QUFDeEQsTUFBTUUsY0FBYyxHQUFHQSxDQUFDQyxHQUFHLEVBQUVDLEdBQUcsS0FBSztFQUNqQyxJQUFJQyxRQUFRO0VBQ1osUUFBUUYsR0FBRztJQUNQLEtBQUssZUFBZTtJQUNwQixLQUFLLGVBQWU7SUFDcEIsS0FBSyxlQUFlO01BQ2hCRSxRQUFRLEdBQUdDLFFBQVEsQ0FBQ0gsR0FBRyxDQUFDSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7TUFDdEM7SUFDSixLQUFLLFNBQVM7SUFDZCxLQUFLLFNBQVM7SUFDZCxLQUFLLFNBQVM7TUFDVkYsUUFBUSxHQUFHQyxRQUFRLENBQUNILEdBQUcsQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7TUFDeEM7SUFDSjtNQUNJLE1BQU0sSUFBSVIsV0FBVyxDQUFDUyxnQkFBZ0IsQ0FBRSxnQ0FBK0JMLEdBQUksNkRBQTRELENBQUM7RUFDaEo7RUFDQSxJQUFJQyxHQUFHLFlBQVlLLFVBQVUsRUFBRTtJQUMzQixNQUFNQyxNQUFNLEdBQUdOLEdBQUcsQ0FBQ08sVUFBVSxJQUFJLENBQUM7SUFDbEMsSUFBSUQsTUFBTSxLQUFLTCxRQUFRLEVBQUU7TUFDckIsTUFBTSxJQUFJTixXQUFXLENBQUNhLFVBQVUsQ0FBRSxtREFBa0RQLFFBQVMsY0FBYUssTUFBTyxPQUFNLENBQUM7SUFDNUg7SUFDQTtFQUNKO0VBQ0EsSUFBSSxDQUFDLENBQUMsRUFBRVQsa0JBQWtCLENBQUNZLE9BQU8sRUFBRVQsR0FBRyxDQUFDLElBQUlBLEdBQUcsQ0FBQ1UsSUFBSSxLQUFLLFFBQVEsRUFBRTtJQUMvRCxNQUFNSixNQUFNLEdBQUdOLEdBQUcsQ0FBQ1csZ0JBQWdCLElBQUksQ0FBQztJQUN4QyxJQUFJTCxNQUFNLEtBQUtMLFFBQVEsRUFBRTtNQUNyQixNQUFNLElBQUlOLFdBQVcsQ0FBQ2EsVUFBVSxDQUFFLG1EQUFrRFAsUUFBUyxjQUFhSyxNQUFPLE9BQU0sQ0FBQztJQUM1SDtJQUNBO0VBQ0o7RUFDQSxNQUFNLElBQUlNLFNBQVMsQ0FBQyxxQ0FBcUMsQ0FBQztBQUM5RCxDQUFDO0FBQ0RuQixrQkFBZSxHQUFHSyxjQUFjIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9jaGVja19jZWtfbGVuZ3RoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuY29uc3QgY2hlY2tDZWtMZW5ndGggPSAoZW5jLCBjZWspID0+IHtcbiAgICBsZXQgZXhwZWN0ZWQ7XG4gICAgc3dpdGNoIChlbmMpIHtcbiAgICAgICAgY2FzZSAnQTEyOENCQy1IUzI1Nic6XG4gICAgICAgIGNhc2UgJ0ExOTJDQkMtSFMzODQnOlxuICAgICAgICBjYXNlICdBMjU2Q0JDLUhTNTEyJzpcbiAgICAgICAgICAgIGV4cGVjdGVkID0gcGFyc2VJbnQoZW5jLnNsaWNlKC0zKSwgMTApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0ExMjhHQ00nOlxuICAgICAgICBjYXNlICdBMTkyR0NNJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTSc6XG4gICAgICAgICAgICBleHBlY3RlZCA9IHBhcnNlSW50KGVuYy5zbGljZSgxLCA0KSwgMTApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgQ29udGVudCBFbmNyeXB0aW9uIEFsZ29yaXRobSAke2VuY30gaXMgbm90IHN1cHBvcnRlZCBlaXRoZXIgYnkgSk9TRSBvciB5b3VyIGphdmFzY3JpcHQgcnVudGltZWApO1xuICAgIH1cbiAgICBpZiAoY2VrIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBjb25zdCBhY3R1YWwgPSBjZWsuYnl0ZUxlbmd0aCA8PCAzO1xuICAgICAgICBpZiAoYWN0dWFsICE9PSBleHBlY3RlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRUludmFsaWQoYEludmFsaWQgQ29udGVudCBFbmNyeXB0aW9uIEtleSBsZW5ndGguIEV4cGVjdGVkICR7ZXhwZWN0ZWR9IGJpdHMsIGdvdCAke2FjdHVhbH0gYml0c2ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkoY2VrKSAmJiBjZWsudHlwZSA9PT0gJ3NlY3JldCcpIHtcbiAgICAgICAgY29uc3QgYWN0dWFsID0gY2VrLnN5bW1ldHJpY0tleVNpemUgPDwgMztcbiAgICAgICAgaWYgKGFjdHVhbCAhPT0gZXhwZWN0ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0VJbnZhbGlkKGBJbnZhbGlkIENvbnRlbnQgRW5jcnlwdGlvbiBLZXkgbGVuZ3RoLiBFeHBlY3RlZCAke2V4cGVjdGVkfSBiaXRzLCBnb3QgJHthY3R1YWx9IGJpdHNgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgQ29udGVudCBFbmNyeXB0aW9uIEtleSB0eXBlJyk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gY2hlY2tDZWtMZW5ndGg7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlcnJvcnNfanNfMSIsInJlcXVpcmUiLCJpc19rZXlfb2JqZWN0X2pzXzEiLCJjaGVja0Nla0xlbmd0aCIsImVuYyIsImNlayIsImV4cGVjdGVkIiwicGFyc2VJbnQiLCJzbGljZSIsIkpPU0VOb3RTdXBwb3J0ZWQiLCJVaW50OEFycmF5IiwiYWN0dWFsIiwiYnl0ZUxlbmd0aCIsIkpXRUludmFsaWQiLCJkZWZhdWx0IiwidHlwZSIsInN5bW1ldHJpY0tleVNpemUiLCJUeXBlRXJyb3IiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.setModulusLength = exports.weakMap = void 0;\nexports.weakMap = new WeakMap();\nconst getLength = (buf, index) => {\n  let len = buf.readUInt8(1);\n  if ((len & 0x80) === 0) {\n    if (index === 0) {\n      return len;\n    }\n    return getLength(buf.subarray(2 + len), index - 1);\n  }\n  const num = len & 0x7f;\n  len = 0;\n  for (let i = 0; i < num; i++) {\n    len <<= 8;\n    const j = buf.readUInt8(2 + i);\n    len |= j;\n  }\n  if (index === 0) {\n    return len;\n  }\n  return getLength(buf.subarray(2 + len), index - 1);\n};\nconst getLengthOfSeqIndex = (sequence, index) => {\n  const len = sequence.readUInt8(1);\n  if ((len & 0x80) === 0) {\n    return getLength(sequence.subarray(2), index);\n  }\n  const num = len & 0x7f;\n  return getLength(sequence.subarray(2 + num), index);\n};\nconst getModulusLength = key => {\n  var _a, _b;\n  if (exports.weakMap.has(key)) {\n    return exports.weakMap.get(key);\n  }\n  const modulusLength = (_b = (_a = key.asymmetricKeyDetails) === null || _a === void 0 ? void 0 : _a.modulusLength) !== null && _b !== void 0 ? _b : getLengthOfSeqIndex(key.export({\n    format: 'der',\n    type: 'pkcs1'\n  }), key.type === 'private' ? 1 : 0) - 1 << 3;\n  exports.weakMap.set(key, modulusLength);\n  return modulusLength;\n};\nconst setModulusLength = (keyObject, modulusLength) => {\n  exports.weakMap.set(keyObject, modulusLength);\n};\nexports.setModulusLength = setModulusLength;\nexports[\"default\"] = (key, alg) => {\n  if (getModulusLength(key) < 2048) {\n    throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvY2hlY2tfbW9kdWx1c19sZW5ndGguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELHdCQUF3QixHQUFHQSxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQ25EQSxlQUFlLEdBQUcsSUFBSUksT0FBTyxDQUFDLENBQUM7QUFDL0IsTUFBTUMsU0FBUyxHQUFHQSxDQUFDQyxHQUFHLEVBQUVDLEtBQUssS0FBSztFQUM5QixJQUFJQyxHQUFHLEdBQUdGLEdBQUcsQ0FBQ0csU0FBUyxDQUFDLENBQUMsQ0FBQztFQUMxQixJQUFJLENBQUNELEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxFQUFFO0lBQ3BCLElBQUlELEtBQUssS0FBSyxDQUFDLEVBQUU7TUFDYixPQUFPQyxHQUFHO0lBQ2Q7SUFDQSxPQUFPSCxTQUFTLENBQUNDLEdBQUcsQ0FBQ0ksUUFBUSxDQUFDLENBQUMsR0FBR0YsR0FBRyxDQUFDLEVBQUVELEtBQUssR0FBRyxDQUFDLENBQUM7RUFDdEQ7RUFDQSxNQUFNSSxHQUFHLEdBQUdILEdBQUcsR0FBRyxJQUFJO0VBQ3RCQSxHQUFHLEdBQUcsQ0FBQztFQUNQLEtBQUssSUFBSUksQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxHQUFHLEVBQUVDLENBQUMsRUFBRSxFQUFFO0lBQzFCSixHQUFHLEtBQUssQ0FBQztJQUNULE1BQU1LLENBQUMsR0FBR1AsR0FBRyxDQUFDRyxTQUFTLENBQUMsQ0FBQyxHQUFHRyxDQUFDLENBQUM7SUFDOUJKLEdBQUcsSUFBSUssQ0FBQztFQUNaO0VBQ0EsSUFBSU4sS0FBSyxLQUFLLENBQUMsRUFBRTtJQUNiLE9BQU9DLEdBQUc7RUFDZDtFQUNBLE9BQU9ILFNBQVMsQ0FBQ0MsR0FBRyxDQUFDSSxRQUFRLENBQUMsQ0FBQyxHQUFHRixHQUFHLENBQUMsRUFBRUQsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBQ0QsTUFBTU8sbUJBQW1CLEdBQUdBLENBQUNDLFFBQVEsRUFBRVIsS0FBSyxLQUFLO0VBQzdDLE1BQU1DLEdBQUcsR0FBR08sUUFBUSxDQUFDTixTQUFTLENBQUMsQ0FBQyxDQUFDO0VBQ2pDLElBQUksQ0FBQ0QsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLEVBQUU7SUFDcEIsT0FBT0gsU0FBUyxDQUFDVSxRQUFRLENBQUNMLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRUgsS0FBSyxDQUFDO0VBQ2pEO0VBQ0EsTUFBTUksR0FBRyxHQUFHSCxHQUFHLEdBQUcsSUFBSTtFQUN0QixPQUFPSCxTQUFTLENBQUNVLFFBQVEsQ0FBQ0wsUUFBUSxDQUFDLENBQUMsR0FBR0MsR0FBRyxDQUFDLEVBQUVKLEtBQUssQ0FBQztBQUN2RCxDQUFDO0FBQ0QsTUFBTVMsZ0JBQWdCLEdBQUlDLEdBQUcsSUFBSztFQUM5QixJQUFJQyxFQUFFLEVBQUVDLEVBQUU7RUFDVixJQUFJbkIsT0FBTyxDQUFDRyxPQUFPLENBQUNpQixHQUFHLENBQUNILEdBQUcsQ0FBQyxFQUFFO0lBQzFCLE9BQU9qQixPQUFPLENBQUNHLE9BQU8sQ0FBQ2tCLEdBQUcsQ0FBQ0osR0FBRyxDQUFDO0VBQ25DO0VBQ0EsTUFBTUssYUFBYSxHQUFHLENBQUNILEVBQUUsR0FBRyxDQUFDRCxFQUFFLEdBQUdELEdBQUcsQ0FBQ00sb0JBQW9CLE1BQU0sSUFBSSxJQUFJTCxFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQ0ksYUFBYSxNQUFNLElBQUksSUFBSUgsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxFQUFFLEdBQUlMLG1CQUFtQixDQUFDRyxHQUFHLENBQUNPLE1BQU0sQ0FBQztJQUFFQyxNQUFNLEVBQUUsS0FBSztJQUFFQyxJQUFJLEVBQUU7RUFBUSxDQUFDLENBQUMsRUFBRVQsR0FBRyxDQUFDUyxJQUFJLEtBQUssU0FBUyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FDbFAsQ0FBQyxJQUNELENBQUM7RUFDTDFCLE9BQU8sQ0FBQ0csT0FBTyxDQUFDd0IsR0FBRyxDQUFDVixHQUFHLEVBQUVLLGFBQWEsQ0FBQztFQUN2QyxPQUFPQSxhQUFhO0FBQ3hCLENBQUM7QUFDRCxNQUFNcEIsZ0JBQWdCLEdBQUdBLENBQUMwQixTQUFTLEVBQUVOLGFBQWEsS0FBSztFQUNuRHRCLE9BQU8sQ0FBQ0csT0FBTyxDQUFDd0IsR0FBRyxDQUFDQyxTQUFTLEVBQUVOLGFBQWEsQ0FBQztBQUNqRCxDQUFDO0FBQ0R0Qix3QkFBd0IsR0FBR0UsZ0JBQWdCO0FBQzNDRixrQkFBZSxHQUFHLENBQUNpQixHQUFHLEVBQUVhLEdBQUcsS0FBSztFQUM1QixJQUFJZCxnQkFBZ0IsQ0FBQ0MsR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFO0lBQzlCLE1BQU0sSUFBSWMsU0FBUyxDQUFFLEdBQUVELEdBQUksdURBQXNELENBQUM7RUFDdEY7QUFDSixDQUFDIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9jaGVja19tb2R1bHVzX2xlbmd0aC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2V0TW9kdWx1c0xlbmd0aCA9IGV4cG9ydHMud2Vha01hcCA9IHZvaWQgMDtcbmV4cG9ydHMud2Vha01hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCBnZXRMZW5ndGggPSAoYnVmLCBpbmRleCkgPT4ge1xuICAgIGxldCBsZW4gPSBidWYucmVhZFVJbnQ4KDEpO1xuICAgIGlmICgobGVuICYgMHg4MCkgPT09IDApIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbGVuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRMZW5ndGgoYnVmLnN1YmFycmF5KDIgKyBsZW4pLCBpbmRleCAtIDEpO1xuICAgIH1cbiAgICBjb25zdCBudW0gPSBsZW4gJiAweDdmO1xuICAgIGxlbiA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICBsZW4gPDw9IDg7XG4gICAgICAgIGNvbnN0IGogPSBidWYucmVhZFVJbnQ4KDIgKyBpKTtcbiAgICAgICAgbGVuIHw9IGo7XG4gICAgfVxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbGVuO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0TGVuZ3RoKGJ1Zi5zdWJhcnJheSgyICsgbGVuKSwgaW5kZXggLSAxKTtcbn07XG5jb25zdCBnZXRMZW5ndGhPZlNlcUluZGV4ID0gKHNlcXVlbmNlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IGxlbiA9IHNlcXVlbmNlLnJlYWRVSW50OCgxKTtcbiAgICBpZiAoKGxlbiAmIDB4ODApID09PSAwKSB7XG4gICAgICAgIHJldHVybiBnZXRMZW5ndGgoc2VxdWVuY2Uuc3ViYXJyYXkoMiksIGluZGV4KTtcbiAgICB9XG4gICAgY29uc3QgbnVtID0gbGVuICYgMHg3ZjtcbiAgICByZXR1cm4gZ2V0TGVuZ3RoKHNlcXVlbmNlLnN1YmFycmF5KDIgKyBudW0pLCBpbmRleCk7XG59O1xuY29uc3QgZ2V0TW9kdWx1c0xlbmd0aCA9IChrZXkpID0+IHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChleHBvcnRzLndlYWtNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMud2Vha01hcC5nZXQoa2V5KTtcbiAgICB9XG4gICAgY29uc3QgbW9kdWx1c0xlbmd0aCA9IChfYiA9IChfYSA9IGtleS5hc3ltbWV0cmljS2V5RGV0YWlscykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1vZHVsdXNMZW5ndGgpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IChnZXRMZW5ndGhPZlNlcUluZGV4KGtleS5leHBvcnQoeyBmb3JtYXQ6ICdkZXInLCB0eXBlOiAncGtjczEnIH0pLCBrZXkudHlwZSA9PT0gJ3ByaXZhdGUnID8gMSA6IDApIC1cbiAgICAgICAgMSkgPDxcbiAgICAgICAgMztcbiAgICBleHBvcnRzLndlYWtNYXAuc2V0KGtleSwgbW9kdWx1c0xlbmd0aCk7XG4gICAgcmV0dXJuIG1vZHVsdXNMZW5ndGg7XG59O1xuY29uc3Qgc2V0TW9kdWx1c0xlbmd0aCA9IChrZXlPYmplY3QsIG1vZHVsdXNMZW5ndGgpID0+IHtcbiAgICBleHBvcnRzLndlYWtNYXAuc2V0KGtleU9iamVjdCwgbW9kdWx1c0xlbmd0aCk7XG59O1xuZXhwb3J0cy5zZXRNb2R1bHVzTGVuZ3RoID0gc2V0TW9kdWx1c0xlbmd0aDtcbmV4cG9ydHMuZGVmYXVsdCA9IChrZXksIGFsZykgPT4ge1xuICAgIGlmIChnZXRNb2R1bHVzTGVuZ3RoKGtleSkgPCAyMDQ4KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7YWxnfSByZXF1aXJlcyBrZXkgbW9kdWx1c0xlbmd0aCB0byBiZSAyMDQ4IGJpdHMgb3IgbGFyZ2VyYCk7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInNldE1vZHVsdXNMZW5ndGgiLCJ3ZWFrTWFwIiwiV2Vha01hcCIsImdldExlbmd0aCIsImJ1ZiIsImluZGV4IiwibGVuIiwicmVhZFVJbnQ4Iiwic3ViYXJyYXkiLCJudW0iLCJpIiwiaiIsImdldExlbmd0aE9mU2VxSW5kZXgiLCJzZXF1ZW5jZSIsImdldE1vZHVsdXNMZW5ndGgiLCJrZXkiLCJfYSIsIl9iIiwiaGFzIiwiZ2V0IiwibW9kdWx1c0xlbmd0aCIsImFzeW1tZXRyaWNLZXlEZXRhaWxzIiwiZXhwb3J0IiwiZm9ybWF0IiwidHlwZSIsInNldCIsImtleU9iamVjdCIsImRlZmF1bHQiLCJhbGciLCJUeXBlRXJyb3IiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nlet ciphers;\nexports[\"default\"] = algorithm => {\n  ciphers || (ciphers = new Set((0, crypto_1.getCiphers)()));\n  return ciphers.has(algorithm);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvY2lwaGVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxRQUFRLEdBQUdDLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNsQyxJQUFJQyxPQUFPO0FBQ1hKLGtCQUFlLEdBQUlNLFNBQVMsSUFBSztFQUM3QkYsT0FBTyxLQUFLQSxPQUFPLEdBQUcsSUFBSUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFTCxRQUFRLENBQUNNLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUMxRCxPQUFPSixPQUFPLENBQUNLLEdBQUcsQ0FBQ0gsU0FBUyxDQUFDO0FBQ2pDLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2NpcGhlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5sZXQgY2lwaGVycztcbmV4cG9ydHMuZGVmYXVsdCA9IChhbGdvcml0aG0pID0+IHtcbiAgICBjaXBoZXJzIHx8IChjaXBoZXJzID0gbmV3IFNldCgoMCwgY3J5cHRvXzEuZ2V0Q2lwaGVycykoKSkpO1xuICAgIHJldHVybiBjaXBoZXJzLmhhcyhhbGdvcml0aG0pO1xufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyeXB0b18xIiwicmVxdWlyZSIsImNpcGhlcnMiLCJkZWZhdWx0IiwiYWxnb3JpdGhtIiwiU2V0IiwiZ2V0Q2lwaGVycyIsImhhcyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst check_iv_length_js_1 = __webpack_require__(/*! ../lib/check_iv_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js\");\nconst check_cek_length_js_1 = __webpack_require__(/*! ./check_cek_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst timing_safe_equal_js_1 = __webpack_require__(/*! ./timing_safe_equal.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/timing_safe_equal.js\");\nconst cbc_tag_js_1 = __webpack_require__(/*! ./cbc_tag.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst ciphers_js_1 = __webpack_require__(/*! ./ciphers.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nfunction cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {\n  const keySize = parseInt(enc.slice(1, 4), 10);\n  if ((0, is_key_object_js_1.default)(cek)) {\n    cek = cek.export();\n  }\n  const encKey = cek.subarray(keySize >> 3);\n  const macKey = cek.subarray(0, keySize >> 3);\n  const macSize = parseInt(enc.slice(-3), 10);\n  const algorithm = `aes-${keySize}-cbc`;\n  if (!(0, ciphers_js_1.default)(algorithm)) {\n    throw new errors_js_1.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);\n  }\n  const expectedTag = (0, cbc_tag_js_1.default)(aad, iv, ciphertext, macSize, macKey, keySize);\n  let macCheckPassed;\n  try {\n    macCheckPassed = (0, timing_safe_equal_js_1.default)(tag, expectedTag);\n  } catch {}\n  if (!macCheckPassed) {\n    throw new errors_js_1.JWEDecryptionFailed();\n  }\n  let plaintext;\n  try {\n    const decipher = (0, crypto_1.createDecipheriv)(algorithm, encKey, iv);\n    plaintext = (0, buffer_utils_js_1.concat)(decipher.update(ciphertext), decipher.final());\n  } catch {}\n  if (!plaintext) {\n    throw new errors_js_1.JWEDecryptionFailed();\n  }\n  return plaintext;\n}\nfunction gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) {\n  const keySize = parseInt(enc.slice(1, 4), 10);\n  const algorithm = `aes-${keySize}-gcm`;\n  if (!(0, ciphers_js_1.default)(algorithm)) {\n    throw new errors_js_1.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);\n  }\n  try {\n    const decipher = (0, crypto_1.createDecipheriv)(algorithm, cek, iv, {\n      authTagLength: 16\n    });\n    decipher.setAuthTag(tag);\n    if (aad.byteLength) {\n      decipher.setAAD(aad, {\n        plaintextLength: ciphertext.length\n      });\n    }\n    const plaintext = decipher.update(ciphertext);\n    decipher.final();\n    return plaintext;\n  } catch {\n    throw new errors_js_1.JWEDecryptionFailed();\n  }\n}\nconst decrypt = (enc, cek, ciphertext, iv, tag, aad) => {\n  let key;\n  if ((0, webcrypto_js_1.isCryptoKey)(cek)) {\n    (0, crypto_key_js_1.checkEncCryptoKey)(cek, enc, 'decrypt');\n    key = crypto_1.KeyObject.from(cek);\n  } else if (cek instanceof Uint8Array || (0, is_key_object_js_1.default)(cek)) {\n    key = cek;\n  } else {\n    throw new TypeError((0, invalid_key_input_js_1.default)(cek, ...is_key_like_js_1.types, 'Uint8Array'));\n  }\n  (0, check_cek_length_js_1.default)(enc, key);\n  (0, check_iv_length_js_1.default)(enc, iv);\n  switch (enc) {\n    case 'A128CBC-HS256':\n    case 'A192CBC-HS384':\n    case 'A256CBC-HS512':\n      return cbcDecrypt(enc, key, ciphertext, iv, tag, aad);\n    case 'A128GCM':\n    case 'A192GCM':\n    case 'A256GCM':\n      return gcmDecrypt(enc, key, ciphertext, iv, tag, aad);\n    default:\n      throw new errors_js_1.JOSENotSupported('Unsupported JWE Content Encryption Algorithm');\n  }\n};\nexports[\"default\"] = decrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/decrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst digest = (algorithm, data) => (0, crypto_1.createHash)(algorithm).update(data).digest();\nexports[\"default\"] = digest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZGlnZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLFFBQVEsR0FBR0MsbUJBQU8sQ0FBQyxzQkFBUSxDQUFDO0FBQ2xDLE1BQU1DLE1BQU0sR0FBR0EsQ0FBQ0MsU0FBUyxFQUFFQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUVKLFFBQVEsQ0FBQ0ssVUFBVSxFQUFFRixTQUFTLENBQUMsQ0FBQ0csTUFBTSxDQUFDRixJQUFJLENBQUMsQ0FBQ0YsTUFBTSxDQUFDLENBQUM7QUFDN0ZKLGtCQUFlLEdBQUdJLE1BQU0iLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2RpZ2VzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IGRpZ2VzdCA9IChhbGdvcml0aG0sIGRhdGEpID0+ICgwLCBjcnlwdG9fMS5jcmVhdGVIYXNoKShhbGdvcml0aG0pLnVwZGF0ZShkYXRhKS5kaWdlc3QoKTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRpZ2VzdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImNyeXB0b18xIiwicmVxdWlyZSIsImRpZ2VzdCIsImFsZ29yaXRobSIsImRhdGEiLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/digest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction dsaDigest(alg) {\n  switch (alg) {\n    case 'PS256':\n    case 'RS256':\n    case 'ES256':\n    case 'ES256K':\n      return 'sha256';\n    case 'PS384':\n    case 'RS384':\n    case 'ES384':\n      return 'sha384';\n    case 'PS512':\n    case 'RS512':\n    case 'ES512':\n      return 'sha512';\n    case 'EdDSA':\n      return undefined;\n    default:\n      throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n  }\n}\nexports[\"default\"] = dsaDigest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZHNhX2RpZ2VzdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxXQUFXLEdBQUdDLG1CQUFPLENBQUMsNEdBQW1CLENBQUM7QUFDaEQsU0FBU0MsU0FBU0EsQ0FBQ0MsR0FBRyxFQUFFO0VBQ3BCLFFBQVFBLEdBQUc7SUFDUCxLQUFLLE9BQU87SUFDWixLQUFLLE9BQU87SUFDWixLQUFLLE9BQU87SUFDWixLQUFLLFFBQVE7TUFDVCxPQUFPLFFBQVE7SUFDbkIsS0FBSyxPQUFPO0lBQ1osS0FBSyxPQUFPO0lBQ1osS0FBSyxPQUFPO01BQ1IsT0FBTyxRQUFRO0lBQ25CLEtBQUssT0FBTztJQUNaLEtBQUssT0FBTztJQUNaLEtBQUssT0FBTztNQUNSLE9BQU8sUUFBUTtJQUNuQixLQUFLLE9BQU87TUFDUixPQUFPQyxTQUFTO0lBQ3BCO01BQ0ksTUFBTSxJQUFJSixXQUFXLENBQUNLLGdCQUFnQixDQUFFLE9BQU1GLEdBQUksNkRBQTRELENBQUM7RUFDdkg7QUFDSjtBQUNBTCxrQkFBZSxHQUFHSSxTQUFTIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9kc2FfZGlnZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5mdW5jdGlvbiBkc2FEaWdlc3QoYWxnKSB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnUFMyNTYnOlxuICAgICAgICBjYXNlICdSUzI1Nic6XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgY2FzZSAnRVMyNTZLJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMjU2JztcbiAgICAgICAgY2FzZSAnUFMzODQnOlxuICAgICAgICBjYXNlICdSUzM4NCc6XG4gICAgICAgIGNhc2UgJ0VTMzg0JzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMzg0JztcbiAgICAgICAgY2FzZSAnUFM1MTInOlxuICAgICAgICBjYXNlICdSUzUxMic6XG4gICAgICAgIGNhc2UgJ0VTNTEyJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhNTEyJztcbiAgICAgICAgY2FzZSAnRWREU0EnOlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKGBhbGcgJHthbGd9IGlzIG5vdCBzdXBwb3J0ZWQgZWl0aGVyIGJ5IEpPU0Ugb3IgeW91ciBqYXZhc2NyaXB0IHJ1bnRpbWVgKTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkc2FEaWdlc3Q7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlcnJvcnNfanNfMSIsInJlcXVpcmUiLCJkc2FEaWdlc3QiLCJhbGciLCJ1bmRlZmluZWQiLCJKT1NFTm90U3VwcG9ydGVkIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ecdhAllowed = exports.generateEpk = exports.deriveKey = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst get_named_curve_js_1 = __webpack_require__(/*! ./get_named_curve.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst generateKeyPair = (0, util_1.promisify)(crypto_1.generateKeyPair);\nasync function deriveKey(publicKee, privateKee, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) {\n  let publicKey;\n  if ((0, webcrypto_js_1.isCryptoKey)(publicKee)) {\n    (0, crypto_key_js_1.checkEncCryptoKey)(publicKee, 'ECDH');\n    publicKey = crypto_1.KeyObject.from(publicKee);\n  } else if ((0, is_key_object_js_1.default)(publicKee)) {\n    publicKey = publicKee;\n  } else {\n    throw new TypeError((0, invalid_key_input_js_1.default)(publicKee, ...is_key_like_js_1.types));\n  }\n  let privateKey;\n  if ((0, webcrypto_js_1.isCryptoKey)(privateKee)) {\n    (0, crypto_key_js_1.checkEncCryptoKey)(privateKee, 'ECDH', 'deriveBits');\n    privateKey = crypto_1.KeyObject.from(privateKee);\n  } else if ((0, is_key_object_js_1.default)(privateKee)) {\n    privateKey = privateKee;\n  } else {\n    throw new TypeError((0, invalid_key_input_js_1.default)(privateKee, ...is_key_like_js_1.types));\n  }\n  const value = (0, buffer_utils_js_1.concat)((0, buffer_utils_js_1.lengthAndInput)(buffer_utils_js_1.encoder.encode(algorithm)), (0, buffer_utils_js_1.lengthAndInput)(apu), (0, buffer_utils_js_1.lengthAndInput)(apv), (0, buffer_utils_js_1.uint32be)(keyLength));\n  const sharedSecret = (0, crypto_1.diffieHellman)({\n    privateKey,\n    publicKey\n  });\n  return (0, buffer_utils_js_1.concatKdf)(sharedSecret, keyLength, value);\n}\nexports.deriveKey = deriveKey;\nasync function generateEpk(kee) {\n  let key;\n  if ((0, webcrypto_js_1.isCryptoKey)(kee)) {\n    key = crypto_1.KeyObject.from(kee);\n  } else if ((0, is_key_object_js_1.default)(kee)) {\n    key = kee;\n  } else {\n    throw new TypeError((0, invalid_key_input_js_1.default)(kee, ...is_key_like_js_1.types));\n  }\n  switch (key.asymmetricKeyType) {\n    case 'x25519':\n      return generateKeyPair('x25519');\n    case 'x448':\n      {\n        return generateKeyPair('x448');\n      }\n    case 'ec':\n      {\n        const namedCurve = (0, get_named_curve_js_1.default)(key);\n        return generateKeyPair('ec', {\n          namedCurve\n        });\n      }\n    default:\n      throw new errors_js_1.JOSENotSupported('Invalid or unsupported EPK');\n  }\n}\nexports.generateEpk = generateEpk;\nconst ecdhAllowed = key => ['P-256', 'P-384', 'P-521', 'X25519', 'X448'].includes((0, get_named_curve_js_1.default)(key));\nexports.ecdhAllowed = ecdhAllowed;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ecdhes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst check_iv_length_js_1 = __webpack_require__(/*! ../lib/check_iv_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_iv_length.js\");\nconst check_cek_length_js_1 = __webpack_require__(/*! ./check_cek_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_cek_length.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst cbc_tag_js_1 = __webpack_require__(/*! ./cbc_tag.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/cbc_tag.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst ciphers_js_1 = __webpack_require__(/*! ./ciphers.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/ciphers.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nfunction cbcEncrypt(enc, plaintext, cek, iv, aad) {\n  const keySize = parseInt(enc.slice(1, 4), 10);\n  if ((0, is_key_object_js_1.default)(cek)) {\n    cek = cek.export();\n  }\n  const encKey = cek.subarray(keySize >> 3);\n  const macKey = cek.subarray(0, keySize >> 3);\n  const algorithm = `aes-${keySize}-cbc`;\n  if (!(0, ciphers_js_1.default)(algorithm)) {\n    throw new errors_js_1.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);\n  }\n  const cipher = (0, crypto_1.createCipheriv)(algorithm, encKey, iv);\n  const ciphertext = (0, buffer_utils_js_1.concat)(cipher.update(plaintext), cipher.final());\n  const macSize = parseInt(enc.slice(-3), 10);\n  const tag = (0, cbc_tag_js_1.default)(aad, iv, ciphertext, macSize, macKey, keySize);\n  return {\n    ciphertext,\n    tag\n  };\n}\nfunction gcmEncrypt(enc, plaintext, cek, iv, aad) {\n  const keySize = parseInt(enc.slice(1, 4), 10);\n  const algorithm = `aes-${keySize}-gcm`;\n  if (!(0, ciphers_js_1.default)(algorithm)) {\n    throw new errors_js_1.JOSENotSupported(`alg ${enc} is not supported by your javascript runtime`);\n  }\n  const cipher = (0, crypto_1.createCipheriv)(algorithm, cek, iv, {\n    authTagLength: 16\n  });\n  if (aad.byteLength) {\n    cipher.setAAD(aad, {\n      plaintextLength: plaintext.length\n    });\n  }\n  const ciphertext = cipher.update(plaintext);\n  cipher.final();\n  const tag = cipher.getAuthTag();\n  return {\n    ciphertext,\n    tag\n  };\n}\nconst encrypt = (enc, plaintext, cek, iv, aad) => {\n  let key;\n  if ((0, webcrypto_js_1.isCryptoKey)(cek)) {\n    (0, crypto_key_js_1.checkEncCryptoKey)(cek, enc, 'encrypt');\n    key = crypto_1.KeyObject.from(cek);\n  } else if (cek instanceof Uint8Array || (0, is_key_object_js_1.default)(cek)) {\n    key = cek;\n  } else {\n    throw new TypeError((0, invalid_key_input_js_1.default)(cek, ...is_key_like_js_1.types, 'Uint8Array'));\n  }\n  (0, check_cek_length_js_1.default)(enc, key);\n  (0, check_iv_length_js_1.default)(enc, iv);\n  switch (enc) {\n    case 'A128CBC-HS256':\n    case 'A192CBC-HS384':\n    case 'A256CBC-HS512':\n      return cbcEncrypt(enc, plaintext, key, iv, aad);\n    case 'A128GCM':\n    case 'A192GCM':\n    case 'A256GCM':\n      return gcmEncrypt(enc, plaintext, key, iv, aad);\n    default:\n      throw new errors_js_1.JOSENotSupported('Unsupported JWE Content Encryption Algorithm');\n  }\n};\nexports[\"default\"] = encrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/encrypt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/fetch_jwks.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/fetch_jwks.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst http = __webpack_require__(/*! http */ \"http\");\nconst https = __webpack_require__(/*! https */ \"https\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst fetchJwks = async (url, timeout, options) => {\n  let get;\n  switch (url.protocol) {\n    case 'https:':\n      get = https.get;\n      break;\n    case 'http:':\n      get = http.get;\n      break;\n    default:\n      throw new TypeError('Unsupported URL protocol.');\n  }\n  const {\n    agent,\n    headers\n  } = options;\n  const req = get(url.href, {\n    agent,\n    timeout,\n    headers\n  });\n  const [response] = await Promise.race([(0, events_1.once)(req, 'response'), (0, events_1.once)(req, 'timeout')]);\n  if (!response) {\n    req.destroy();\n    throw new errors_js_1.JWKSTimeout();\n  }\n  if (response.statusCode !== 200) {\n    throw new errors_js_1.JOSEError('Expected 200 OK from the JSON Web Key Set HTTP response');\n  }\n  const parts = [];\n  for await (const part of response) {\n    parts.push(part);\n  }\n  try {\n    return JSON.parse(buffer_utils_js_1.decoder.decode((0, buffer_utils_js_1.concat)(...parts)));\n  } catch {\n    throw new errors_js_1.JOSEError('Failed to parse the JSON Web Key Set HTTP response as JSON');\n  }\n};\nexports[\"default\"] = fetchJwks;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZmV0Y2hfandrcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxJQUFJLEdBQUdDLG1CQUFPLENBQUMsa0JBQU0sQ0FBQztBQUM1QixNQUFNQyxLQUFLLEdBQUdELG1CQUFPLENBQUMsb0JBQU8sQ0FBQztBQUM5QixNQUFNRSxRQUFRLEdBQUdGLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNsQyxNQUFNRyxXQUFXLEdBQUdILG1CQUFPLENBQUMsNEdBQW1CLENBQUM7QUFDaEQsTUFBTUksaUJBQWlCLEdBQUdKLG1CQUFPLENBQUMsc0hBQXdCLENBQUM7QUFDM0QsTUFBTUssU0FBUyxHQUFHLE1BQUFBLENBQU9DLEdBQUcsRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEtBQUs7RUFDL0MsSUFBSUMsR0FBRztFQUNQLFFBQVFILEdBQUcsQ0FBQ0ksUUFBUTtJQUNoQixLQUFLLFFBQVE7TUFDVEQsR0FBRyxHQUFHUixLQUFLLENBQUNRLEdBQUc7TUFDZjtJQUNKLEtBQUssT0FBTztNQUNSQSxHQUFHLEdBQUdWLElBQUksQ0FBQ1UsR0FBRztNQUNkO0lBQ0o7TUFDSSxNQUFNLElBQUlFLFNBQVMsQ0FBQywyQkFBMkIsQ0FBQztFQUN4RDtFQUNBLE1BQU07SUFBRUMsS0FBSztJQUFFQztFQUFRLENBQUMsR0FBR0wsT0FBTztFQUNsQyxNQUFNTSxHQUFHLEdBQUdMLEdBQUcsQ0FBQ0gsR0FBRyxDQUFDUyxJQUFJLEVBQUU7SUFDdEJILEtBQUs7SUFDTEwsT0FBTztJQUNQTTtFQUNKLENBQUMsQ0FBQztFQUNGLE1BQU0sQ0FBQ0csUUFBUSxDQUFDLEdBQUksTUFBTUMsT0FBTyxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRWhCLFFBQVEsQ0FBQ2lCLElBQUksRUFBRUwsR0FBRyxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFWixRQUFRLENBQUNpQixJQUFJLEVBQUVMLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFFO0VBQ2xILElBQUksQ0FBQ0UsUUFBUSxFQUFFO0lBQ1hGLEdBQUcsQ0FBQ00sT0FBTyxDQUFDLENBQUM7SUFDYixNQUFNLElBQUlqQixXQUFXLENBQUNrQixXQUFXLENBQUMsQ0FBQztFQUN2QztFQUNBLElBQUlMLFFBQVEsQ0FBQ00sVUFBVSxLQUFLLEdBQUcsRUFBRTtJQUM3QixNQUFNLElBQUluQixXQUFXLENBQUNvQixTQUFTLENBQUMseURBQXlELENBQUM7RUFDOUY7RUFDQSxNQUFNQyxLQUFLLEdBQUcsRUFBRTtFQUNoQixXQUFXLE1BQU1DLElBQUksSUFBSVQsUUFBUSxFQUFFO0lBQy9CUSxLQUFLLENBQUNFLElBQUksQ0FBQ0QsSUFBSSxDQUFDO0VBQ3BCO0VBQ0EsSUFBSTtJQUNBLE9BQU9FLElBQUksQ0FBQ0MsS0FBSyxDQUFDeEIsaUJBQWlCLENBQUN5QixPQUFPLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTFCLGlCQUFpQixDQUFDMkIsTUFBTSxFQUFFLEdBQUdQLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDaEcsQ0FBQyxDQUNELE1BQU07SUFDRixNQUFNLElBQUlyQixXQUFXLENBQUNvQixTQUFTLENBQUMsNERBQTRELENBQUM7RUFDakc7QUFDSixDQUFDO0FBQ0QxQixrQkFBZSxHQUFHUSxTQUFTIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9mZXRjaF9qd2tzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaHR0cCA9IHJlcXVpcmUoXCJodHRwXCIpO1xuY29uc3QgaHR0cHMgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5jb25zdCBmZXRjaEp3a3MgPSBhc3luYyAodXJsLCB0aW1lb3V0LCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IGdldDtcbiAgICBzd2l0Y2ggKHVybC5wcm90b2NvbCkge1xuICAgICAgICBjYXNlICdodHRwczonOlxuICAgICAgICAgICAgZ2V0ID0gaHR0cHMuZ2V0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2h0dHA6JzpcbiAgICAgICAgICAgIGdldCA9IGh0dHAuZ2V0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbnN1cHBvcnRlZCBVUkwgcHJvdG9jb2wuJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgYWdlbnQsIGhlYWRlcnMgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgcmVxID0gZ2V0KHVybC5ocmVmLCB7XG4gICAgICAgIGFnZW50LFxuICAgICAgICB0aW1lb3V0LFxuICAgICAgICBoZWFkZXJzLFxuICAgIH0pO1xuICAgIGNvbnN0IFtyZXNwb25zZV0gPSAoYXdhaXQgUHJvbWlzZS5yYWNlKFsoMCwgZXZlbnRzXzEub25jZSkocmVxLCAncmVzcG9uc2UnKSwgKDAsIGV2ZW50c18xLm9uY2UpKHJlcSwgJ3RpbWVvdXQnKV0pKTtcbiAgICBpZiAoIXJlc3BvbnNlKSB7XG4gICAgICAgIHJlcS5kZXN0cm95KCk7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV0tTVGltZW91dCgpO1xuICAgIH1cbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFRXJyb3IoJ0V4cGVjdGVkIDIwMCBPSyBmcm9tIHRoZSBKU09OIFdlYiBLZXkgU2V0IEhUVFAgcmVzcG9uc2UnKTtcbiAgICB9XG4gICAgY29uc3QgcGFydHMgPSBbXTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IHBhcnQgb2YgcmVzcG9uc2UpIHtcbiAgICAgICAgcGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoYnVmZmVyX3V0aWxzX2pzXzEuZGVjb2Rlci5kZWNvZGUoKDAsIGJ1ZmZlcl91dGlsc19qc18xLmNvbmNhdCkoLi4ucGFydHMpKSk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VFcnJvcignRmFpbGVkIHRvIHBhcnNlIHRoZSBKU09OIFdlYiBLZXkgU2V0IEhUVFAgcmVzcG9uc2UgYXMgSlNPTicpO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBmZXRjaEp3a3M7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJodHRwIiwicmVxdWlyZSIsImh0dHBzIiwiZXZlbnRzXzEiLCJlcnJvcnNfanNfMSIsImJ1ZmZlcl91dGlsc19qc18xIiwiZmV0Y2hKd2tzIiwidXJsIiwidGltZW91dCIsIm9wdGlvbnMiLCJnZXQiLCJwcm90b2NvbCIsIlR5cGVFcnJvciIsImFnZW50IiwiaGVhZGVycyIsInJlcSIsImhyZWYiLCJyZXNwb25zZSIsIlByb21pc2UiLCJyYWNlIiwib25jZSIsImRlc3Ryb3kiLCJKV0tTVGltZW91dCIsInN0YXR1c0NvZGUiLCJKT1NFRXJyb3IiLCJwYXJ0cyIsInBhcnQiLCJwdXNoIiwiSlNPTiIsInBhcnNlIiwiZGVjb2RlciIsImRlY29kZSIsImNvbmNhdCIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/fetch_jwks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.jwkImport = exports.jwkExport = exports.rsaPssParams = exports.oneShotCallback = void 0;\nconst [major, minor] = process.versions.node.split('.').map(str => parseInt(str, 10));\nexports.oneShotCallback = major >= 16 || major === 15 && minor >= 13;\nexports.rsaPssParams = !('electron' in process.versions) && (major >= 17 || major === 16 && minor >= 9);\nexports.jwkExport = major >= 16 || major === 15 && minor >= 9;\nexports.jwkImport = major >= 16 || major === 15 && minor >= 12;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZmxhZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELGlCQUFpQixHQUFHQSxpQkFBaUIsR0FBR0Esb0JBQW9CLEdBQUdBLHVCQUF1QixHQUFHLEtBQUssQ0FBQztBQUMvRixNQUFNLENBQUNNLEtBQUssRUFBRUMsS0FBSyxDQUFDLEdBQUdDLE9BQU8sQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsR0FBRyxDQUFFQyxHQUFHLElBQUtDLFFBQVEsQ0FBQ0QsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZGYix1QkFBdUIsR0FBR00sS0FBSyxJQUFJLEVBQUUsSUFBS0EsS0FBSyxLQUFLLEVBQUUsSUFBSUMsS0FBSyxJQUFJLEVBQUc7QUFDdEVQLG9CQUFvQixHQUFHLEVBQUUsVUFBVSxJQUFJUSxPQUFPLENBQUNDLFFBQVEsQ0FBQyxLQUFLSCxLQUFLLElBQUksRUFBRSxJQUFLQSxLQUFLLEtBQUssRUFBRSxJQUFJQyxLQUFLLElBQUksQ0FBRSxDQUFDO0FBQ3pHUCxpQkFBaUIsR0FBR00sS0FBSyxJQUFJLEVBQUUsSUFBS0EsS0FBSyxLQUFLLEVBQUUsSUFBSUMsS0FBSyxJQUFJLENBQUU7QUFDL0RQLGlCQUFpQixHQUFHTSxLQUFLLElBQUksRUFBRSxJQUFLQSxLQUFLLEtBQUssRUFBRSxJQUFJQyxLQUFLLElBQUksRUFBRyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZmxhZ3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmp3a0ltcG9ydCA9IGV4cG9ydHMuandrRXhwb3J0ID0gZXhwb3J0cy5yc2FQc3NQYXJhbXMgPSBleHBvcnRzLm9uZVNob3RDYWxsYmFjayA9IHZvaWQgMDtcbmNvbnN0IFttYWpvciwgbWlub3JdID0gcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLnNwbGl0KCcuJykubWFwKChzdHIpID0+IHBhcnNlSW50KHN0ciwgMTApKTtcbmV4cG9ydHMub25lU2hvdENhbGxiYWNrID0gbWFqb3IgPj0gMTYgfHwgKG1ham9yID09PSAxNSAmJiBtaW5vciA+PSAxMyk7XG5leHBvcnRzLnJzYVBzc1BhcmFtcyA9ICEoJ2VsZWN0cm9uJyBpbiBwcm9jZXNzLnZlcnNpb25zKSAmJiAobWFqb3IgPj0gMTcgfHwgKG1ham9yID09PSAxNiAmJiBtaW5vciA+PSA5KSk7XG5leHBvcnRzLmp3a0V4cG9ydCA9IG1ham9yID49IDE2IHx8IChtYWpvciA9PT0gMTUgJiYgbWlub3IgPj0gOSk7XG5leHBvcnRzLmp3a0ltcG9ydCA9IG1ham9yID49IDE2IHx8IChtYWpvciA9PT0gMTUgJiYgbWlub3IgPj0gMTIpO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiandrSW1wb3J0IiwiandrRXhwb3J0IiwicnNhUHNzUGFyYW1zIiwib25lU2hvdENhbGxiYWNrIiwibWFqb3IiLCJtaW5vciIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJzcGxpdCIsIm1hcCIsInN0ciIsInBhcnNlSW50Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.generateKeyPair = exports.generateSecret = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst random_js_1 = __webpack_require__(/*! ./random.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\");\nconst check_modulus_length_js_1 = __webpack_require__(/*! ./check_modulus_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst generate = (0, util_1.promisify)(crypto_1.generateKeyPair);\nasync function generateSecret(alg, options) {\n  let length;\n  switch (alg) {\n    case 'HS256':\n    case 'HS384':\n    case 'HS512':\n    case 'A128CBC-HS256':\n    case 'A192CBC-HS384':\n    case 'A256CBC-HS512':\n      length = parseInt(alg.slice(-3), 10);\n      break;\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n    case 'A128GCMKW':\n    case 'A192GCMKW':\n    case 'A256GCMKW':\n    case 'A128GCM':\n    case 'A192GCM':\n    case 'A256GCM':\n      length = parseInt(alg.slice(1, 4), 10);\n      break;\n    default:\n      throw new errors_js_1.JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n  }\n  return (0, crypto_1.createSecretKey)((0, random_js_1.default)(new Uint8Array(length >> 3)));\n}\nexports.generateSecret = generateSecret;\nasync function generateKeyPair(alg, options) {\n  var _a, _b;\n  switch (alg) {\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n    case 'PS256':\n    case 'PS384':\n    case 'PS512':\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n    case 'RSA1_5':\n      {\n        const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;\n        if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n          throw new errors_js_1.JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');\n        }\n        const keypair = await generate('rsa', {\n          modulusLength,\n          publicExponent: 0x10001\n        });\n        (0, check_modulus_length_js_1.setModulusLength)(keypair.privateKey, modulusLength);\n        (0, check_modulus_length_js_1.setModulusLength)(keypair.publicKey, modulusLength);\n        return keypair;\n      }\n    case 'ES256':\n      return generate('ec', {\n        namedCurve: 'P-256'\n      });\n    case 'ES256K':\n      return generate('ec', {\n        namedCurve: 'secp256k1'\n      });\n    case 'ES384':\n      return generate('ec', {\n        namedCurve: 'P-384'\n      });\n    case 'ES512':\n      return generate('ec', {\n        namedCurve: 'P-521'\n      });\n    case 'EdDSA':\n      {\n        switch (options === null || options === void 0 ? void 0 : options.crv) {\n          case undefined:\n          case 'Ed25519':\n            return generate('ed25519');\n          case 'Ed448':\n            return generate('ed448');\n          default:\n            throw new errors_js_1.JOSENotSupported('Invalid or unsupported crv option provided, supported values are Ed25519 and Ed448');\n        }\n      }\n    case 'ECDH-ES':\n    case 'ECDH-ES+A128KW':\n    case 'ECDH-ES+A192KW':\n    case 'ECDH-ES+A256KW':\n      const crv = (_b = options === null || options === void 0 ? void 0 : options.crv) !== null && _b !== void 0 ? _b : 'P-256';\n      switch (crv) {\n        case undefined:\n        case 'P-256':\n        case 'P-384':\n        case 'P-521':\n          return generate('ec', {\n            namedCurve: crv\n          });\n        case 'X25519':\n          return generate('x25519');\n        case 'X448':\n          return generate('x448');\n        default:\n          throw new errors_js_1.JOSENotSupported('Invalid or unsupported crv option provided, supported values are P-256, P-384, P-521, X25519, and X448');\n      }\n    default:\n      throw new errors_js_1.JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n  }\n}\nexports.generateKeyPair = generateKeyPair;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZ2VuZXJhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELHVCQUF1QixHQUFHQSxzQkFBc0IsR0FBRyxLQUFLLENBQUM7QUFDekQsTUFBTUksUUFBUSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFRLENBQUM7QUFDbEMsTUFBTUMsTUFBTSxHQUFHRCxtQkFBTyxDQUFDLGtCQUFNLENBQUM7QUFDOUIsTUFBTUUsV0FBVyxHQUFHRixtQkFBTyxDQUFDLHlHQUFhLENBQUM7QUFDMUMsTUFBTUcseUJBQXlCLEdBQUdILG1CQUFPLENBQUMscUlBQTJCLENBQUM7QUFDdEUsTUFBTUksV0FBVyxHQUFHSixtQkFBTyxDQUFDLDRHQUFtQixDQUFDO0FBQ2hELE1BQU1LLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRUosTUFBTSxDQUFDSyxTQUFTLEVBQUVQLFFBQVEsQ0FBQ0YsZUFBZSxDQUFDO0FBQ2hFLGVBQWVDLGNBQWNBLENBQUNTLEdBQUcsRUFBRUMsT0FBTyxFQUFFO0VBQ3hDLElBQUlDLE1BQU07RUFDVixRQUFRRixHQUFHO0lBQ1AsS0FBSyxPQUFPO0lBQ1osS0FBSyxPQUFPO0lBQ1osS0FBSyxPQUFPO0lBQ1osS0FBSyxlQUFlO0lBQ3BCLEtBQUssZUFBZTtJQUNwQixLQUFLLGVBQWU7TUFDaEJFLE1BQU0sR0FBR0MsUUFBUSxDQUFDSCxHQUFHLENBQUNJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQztNQUNwQztJQUNKLEtBQUssUUFBUTtJQUNiLEtBQUssUUFBUTtJQUNiLEtBQUssUUFBUTtJQUNiLEtBQUssV0FBVztJQUNoQixLQUFLLFdBQVc7SUFDaEIsS0FBSyxXQUFXO0lBQ2hCLEtBQUssU0FBUztJQUNkLEtBQUssU0FB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Q3JCLEtBQUssZ0JBQWdCO0lBQ3JCLEtBQUssZ0JBQWdCO01BQ2pCLE1BQU1hLEdBQUcsR0FBRyxDQUFDUixFQUFFLEdBQUdULE9BQU8sS0FBSyxJQUFJLElBQUlBLE9BQU8sS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsT0FBTyxDQUFDaUIsR0FBRyxNQUFNLElBQUksSUFBSVIsRUFBRSxLQUFLLEtBQUssQ0FBQyxHQUFHQSxFQUFFLEdBQUcsT0FBTztNQUN6SCxRQUFRUSxHQUFHO1FBQ1AsS0FBS0MsU0FBUztRQUNkLEtBQUssT0FBTztRQUNaLEtBQUssT0FBTztRQUNaLEtBQUssT0FBTztVQUNSLE9BQU9yQixRQUFRLENBQUMsSUFBSSxFQUFFO1lBQUVtQixVQUFVLEVBQUVDO1VBQUksQ0FBQyxDQUFDO1FBQzlDLEtBQUssUUFBUTtVQUNULE9BQU9wQixRQUFRLENBQUMsUUFBUSxDQUFDO1FBQzdCLEtBQUssTUFBTTtVQUNQLE9BQU9BLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDM0I7VUFDSSxNQUFNLElBQUlELFdBQVcsQ0FBQ1EsZ0JBQWdCLENBQUMsd0dBQXdHLENBQUM7TUFDeEo7SUFDSjtNQUNJLE1BQU0sSUFBSVIsV0FBVyxDQUFDUSxnQkFBZ0IsQ0FBQyw4REFBOEQsQ0FBQztFQUM5RztBQUNKO0FBQ0FqQix1QkFBdUIsR0FBR0UsZUFBZSIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZ2VuZXJhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdlbmVyYXRlS2V5UGFpciA9IGV4cG9ydHMuZ2VuZXJhdGVTZWNyZXQgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IHJhbmRvbV9qc18xID0gcmVxdWlyZShcIi4vcmFuZG9tLmpzXCIpO1xuY29uc3QgY2hlY2tfbW9kdWx1c19sZW5ndGhfanNfMSA9IHJlcXVpcmUoXCIuL2NoZWNrX21vZHVsdXNfbGVuZ3RoLmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBnZW5lcmF0ZSA9ICgwLCB1dGlsXzEucHJvbWlzaWZ5KShjcnlwdG9fMS5nZW5lcmF0ZUtleVBhaXIpO1xuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVTZWNyZXQoYWxnLCBvcHRpb25zKSB7XG4gICAgbGV0IGxlbmd0aDtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdIUzI1Nic6XG4gICAgICAgIGNhc2UgJ0hTMzg0JzpcbiAgICAgICAgY2FzZSAnSFM1MTInOlxuICAgICAgICBjYXNlICdBMTI4Q0JDLUhTMjU2JzpcbiAgICAgICAgY2FzZSAnQTE5MkNCQy1IUzM4NCc6XG4gICAgICAgIGNhc2UgJ0EyNTZDQkMtSFM1MTInOlxuICAgICAgICAgICAgbGVuZ3RoID0gcGFyc2VJbnQoYWxnLnNsaWNlKC0zKSwgMTApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0ExMjhLVyc6XG4gICAgICAgIGNhc2UgJ0ExOTJLVyc6XG4gICAgICAgIGNhc2UgJ0EyNTZLVyc6XG4gICAgICAgIGNhc2UgJ0ExMjhHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0ExOTJHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0EyNTZHQ01LVyc6XG4gICAgICAgIGNhc2UgJ0ExMjhHQ00nOlxuICAgICAgICBjYXNlICdBMTkyR0NNJzpcbiAgICAgICAgY2FzZSAnQTI1NkdDTSc6XG4gICAgICAgICAgICBsZW5ndGggPSBwYXJzZUludChhbGcuc2xpY2UoMSwgNCksIDEwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgSldLIFwiYWxnXCIgKEFsZ29yaXRobSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgY3J5cHRvXzEuY3JlYXRlU2VjcmV0S2V5KSgoMCwgcmFuZG9tX2pzXzEuZGVmYXVsdCkobmV3IFVpbnQ4QXJyYXkobGVuZ3RoID4+IDMpKSk7XG59XG5leHBvcnRzLmdlbmVyYXRlU2VjcmV0ID0gZ2VuZXJhdGVTZWNyZXQ7XG5hc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUtleVBhaXIoYWxnLCBvcHRpb25zKSB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBzd2l0Y2ggKGFsZykge1xuICAgICAgICBjYXNlICdSUzI1Nic6XG4gICAgICAgIGNhc2UgJ1JTMzg0JzpcbiAgICAgICAgY2FzZSAnUlM1MTInOlxuICAgICAgICBjYXNlICdQUzI1Nic6XG4gICAgICAgIGNhc2UgJ1BTMzg0JzpcbiAgICAgICAgY2FzZSAnUFM1MTInOlxuICAgICAgICBjYXNlICdSU0EtT0FFUCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTI1Nic6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTM4NCc6XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQLTUxMic6XG4gICAgICAgIGNhc2UgJ1JTQTFfNSc6IHtcbiAgICAgICAgICAgIGNvbnN0IG1vZHVsdXNMZW5ndGggPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMubW9kdWx1c0xlbmd0aCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMjA0ODtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbW9kdWx1c0xlbmd0aCAhPT0gJ251bWJlcicgfHwgbW9kdWx1c0xlbmd0aCA8IDIwNDgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnSW52YWxpZCBvciB1bnN1cHBvcnRlZCBtb2R1bHVzTGVuZ3RoIG9wdGlvbiBwcm92aWRlZCwgMjA0OCBiaXRzIG9yIGxhcmdlciBrZXlzIG11c3QgYmUgdXNlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qga2V5cGFpciA9IGF3YWl0IGdlbmVyYXRlKCdyc2EnLCB7XG4gICAgICAgICAgICAgICAgbW9kdWx1c0xlbmd0aCxcbiAgICAgICAgICAgICAgICBwdWJsaWNFeHBvbmVudDogMHgxMDAwMSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKDAsIGNoZWNrX21vZHVsdXNfbGVuZ3RoX2pzXzEuc2V0TW9kdWx1c0xlbmd0aCkoa2V5cGFpci5wcml2YXRlS2V5LCBtb2R1bHVzTGVuZ3RoKTtcbiAgICAgICAgICAgICgwLCBjaGVja19tb2R1bHVzX2xlbmd0aF9qc18xLnNldE1vZHVsdXNMZW5ndGgpKGtleXBhaXIucHVibGljS2V5LCBtb2R1bHVzTGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBrZXlwYWlyO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0VTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiBnZW5lcmF0ZSgnZWMnLCB7IG5hbWVkQ3VydmU6ICdQLTI1NicgfSk7XG4gICAgICAgIGNhc2UgJ0VTMjU2Syc6XG4gICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGUoJ2VjJywgeyBuYW1lZEN1cnZlOiAnc2VjcDI1NmsxJyB9KTtcbiAgICAgICAgY2FzZSAnRVMzODQnOlxuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCdlYycsIHsgbmFtZWRDdXJ2ZTogJ1AtMzg0JyB9KTtcbiAgICAgICAgY2FzZSAnRVM1MTInOlxuICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCdlYycsIHsgbmFtZWRDdXJ2ZTogJ1AtNTIxJyB9KTtcbiAgICAgICAgY2FzZSAnRWREU0EnOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jcnYpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgICAgICBjYXNlICdFZDI1NTE5JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCdlZDI1NTE5Jyk7XG4gICAgICAgICAgICAgICAgY2FzZSAnRWQ0NDgnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGUoJ2VkNDQ4Jyk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgY3J2IG9wdGlvbiBwcm92aWRlZCwgc3VwcG9ydGVkIHZhbHVlcyBhcmUgRWQyNTUxOSBhbmQgRWQ0NDgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXNlICdFQ0RILUVTJzpcbiAgICAgICAgY2FzZSAnRUNESC1FUytBMTI4S1cnOlxuICAgICAgICBjYXNlICdFQ0RILUVTK0ExOTJLVyc6XG4gICAgICAgIGNhc2UgJ0VDREgtRVMrQTI1NktXJzpcbiAgICAgICAgICAgIGNvbnN0IGNydiA9IChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jcnYpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICdQLTI1Nic7XG4gICAgICAgICAgICBzd2l0Y2ggKGNydikge1xuICAgICAgICAgICAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1AtMjU2JzpcbiAgICAgICAgICAgICAgICBjYXNlICdQLTM4NCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUC01MjEnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2VuZXJhdGUoJ2VjJywgeyBuYW1lZEN1cnZlOiBjcnYgfSk7XG4gICAgICAgICAgICAgICAgY2FzZSAnWDI1NTE5JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCd4MjU1MTknKTtcbiAgICAgICAgICAgICAgICBjYXNlICdYNDQ4JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlKCd4NDQ4Jyk7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgY3J2IG9wdGlvbiBwcm92aWRlZCwgc3VwcG9ydGVkIHZhbHVlcyBhcmUgUC0yNTYsIFAtMzg0LCBQLTUyMSwgWDI1NTE5LCBhbmQgWDQ0OCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ0ludmFsaWQgb3IgdW5zdXBwb3J0ZWQgSldLIFwiYWxnXCIgKEFsZ29yaXRobSkgUGFyYW1ldGVyIHZhbHVlJyk7XG4gICAgfVxufVxuZXhwb3J0cy5nZW5lcmF0ZUtleVBhaXIgPSBnZW5lcmF0ZUtleVBhaXI7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZW5lcmF0ZUtleVBhaXIiLCJnZW5lcmF0ZVNlY3JldCIsImNyeXB0b18xIiwicmVxdWlyZSIsInV0aWxfMSIsInJhbmRvbV9qc18xIiwiY2hlY2tfbW9kdWx1c19sZW5ndGhfanNfMSIsImVycm9yc19qc18xIiwiZ2VuZXJhdGUiLCJwcm9taXNpZnkiLCJhbGciLCJvcHRpb25zIiwibGVuZ3RoIiwicGFyc2VJbnQiLCJzbGljZSIsIkpPU0VOb3RTdXBwb3J0ZWQiLCJjcmVhdGVTZWNyZXRLZXkiLCJkZWZhdWx0IiwiVWludDhBcnJheSIsIl9hIiwiX2IiLCJtb2R1bHVzTGVuZ3RoIiwia2V5cGFpciIsInB1YmxpY0V4cG9uZW50Iiwic2V0TW9kdWx1c0xlbmd0aCIsInByaXZhdGVLZXkiLCJwdWJsaWNLZXkiLCJuYW1lZEN1cnZlIiwiY3J2IiwidW5kZWZpbmVkIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/generate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.setCurve = exports.weakMap = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst p256 = buffer_1.Buffer.from([42, 134, 72, 206, 61, 3, 1, 7]);\nconst p384 = buffer_1.Buffer.from([43, 129, 4, 0, 34]);\nconst p521 = buffer_1.Buffer.from([43, 129, 4, 0, 35]);\nconst secp256k1 = buffer_1.Buffer.from([43, 129, 4, 0, 10]);\nexports.weakMap = new WeakMap();\nconst namedCurveToJOSE = namedCurve => {\n  switch (namedCurve) {\n    case 'prime256v1':\n      return 'P-256';\n    case 'secp384r1':\n      return 'P-384';\n    case 'secp521r1':\n      return 'P-521';\n    case 'secp256k1':\n      return 'secp256k1';\n    default:\n      throw new errors_js_1.JOSENotSupported('Unsupported key curve for this operation');\n  }\n};\nconst getNamedCurve = (kee, raw) => {\n  var _a;\n  let key;\n  if ((0, webcrypto_js_1.isCryptoKey)(kee)) {\n    key = crypto_1.KeyObject.from(kee);\n  } else if ((0, is_key_object_js_1.default)(kee)) {\n    key = kee;\n  } else {\n    throw new TypeError((0, invalid_key_input_js_1.default)(kee, ...is_key_like_js_1.types));\n  }\n  if (key.type === 'secret') {\n    throw new TypeError('only \"private\" or \"public\" type keys can be used for this operation');\n  }\n  switch (key.asymmetricKeyType) {\n    case 'ed25519':\n    case 'ed448':\n      return `Ed${key.asymmetricKeyType.slice(2)}`;\n    case 'x25519':\n    case 'x448':\n      return `X${key.asymmetricKeyType.slice(1)}`;\n    case 'ec':\n      {\n        if (exports.weakMap.has(key)) {\n          return exports.weakMap.get(key);\n        }\n        let namedCurve = (_a = key.asymmetricKeyDetails) === null || _a === void 0 ? void 0 : _a.namedCurve;\n        if (!namedCurve && key.type === 'private') {\n          namedCurve = getNamedCurve((0, crypto_1.createPublicKey)(key), true);\n        } else if (!namedCurve) {\n          const buf = key.export({\n            format: 'der',\n            type: 'spki'\n          });\n          const i = buf[1] < 128 ? 14 : 15;\n          const len = buf[i];\n          const curveOid = buf.slice(i + 1, i + 1 + len);\n          if (curveOid.equals(p256)) {\n            namedCurve = 'prime256v1';\n          } else if (curveOid.equals(p384)) {\n            namedCurve = 'secp384r1';\n          } else if (curveOid.equals(p521)) {\n            namedCurve = 'secp521r1';\n          } else if (curveOid.equals(secp256k1)) {\n            namedCurve = 'secp256k1';\n          } else {\n            throw new errors_js_1.JOSENotSupported('Unsupported key curve for this operation');\n          }\n        }\n        if (raw) return namedCurve;\n        const curve = namedCurveToJOSE(namedCurve);\n        exports.weakMap.set(key, curve);\n        return curve;\n      }\n    default:\n      throw new TypeError('Invalid asymmetric key type for this operation');\n  }\n};\nfunction setCurve(keyObject, curve) {\n  exports.weakMap.set(keyObject, curve);\n}\nexports.setCurve = setCurve;\nexports[\"default\"] = getNamedCurve;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nfunction getSignVerifyKey(alg, key, usage) {\n  if (key instanceof Uint8Array) {\n    if (!alg.startsWith('HS')) {\n      throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types));\n    }\n    return (0, crypto_1.createSecretKey)(key);\n  }\n  if (key instanceof crypto_1.KeyObject) {\n    return key;\n  }\n  if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n    (0, crypto_key_js_1.checkSigCryptoKey)(key, alg, usage);\n    return crypto_1.KeyObject.from(key);\n  }\n  throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, 'Uint8Array'));\n}\nexports[\"default\"] = getSignVerifyKey;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvZ2V0X3NpZ25fdmVyaWZ5X2tleS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxRQUFRLEdBQUdDLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNsQyxNQUFNQyxjQUFjLEdBQUdELG1CQUFPLENBQUMsK0dBQWdCLENBQUM7QUFDaEQsTUFBTUUsZUFBZSxHQUFHRixtQkFBTyxDQUFDLGtIQUFzQixDQUFDO0FBQ3ZELE1BQU1HLHNCQUFzQixHQUFHSCxtQkFBTyxDQUFDLGdJQUE2QixDQUFDO0FBQ3JFLE1BQU1JLGdCQUFnQixHQUFHSixtQkFBTyxDQUFDLG1IQUFrQixDQUFDO0FBQ3BELFNBQVNLLGdCQUFnQkEsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEtBQUssRUFBRTtFQUN2QyxJQUFJRCxHQUFHLFlBQVlFLFVBQVUsRUFBRTtJQUMzQixJQUFJLENBQUNILEdBQUcsQ0FBQ0ksVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO01BQ3ZCLE1BQU0sSUFBSUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFUixzQkFBc0IsQ0FBQ1MsT0FBTyxFQUFFTCxHQUFHLEVBQUUsR0FBR0gsZ0JBQWdCLENBQUNTLEtBQUssQ0FBQyxDQUFDO0lBQzVGO0lBQ0EsT0FBTyxDQUFDLENBQUMsRUFBRWQsUUFBUSxDQUFDZSxlQUFlLEVBQUVQLEdBQUcsQ0FBQztFQUM3QztFQUNBLElBQUlBLEdBQUcsWUFBWVIsUUFBUSxDQUFDZ0IsU0FBUyxFQUFFO0lBQ25DLE9BQU9SLEdBQUc7RUFDZDtFQUNBLElBQUksQ0FBQyxDQUFDLEVBQUVOLGNBQWMsQ0FBQ2UsV0FBVyxFQUFFVCxHQUFHLENBQUMsRUFBRTtJQUN0QyxDQUFDLENBQUMsRUFBRUwsZUFBZSxDQUFDZSxpQkFBaUIsRUFBRVYsR0FBRyxFQUFFRCxHQUFHLEVBQUVFLEtBQUssQ0FBQztJQUN2RCxPQUFPVCxRQUFRLENBQUNnQixTQUFTLENBQUNHLElBQUksQ0FBQ1gsR0FBRyxDQUFDO0VBQ3ZDO0VBQ0EsTUFBTSxJQUFJSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUVSLHNCQUFzQixDQUFDUyxPQUFPLEVBQUVMLEdBQUcsRUFBRSxHQUFHSCxnQkFBZ0IsQ0FBQ1MsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQzFHO0FBQ0FoQixrQkFBZSxHQUFHUSxnQkFBZ0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2dldF9zaWduX3ZlcmlmeV9rZXkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGNyeXB0b19rZXlfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvY3J5cHRvX2tleS5qc1wiKTtcbmNvbnN0IGludmFsaWRfa2V5X2lucHV0X2pzXzEgPSByZXF1aXJlKFwiLi4vbGliL2ludmFsaWRfa2V5X2lucHV0LmpzXCIpO1xuY29uc3QgaXNfa2V5X2xpa2VfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9saWtlLmpzXCIpO1xuZnVuY3Rpb24gZ2V0U2lnblZlcmlmeUtleShhbGcsIGtleSwgdXNhZ2UpIHtcbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICBpZiAoIWFsZy5zdGFydHNXaXRoKCdIUycpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCgwLCBpbnZhbGlkX2tleV9pbnB1dF9qc18xLmRlZmF1bHQpKGtleSwgLi4uaXNfa2V5X2xpa2VfanNfMS50eXBlcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoMCwgY3J5cHRvXzEuY3JlYXRlU2VjcmV0S2V5KShrZXkpO1xuICAgIH1cbiAgICBpZiAoa2V5IGluc3RhbmNlb2YgY3J5cHRvXzEuS2V5T2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIGlmICgoMCwgd2ViY3J5cHRvX2pzXzEuaXNDcnlwdG9LZXkpKGtleSkpIHtcbiAgICAgICAgKDAsIGNyeXB0b19rZXlfanNfMS5jaGVja1NpZ0NyeXB0b0tleSkoa2V5LCBhbGcsIHVzYWdlKTtcbiAgICAgICAgcmV0dXJuIGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKDAsIGludmFsaWRfa2V5X2lucHV0X2pzXzEuZGVmYXVsdCkoa2V5LCAuLi5pc19rZXlfbGlrZV9qc18xLnR5cGVzLCAnVWludDhBcnJheScpKTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGdldFNpZ25WZXJpZnlLZXk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJ3ZWJjcnlwdG9fanNfMSIsImNyeXB0b19rZXlfanNfMSIsImludmFsaWRfa2V5X2lucHV0X2pzXzEiLCJpc19rZXlfbGlrZV9qc18xIiwiZ2V0U2lnblZlcmlmeUtleSIsImFsZyIsImtleSIsInVzYWdlIiwiVWludDhBcnJheSIsInN0YXJ0c1dpdGgiLCJUeXBlRXJyb3IiLCJkZWZhdWx0IiwidHlwZXMiLCJjcmVhdGVTZWNyZXRLZXkiLCJLZXlPYmplY3QiLCJpc0NyeXB0b0tleSIsImNoZWNrU2lnQ3J5cHRvS2V5IiwiZnJvbSJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/hmac_digest.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/hmac_digest.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction hmacDigest(alg) {\n  switch (alg) {\n    case 'HS256':\n      return 'sha256';\n    case 'HS384':\n      return 'sha384';\n    case 'HS512':\n      return 'sha512';\n    default:\n      throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n  }\n}\nexports[\"default\"] = hmacDigest;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaG1hY19kaWdlc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsV0FBVyxHQUFHQyxtQkFBTyxDQUFDLDRHQUFtQixDQUFDO0FBQ2hELFNBQVNDLFVBQVVBLENBQUNDLEdBQUcsRUFBRTtFQUNyQixRQUFRQSxHQUFHO0lBQ1AsS0FBSyxPQUFPO01BQ1IsT0FBTyxRQUFRO0lBQ25CLEtBQUssT0FBTztNQUNSLE9BQU8sUUFBUTtJQUNuQixLQUFLLE9BQU87TUFDUixPQUFPLFFBQVE7SUFDbkI7TUFDSSxNQUFNLElBQUlILFdBQVcsQ0FBQ0ksZ0JBQWdCLENBQUUsT0FBTUQsR0FBSSw2REFBNEQsQ0FBQztFQUN2SDtBQUNKO0FBQ0FMLGtCQUFlLEdBQUdJLFVBQVUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL2htYWNfZGlnZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5mdW5jdGlvbiBobWFjRGlnZXN0KGFsZykge1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ0hTMjU2JzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMjU2JztcbiAgICAgICAgY2FzZSAnSFMzODQnOlxuICAgICAgICAgICAgcmV0dXJuICdzaGEzODQnO1xuICAgICAgICBjYXNlICdIUzUxMic6XG4gICAgICAgICAgICByZXR1cm4gJ3NoYTUxMic7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZChgYWxnICR7YWxnfSBpcyBub3Qgc3VwcG9ydGVkIGVpdGhlciBieSBKT1NFIG9yIHlvdXIgamF2YXNjcmlwdCBydW50aW1lYCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gaG1hY0RpZ2VzdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVycm9yc19qc18xIiwicmVxdWlyZSIsImhtYWNEaWdlc3QiLCJhbGciLCJKT1NFTm90U3VwcG9ydGVkIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/hmac_digest.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.types = void 0;\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nexports[\"default\"] = key => (0, is_key_object_js_1.default)(key) || (0, webcrypto_js_1.isCryptoKey)(key);\nconst types = ['KeyObject'];\nexports.types = types;\nif (globalThis.CryptoKey || (webcrypto_js_1.default === null || webcrypto_js_1.default === void 0 ? void 0 : webcrypto_js_1.default.CryptoKey)) {\n  types.push('CryptoKey');\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaXNfa2V5X2xpa2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDdEIsTUFBTUcsY0FBYyxHQUFHQyxtQkFBTyxDQUFDLCtHQUFnQixDQUFDO0FBQ2hELE1BQU1DLGtCQUFrQixHQUFHRCxtQkFBTyxDQUFDLHVIQUFvQixDQUFDO0FBQ3hESixrQkFBZSxHQUFJTyxHQUFHLElBQUssQ0FBQyxDQUFDLEVBQUVGLGtCQUFrQixDQUFDQyxPQUFPLEVBQUVDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFSixjQUFjLENBQUNLLFdBQVcsRUFBRUQsR0FBRyxDQUFDO0FBQ3ZHLE1BQU1MLEtBQUssR0FBRyxDQUFDLFdBQVcsQ0FBQztBQUMzQkYsYUFBYSxHQUFHRSxLQUFLO0FBQ3JCLElBQUlPLFVBQVUsQ0FBQ0MsU0FBUyxLQUFLUCxjQUFjLENBQUNHLE9BQU8sS0FBSyxJQUFJLElBQUlILGNBQWMsQ0FBQ0csT0FBTyxLQUFLLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHSCxjQUFjLENBQUNHLE9BQU8sQ0FBQ0ksU0FBUyxDQUFDLEVBQUU7RUFDNUlSLEtBQUssQ0FBQ1MsSUFBSSxDQUFDLFdBQVcsQ0FBQztBQUMzQiIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaXNfa2V5X2xpa2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnR5cGVzID0gdm9pZCAwO1xuY29uc3Qgd2ViY3J5cHRvX2pzXzEgPSByZXF1aXJlKFwiLi93ZWJjcnlwdG8uanNcIik7XG5jb25zdCBpc19rZXlfb2JqZWN0X2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfb2JqZWN0LmpzXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gKGtleSkgPT4gKDAsIGlzX2tleV9vYmplY3RfanNfMS5kZWZhdWx0KShrZXkpIHx8ICgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkoa2V5KTtcbmNvbnN0IHR5cGVzID0gWydLZXlPYmplY3QnXTtcbmV4cG9ydHMudHlwZXMgPSB0eXBlcztcbmlmIChnbG9iYWxUaGlzLkNyeXB0b0tleSB8fCAod2ViY3J5cHRvX2pzXzEuZGVmYXVsdCA9PT0gbnVsbCB8fCB3ZWJjcnlwdG9fanNfMS5kZWZhdWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3ZWJjcnlwdG9fanNfMS5kZWZhdWx0LkNyeXB0b0tleSkpIHtcbiAgICB0eXBlcy5wdXNoKCdDcnlwdG9LZXknKTtcbn1cbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInR5cGVzIiwid2ViY3J5cHRvX2pzXzEiLCJyZXF1aXJlIiwiaXNfa2V5X29iamVjdF9qc18xIiwiZGVmYXVsdCIsImtleSIsImlzQ3J5cHRvS2V5IiwiZ2xvYmFsVGhpcyIsIkNyeXB0b0tleSIsInB1c2giXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst util = __webpack_require__(/*! util */ \"util\");\nexports[\"default\"] = util.types.isKeyObject ? obj => util.types.isKeyObject(obj) : obj => obj != null && obj instanceof crypto_1.KeyObject;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvaXNfa2V5X29iamVjdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxRQUFRLEdBQUdDLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNsQyxNQUFNQyxJQUFJLEdBQUdELG1CQUFPLENBQUMsa0JBQU0sQ0FBQztBQUM1Qkgsa0JBQWUsR0FBR0ksSUFBSSxDQUFDRSxLQUFLLENBQUNDLFdBQVcsR0FDakNDLEdBQUcsSUFBS0osSUFBSSxDQUFDRSxLQUFLLENBQUNDLFdBQVcsQ0FBQ0MsR0FBRyxDQUFDLEdBQ25DQSxHQUFHLElBQUtBLEdBQUcsSUFBSSxJQUFJLElBQUlBLEdBQUcsWUFBWU4sUUFBUSxDQUFDTyxTQUFTIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9pc19rZXlfb2JqZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoXCJ1dGlsXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0gdXRpbC50eXBlcy5pc0tleU9iamVjdFxuICAgID8gKG9iaikgPT4gdXRpbC50eXBlcy5pc0tleU9iamVjdChvYmopXG4gICAgOiAob2JqKSA9PiBvYmogIT0gbnVsbCAmJiBvYmogaW5zdGFuY2VvZiBjcnlwdG9fMS5LZXlPYmplY3Q7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcnlwdG9fMSIsInJlcXVpcmUiLCJ1dGlsIiwiZGVmYXVsdCIsInR5cGVzIiwiaXNLZXlPYmplY3QiLCJvYmoiLCJLZXlPYmplY3QiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/jwk_to_key.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/jwk_to_key.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst get_named_curve_js_1 = __webpack_require__(/*! ./get_named_curve.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\");\nconst check_modulus_length_js_1 = __webpack_require__(/*! ./check_modulus_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\");\nconst asn1_sequence_encoder_js_1 = __webpack_require__(/*! ./asn1_sequence_encoder.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_encoder.js\");\nconst flags_js_1 = __webpack_require__(/*! ./flags.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\");\nconst parse = jwk => {\n  if (flags_js_1.jwkImport && jwk.kty !== 'oct') {\n    return jwk.d ? (0, crypto_1.createPrivateKey)({\n      format: 'jwk',\n      key: jwk\n    }) : (0, crypto_1.createPublicKey)({\n      format: 'jwk',\n      key: jwk\n    });\n  }\n  switch (jwk.kty) {\n    case 'oct':\n      {\n        return (0, crypto_1.createSecretKey)((0, base64url_js_1.decode)(jwk.k));\n      }\n    case 'RSA':\n      {\n        const enc = new asn1_sequence_encoder_js_1.default();\n        const isPrivate = jwk.d !== undefined;\n        const modulus = buffer_1.Buffer.from(jwk.n, 'base64');\n        const exponent = buffer_1.Buffer.from(jwk.e, 'base64');\n        if (isPrivate) {\n          enc.zero();\n          enc.unsignedInteger(modulus);\n          enc.unsignedInteger(exponent);\n          enc.unsignedInteger(buffer_1.Buffer.from(jwk.d, 'base64'));\n          enc.unsignedInteger(buffer_1.Buffer.from(jwk.p, 'base64'));\n          enc.unsignedInteger(buffer_1.Buffer.from(jwk.q, 'base64'));\n          enc.unsignedInteger(buffer_1.Buffer.from(jwk.dp, 'base64'));\n          enc.unsignedInteger(buffer_1.Buffer.from(jwk.dq, 'base64'));\n          enc.unsignedInteger(buffer_1.Buffer.from(jwk.qi, 'base64'));\n        } else {\n          enc.unsignedInteger(modulus);\n          enc.unsignedInteger(exponent);\n        }\n        const der = enc.end();\n        const createInput = {\n          key: der,\n          format: 'der',\n          type: 'pkcs1'\n        };\n        const keyObject = isPrivate ? (0, crypto_1.createPrivateKey)(createInput) : (0, crypto_1.createPublicKey)(createInput);\n        (0, check_modulus_length_js_1.setModulusLength)(keyObject, modulus.length << 3);\n        return keyObject;\n      }\n    case 'EC':\n      {\n        const enc = new asn1_sequence_encoder_js_1.default();\n        const isPrivate = jwk.d !== undefined;\n        const pub = buffer_1.Buffer.concat([buffer_1.Buffer.alloc(1, 4), buffer_1.Buffer.from(jwk.x, 'base64'), buffer_1.Buffer.from(jwk.y, 'base64')]);\n        if (isPrivate) {\n          enc.zero();\n          const enc$1 = new asn1_sequence_encoder_js_1.default();\n          enc$1.oidFor('ecPublicKey');\n          enc$1.oidFor(jwk.crv);\n          enc.add(enc$1.end());\n          const enc$2 = new asn1_sequence_encoder_js_1.default();\n          enc$2.one();\n          enc$2.octStr(buffer_1.Buffer.from(jwk.d, 'base64'));\n          const enc$3 = new asn1_sequence_encoder_js_1.default();\n          enc$3.bitStr(pub);\n          const f2 = enc$3.end(buffer_1.Buffer.from([0xa1]));\n          enc$2.add(f2);\n          const f = enc$2.end();\n          const enc$4 = new asn1_sequence_encoder_js_1.default();\n          enc$4.add(f);\n          const f3 = enc$4.end(buffer_1.Buffer.from([0x04]));\n          enc.add(f3);\n          const der = enc.end();\n          const keyObject = (0, crypto_1.createPrivateKey)({\n            key: der,\n            format: 'der',\n            type: 'pkcs8'\n          });\n          (0, get_named_curve_js_1.setCurve)(keyObject, jwk.crv);\n          return keyObject;\n        }\n        const enc$1 = new asn1_sequence_encoder_js_1.default();\n        enc$1.oidFor('ecPublicKey');\n        enc$1.oidFor(jwk.crv);\n        enc.add(enc$1.end());\n        enc.bitStr(pub);\n        const der = enc.end();\n        const keyObject = (0, crypto_1.createPublicKey)({\n          key: der,\n          format: 'der',\n          type: 'spki'\n        });\n        (0, get_named_curve_js_1.setCurve)(keyObject, jwk.crv);\n        return keyObject;\n      }\n    case 'OKP':\n      {\n        const enc = new asn1_sequence_encoder_js_1.default();\n        const isPrivate = jwk.d !== undefined;\n        if (isPrivate) {\n          enc.zero();\n          const enc$1 = new asn1_sequence_encoder_js_1.default();\n          enc$1.oidFor(jwk.crv);\n          enc.add(enc$1.end());\n          const enc$2 = new asn1_sequence_encoder_js_1.default();\n          enc$2.octStr(buffer_1.Buffer.from(jwk.d, 'base64'));\n          const f = enc$2.end(buffer_1.Buffer.from([0x04]));\n          enc.add(f);\n          const der = enc.end();\n          return (0, crypto_1.createPrivateKey)({\n            key: der,\n            format: 'der',\n            type: 'pkcs8'\n          });\n        }\n        const enc$1 = new asn1_sequence_encoder_js_1.default();\n        enc$1.oidFor(jwk.crv);\n        enc.add(enc$1.end());\n        enc.bitStr(buffer_1.Buffer.from(jwk.x, 'base64'));\n        const der = enc.end();\n        return (0, crypto_1.createPublicKey)({\n          key: der,\n          format: 'der',\n          type: 'spki'\n        });\n      }\n    default:\n      throw new errors_js_1.JOSENotSupported('Invalid or unsupported JWK \"kty\" (Key Type) Parameter value');\n  }\n};\nexports[\"default\"] = parse;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/jwk_to_key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/key_to_jwk.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/key_to_jwk.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst asn1_sequence_decoder_js_1 = __webpack_require__(/*! ./asn1_sequence_decoder.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/asn1_sequence_decoder.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst get_named_curve_js_1 = __webpack_require__(/*! ./get_named_curve.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst flags_js_1 = __webpack_require__(/*! ./flags.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\");\nconst keyToJWK = key => {\n  let keyObject;\n  if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n    if (!key.extractable) {\n      throw new TypeError('CryptoKey is not extractable');\n    }\n    keyObject = crypto_1.KeyObject.from(key);\n  } else if ((0, is_key_object_js_1.default)(key)) {\n    keyObject = key;\n  } else if (key instanceof Uint8Array) {\n    return {\n      kty: 'oct',\n      k: (0, base64url_js_1.encode)(key)\n    };\n  } else {\n    throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, 'Uint8Array'));\n  }\n  if (flags_js_1.jwkExport) {\n    if (keyObject.type !== 'secret' && !['rsa', 'ec', 'ed25519', 'x25519', 'ed448', 'x448'].includes(keyObject.asymmetricKeyType)) {\n      throw new errors_js_1.JOSENotSupported('Unsupported key asymmetricKeyType');\n    }\n    return keyObject.export({\n      format: 'jwk'\n    });\n  }\n  switch (keyObject.type) {\n    case 'secret':\n      return {\n        kty: 'oct',\n        k: (0, base64url_js_1.encode)(keyObject.export())\n      };\n    case 'private':\n    case 'public':\n      {\n        switch (keyObject.asymmetricKeyType) {\n          case 'rsa':\n            {\n              const der = keyObject.export({\n                format: 'der',\n                type: 'pkcs1'\n              });\n              const dec = new asn1_sequence_decoder_js_1.default(der);\n              if (keyObject.type === 'private') {\n                dec.unsignedInteger();\n              }\n              const n = (0, base64url_js_1.encode)(dec.unsignedInteger());\n              const e = (0, base64url_js_1.encode)(dec.unsignedInteger());\n              let jwk;\n              if (keyObject.type === 'private') {\n                jwk = {\n                  d: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                  p: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                  q: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                  dp: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                  dq: (0, base64url_js_1.encode)(dec.unsignedInteger()),\n                  qi: (0, base64url_js_1.encode)(dec.unsignedInteger())\n                };\n              }\n              dec.end();\n              return _objectSpread({\n                kty: 'RSA',\n                n,\n                e\n              }, jwk);\n            }\n          case 'ec':\n            {\n              const crv = (0, get_named_curve_js_1.default)(keyObject);\n              let len;\n              let offset;\n              let correction;\n              switch (crv) {\n                case 'secp256k1':\n                  len = 64;\n                  offset = 31 + 2;\n                  correction = -1;\n                  break;\n                case 'P-256':\n                  len = 64;\n                  offset = 34 + 2;\n                  correction = -1;\n                  break;\n                case 'P-384':\n                  len = 96;\n                  offset = 33 + 2;\n                  correction = -3;\n                  break;\n                case 'P-521':\n                  len = 132;\n                  offset = 33 + 2;\n                  correction = -3;\n                  break;\n                default:\n                  throw new errors_js_1.JOSENotSupported('Unsupported curve');\n              }\n              if (keyObject.type === 'public') {\n                const der = keyObject.export({\n                  type: 'spki',\n                  format: 'der'\n                });\n                return {\n                  kty: 'EC',\n                  crv,\n                  x: (0, base64url_js_1.encode)(der.subarray(-len, -len / 2)),\n                  y: (0, base64url_js_1.encode)(der.subarray(-len / 2))\n                };\n              }\n              const der = keyObject.export({\n                type: 'pkcs8',\n                format: 'der'\n              });\n              if (der.length < 100) {\n                offset += correction;\n              }\n              return _objectSpread(_objectSpread({}, keyToJWK((0, crypto_1.createPublicKey)(keyObject))), {}, {\n                d: (0, base64url_js_1.encode)(der.subarray(offset, offset + len / 2))\n              });\n            }\n          case 'ed25519':\n          case 'x25519':\n            {\n              const crv = (0, get_named_curve_js_1.default)(keyObject);\n              if (keyObject.type === 'public') {\n                const der = keyObject.export({\n                  type: 'spki',\n                  format: 'der'\n                });\n                return {\n                  kty: 'OKP',\n                  crv,\n                  x: (0, base64url_js_1.encode)(der.subarray(-32))\n                };\n              }\n              const der = keyObject.export({\n                type: 'pkcs8',\n                format: 'der'\n              });\n              return _objectSpread(_objectSpread({}, keyToJWK((0, crypto_1.createPublicKey)(keyObject))), {}, {\n                d: (0, base64url_js_1.encode)(der.subarray(-32))\n              });\n            }\n          case 'ed448':\n          case 'x448':\n            {\n              const crv = (0, get_named_curve_js_1.default)(keyObject);\n              if (keyObject.type === 'public') {\n                const der = keyObject.export({\n                  type: 'spki',\n                  format: 'der'\n                });\n                return {\n                  kty: 'OKP',\n                  crv,\n                  x: (0, base64url_js_1.encode)(der.subarray(crv === 'Ed448' ? -57 : -56))\n                };\n              }\n              const der = keyObject.export({\n                type: 'pkcs8',\n                format: 'der'\n              });\n              return _objectSpread(_objectSpread({}, keyToJWK((0, crypto_1.createPublicKey)(keyObject))), {}, {\n                d: (0, base64url_js_1.encode)(der.subarray(crv === 'Ed448' ? -57 : -56))\n              });\n            }\n          default:\n            throw new errors_js_1.JOSENotSupported('Unsupported key asymmetricKeyType');\n        }\n      }\n    default:\n      throw new errors_js_1.JOSENotSupported('Unsupported key type');\n  }\n};\nexports[\"default\"] = keyToJWK;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUva2V5X3RvX2p3ay5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFBQSxTQUFBQSxRQUFBQyxDQUFBLEVBQUFDLENBQUEsUUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQSxPQUFBRyxNQUFBLENBQUFFLHFCQUFBLFFBQUFDLENBQUEsR0FBQUgsTUFBQSxDQUFBRSxxQkFBQSxDQUFBTCxDQUFBLEdBQUFDLENBQUEsS0FBQUssQ0FBQSxHQUFBQSxDQUFBLENBQUFDLE1BQUEsV0FBQU4sQ0FBQSxXQUFBRSxNQUFBLENBQUFLLHdCQUFBLENBQUFSLENBQUEsRUFBQUMsQ0FBQSxFQUFBUSxVQUFBLE9BQUFQLENBQUEsQ0FBQVEsSUFBQSxDQUFBQyxLQUFBLENBQUFULENBQUEsRUFBQUksQ0FBQSxZQUFBSixDQUFBO0FBQUEsU0FBQVUsY0FBQVosQ0FBQSxhQUFBQyxDQUFBLE1BQUFBLENBQUEsR0FBQVksU0FBQSxDQUFBQyxNQUFBLEVBQUFiLENBQUEsVUFBQUMsQ0FBQSxXQUFBVyxTQUFBLENBQUFaLENBQUEsSUFBQVksU0FBQSxDQUFBWixDQUFBLFFBQUFBLENBQUEsT0FBQUYsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsT0FBQWEsT0FBQSxXQUFBZCxDQUFBLElBQUFlLGVBQUEsQ0FBQWhCLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLENBQUFELENBQUEsU0FBQUUsTUFBQSxDQUFBYyx5QkFBQSxHQUFBZCxNQUFBLENBQUFlLGdCQUFBLENBQUFsQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWMseUJBQUEsQ0FBQWYsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBYSxPQUFBLFdBQUFkLENBQUEsSUFBQUUsTUFBQSxDQUFBZ0IsY0FBQSxDQUFBbkIsQ0FBQSxFQUFBQyxDQUFBLEVB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QUUsT0FBTztnQkFBRUssTUFBTSxFQUFFO2NBQU0sQ0FBQyxDQUFDO2NBQzlELE9BQUF6RCxhQUFBLENBQUFBLGFBQUEsS0FDT3VDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRVgsUUFBUSxDQUFDaUQsZUFBZSxFQUFFckMsU0FBUyxDQUFDLENBQUM7Z0JBQ3JEdUIsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFakMsY0FBYyxDQUFDbUIsTUFBTSxFQUFFUyxHQUFHLENBQUNpQixRQUFRLENBQUNMLEdBQUcsS0FBSyxPQUFPLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUM7Y0FBQztZQUVoRjtVQUNBO1lBQ0ksTUFBTSxJQUFJdEMsV0FBVyxDQUFDdUIsZ0JBQWdCLENBQUMsbUNBQW1DLENBQUM7UUFDbkY7TUFDSjtJQUNBO01BQ0ksTUFBTSxJQUFJdkIsV0FBVyxDQUFDdUIsZ0JBQWdCLENBQUMsc0JBQXNCLENBQUM7RUFDdEU7QUFDSixDQUFDO0FBQ0Q1QixrQkFBZSxHQUFHWSxRQUFRIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9rZXlfdG9fandrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgYmFzZTY0dXJsX2pzXzEgPSByZXF1aXJlKFwiLi9iYXNlNjR1cmwuanNcIik7XG5jb25zdCBhc24xX3NlcXVlbmNlX2RlY29kZXJfanNfMSA9IHJlcXVpcmUoXCIuL2FzbjFfc2VxdWVuY2VfZGVjb2Rlci5qc1wiKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgZ2V0X25hbWVkX2N1cnZlX2pzXzEgPSByZXF1aXJlKFwiLi9nZXRfbmFtZWRfY3VydmUuanNcIik7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGlzX2tleV9vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9vYmplY3QuanNcIik7XG5jb25zdCBpbnZhbGlkX2tleV9pbnB1dF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qc1wiKTtcbmNvbnN0IGlzX2tleV9saWtlX2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfbGlrZS5qc1wiKTtcbmNvbnN0IGZsYWdzX2pzXzEgPSByZXF1aXJlKFwiLi9mbGFncy5qc1wiKTtcbmNvbnN0IGtleVRvSldLID0gKGtleSkgPT4ge1xuICAgIGxldCBrZXlPYmplY3Q7XG4gICAgaWYgKCgwLCB3ZWJjcnlwdG9fanNfMS5pc0NyeXB0b0tleSkoa2V5KSkge1xuICAgICAgICBpZiAoIWtleS5leHRyYWN0YWJsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ3J5cHRvS2V5IGlzIG5vdCBleHRyYWN0YWJsZScpO1xuICAgICAgICB9XG4gICAgICAgIGtleU9iamVjdCA9IGNyeXB0b18xLktleU9iamVjdC5mcm9tKGtleSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkoa2V5KSkge1xuICAgICAgICBrZXlPYmplY3QgPSBrZXk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGt0eTogJ29jdCcsXG4gICAgICAgICAgICBrOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShrZXkpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS5kZWZhdWx0KShrZXksIC4uLmlzX2tleV9saWtlX2pzXzEudHlwZXMsICdVaW50OEFycmF5JykpO1xuICAgIH1cbiAgICBpZiAoZmxhZ3NfanNfMS5qd2tFeHBvcnQpIHtcbiAgICAgICAgaWYgKGtleU9iamVjdC50eXBlICE9PSAnc2VjcmV0JyAmJlxuICAgICAgICAgICAgIVsncnNhJywgJ2VjJywgJ2VkMjU1MTknLCAneDI1NTE5JywgJ2VkNDQ4JywgJ3g0NDgnXS5pbmNsdWRlcyhrZXlPYmplY3QuYXN5bW1ldHJpY0tleVR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSk9TRU5vdFN1cHBvcnRlZCgnVW5zdXBwb3J0ZWQga2V5IGFzeW1tZXRyaWNLZXlUeXBlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtleU9iamVjdC5leHBvcnQoeyBmb3JtYXQ6ICdqd2snIH0pO1xuICAgIH1cbiAgICBzd2l0Y2ggKGtleU9iamVjdC50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3NlY3JldCc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGt0eTogJ29jdCcsXG4gICAgICAgICAgICAgICAgazogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoa2V5T2JqZWN0LmV4cG9ydCgpKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgJ3ByaXZhdGUnOlxuICAgICAgICBjYXNlICdwdWJsaWMnOiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGtleU9iamVjdC5hc3ltbWV0cmljS2V5VHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JzYSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyID0ga2V5T2JqZWN0LmV4cG9ydCh7IGZvcm1hdDogJ2RlcicsIHR5cGU6ICdwa2NzMScgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlYyA9IG5ldyBhc24xX3NlcXVlbmNlX2RlY29kZXJfanNfMS5kZWZhdWx0KGRlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlPYmplY3QudHlwZSA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWMudW5zaWduZWRJbnRlZ2VyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGRlYy51bnNpZ25lZEludGVnZXIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgandrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5T2JqZWN0LnR5cGUgPT09ICdwcml2YXRlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgandrID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGRlYy51bnNpZ25lZEludGVnZXIoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcDogKDAsIGJhc2U2NHVybF9qc18xLmVuY29kZSkoZGVjLnVuc2lnbmVkSW50ZWdlcigpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRwOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRxOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFpOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZWMudW5zaWduZWRJbnRlZ2VyKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkZWMuZW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGt0eTogJ1JTQScsIG4sIGUsIC4uLmp3ayB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdlYyc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3J2ID0gKDAsIGdldF9uYW1lZF9jdXJ2ZV9qc18xLmRlZmF1bHQpKGtleU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsZW47XG4gICAgICAgICAgICAgICAgICAgIGxldCBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb3JyZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNydikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc2VjcDI1NmsxJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSA2NDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAzMSArIDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ycmVjdGlvbiA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnUC0yNTYnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbiA9IDY0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IDM0ICsgMjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0aW9uID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQLTM4NCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuID0gOTY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMzMgKyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAtMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1AtNTIxJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW4gPSAxMzI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gMzMgKyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAtMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIGN1cnZlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleU9iamVjdC50eXBlID09PSAncHVibGljJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyID0ga2V5T2JqZWN0LmV4cG9ydCh7IHR5cGU6ICdzcGtpJywgZm9ybWF0OiAnZGVyJyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga3R5OiAnRUMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNydixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoLWxlbiwgLWxlbiAvIDIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoLWxlbiAvIDIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyID0ga2V5T2JqZWN0LmV4cG9ydCh7IHR5cGU6ICdwa2NzOCcsIGZvcm1hdDogJ2RlcicgfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXIubGVuZ3RoIDwgMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gY29ycmVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ua2V5VG9KV0soKDAsIGNyeXB0b18xLmNyZWF0ZVB1YmxpY0tleSkoa2V5T2JqZWN0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyBsZW4gLyAyKSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2VkMjU1MTknOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3gyNTUxOSc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY3J2ID0gKDAsIGdldF9uYW1lZF9jdXJ2ZV9qc18xLmRlZmF1bHQpKGtleU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlPYmplY3QudHlwZSA9PT0gJ3B1YmxpYycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlciA9IGtleU9iamVjdC5leHBvcnQoeyB0eXBlOiAnc3BraScsIGZvcm1hdDogJ2RlcicgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGt0eTogJ09LUCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3J2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGRlci5zdWJhcnJheSgtMzIpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVyID0ga2V5T2JqZWN0LmV4cG9ydCh7IHR5cGU6ICdwa2NzOCcsIGZvcm1hdDogJ2RlcicgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5rZXlUb0pXSygoMCwgY3J5cHRvXzEuY3JlYXRlUHVibGljS2V5KShrZXlPYmplY3QpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQ6ICgwLCBiYXNlNjR1cmxfanNfMS5lbmNvZGUpKGRlci5zdWJhcnJheSgtMzIpKSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZWQ0NDgnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3g0NDgnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNydiA9ICgwLCBnZXRfbmFtZWRfY3VydmVfanNfMS5kZWZhdWx0KShrZXlPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5T2JqZWN0LnR5cGUgPT09ICdwdWJsaWMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXIgPSBrZXlPYmplY3QuZXhwb3J0KHsgdHlwZTogJ3Nwa2knLCBmb3JtYXQ6ICdkZXInIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrdHk6ICdPS1AnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNydixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoY3J2ID09PSAnRWQ0NDgnID8gLTU3IDogLTU2KSksXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlciA9IGtleU9iamVjdC5leHBvcnQoeyB0eXBlOiAncGtjczgnLCBmb3JtYXQ6ICdkZXInIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ua2V5VG9KV0soKDAsIGNyeXB0b18xLmNyZWF0ZVB1YmxpY0tleSkoa2V5T2JqZWN0KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBkOiAoMCwgYmFzZTY0dXJsX2pzXzEuZW5jb2RlKShkZXIuc3ViYXJyYXkoY3J2ID09PSAnRWQ0NDgnID8gLTU3IDogLTU2KSksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KT1NFTm90U3VwcG9ydGVkKCdVbnN1cHBvcnRlZCBrZXkgYXN5bW1ldHJpY0tleVR5cGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpPU0VOb3RTdXBwb3J0ZWQoJ1Vuc3VwcG9ydGVkIGtleSB0eXBlJyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGtleVRvSldLO1xuIl0sIm5hbWVzIjpbIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIl90b1Byb3BlcnR5S2V5IiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJhcmciLCJfdG9QcmltaXRpdmUiLCJTdHJpbmciLCJpbnB1dCIsImhpbnQiLCJwcmltIiwiU3ltYm9sIiwidG9QcmltaXRpdmUiLCJ1bmRlZmluZWQiLCJyZXMiLCJjYWxsIiwiVHlwZUVycm9yIiwiTnVtYmVyIiwiZXhwb3J0cyIsImNyeXB0b18xIiwicmVxdWlyZSIsImJhc2U2NHVybF9qc18xIiwiYXNuMV9zZXF1ZW5jZV9kZWNvZGVyX2pzXzEiLCJlcnJvcnNfanNfMSIsImdldF9uYW1lZF9jdXJ2ZV9qc18xIiwid2ViY3J5cHRvX2pzXzEiLCJpc19rZXlfb2JqZWN0X2pzXzEiLCJpbnZhbGlkX2tleV9pbnB1dF9qc18xIiwiaXNfa2V5X2xpa2VfanNfMSIsImZsYWdzX2pzXzEiLCJrZXlUb0pXSyIsImtleU9iamVjdCIsImlzQ3J5cHRvS2V5IiwiZXh0cmFjdGFibGUiLCJLZXlPYmplY3QiLCJmcm9tIiwiZGVmYXVsdCIsIlVpbnQ4QXJyYXkiLCJrdHkiLCJrIiwiZW5jb2RlIiwidHlwZXMiLCJqd2tFeHBvcnQiLCJ0eXBlIiwiaW5jbHVkZXMiLCJhc3ltbWV0cmljS2V5VHlwZSIsIkpPU0VOb3RTdXBwb3J0ZWQiLCJleHBvcnQiLCJmb3JtYXQiLCJkZXIiLCJkZWMiLCJ1bnNpZ25lZEludGVnZXIiLCJuIiwiandrIiwiZCIsInAiLCJxIiwiZHAiLCJkcSIsInFpIiwiZW5kIiwiY3J2IiwibGVuIiwib2Zmc2V0IiwiY29ycmVjdGlvbiIsIngiLCJzdWJhcnJheSIsInkiLCJjcmVhdGVQdWJsaWNLZXkiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/key_to_jwk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst get_named_curve_js_1 = __webpack_require__(/*! ./get_named_curve.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_named_curve.js\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst check_modulus_length_js_1 = __webpack_require__(/*! ./check_modulus_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\");\nconst flags_js_1 = __webpack_require__(/*! ./flags.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\");\nconst PSS = {\n  padding: crypto_1.constants.RSA_PKCS1_PSS_PADDING,\n  saltLength: crypto_1.constants.RSA_PSS_SALTLEN_DIGEST\n};\nconst ecCurveAlgMap = new Map([['ES256', 'P-256'], ['ES256K', 'secp256k1'], ['ES384', 'P-384'], ['ES512', 'P-521']]);\nfunction keyForCrypto(alg, key) {\n  switch (alg) {\n    case 'EdDSA':\n      if (!['ed25519', 'ed448'].includes(key.asymmetricKeyType)) {\n        throw new TypeError('Invalid key for this operation, its asymmetricKeyType must be ed25519 or ed448');\n      }\n      return key;\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n      if (key.asymmetricKeyType !== 'rsa') {\n        throw new TypeError('Invalid key for this operation, its asymmetricKeyType must be rsa');\n      }\n      (0, check_modulus_length_js_1.default)(key, alg);\n      return key;\n    case flags_js_1.rsaPssParams && 'PS256':\n    case flags_js_1.rsaPssParams && 'PS384':\n    case flags_js_1.rsaPssParams && 'PS512':\n      if (key.asymmetricKeyType === 'rsa-pss') {\n        const {\n          hashAlgorithm,\n          mgf1HashAlgorithm,\n          saltLength\n        } = key.asymmetricKeyDetails;\n        const length = parseInt(alg.slice(-3), 10);\n        if (hashAlgorithm !== undefined && (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm)) {\n          throw new TypeError(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \"alg\" ${alg}`);\n        }\n        if (saltLength !== undefined && saltLength > length >> 3) {\n          throw new TypeError(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \"alg\" ${alg}`);\n        }\n      } else if (key.asymmetricKeyType !== 'rsa') {\n        throw new TypeError('Invalid key for this operation, its asymmetricKeyType must be rsa or rsa-pss');\n      }\n      (0, check_modulus_length_js_1.default)(key, alg);\n      return _objectSpread({\n        key\n      }, PSS);\n    case !flags_js_1.rsaPssParams && 'PS256':\n    case !flags_js_1.rsaPssParams && 'PS384':\n    case !flags_js_1.rsaPssParams && 'PS512':\n      if (key.asymmetricKeyType !== 'rsa') {\n        throw new TypeError('Invalid key for this operation, its asymmetricKeyType must be rsa');\n      }\n      (0, check_modulus_length_js_1.default)(key, alg);\n      return _objectSpread({\n        key\n      }, PSS);\n    case 'ES256':\n    case 'ES256K':\n    case 'ES384':\n    case 'ES512':\n      {\n        if (key.asymmetricKeyType !== 'ec') {\n          throw new TypeError('Invalid key for this operation, its asymmetricKeyType must be ec');\n        }\n        const actual = (0, get_named_curve_js_1.default)(key);\n        const expected = ecCurveAlgMap.get(alg);\n        if (actual !== expected) {\n          throw new TypeError(`Invalid key curve for the algorithm, its curve must be ${expected}, got ${actual}`);\n        }\n        return {\n          dsaEncoding: 'ieee-p1363',\n          key\n        };\n      }\n    default:\n      throw new errors_js_1.JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);\n  }\n}\nexports[\"default\"] = keyForCrypto;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.decrypt = exports.encrypt = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst random_js_1 = __webpack_require__(/*! ./random.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nconst aeskw_js_1 = __webpack_require__(/*! ./aeskw.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/aeskw.js\");\nconst check_p2s_js_1 = __webpack_require__(/*! ../lib/check_p2s.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/check_p2s.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst pbkdf2 = (0, util_1.promisify)(crypto_1.pbkdf2);\nfunction getPassword(key, alg) {\n  if ((0, is_key_object_js_1.default)(key)) {\n    return key.export();\n  }\n  if (key instanceof Uint8Array) {\n    return key;\n  }\n  if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n    (0, crypto_key_js_1.checkEncCryptoKey)(key, alg, 'deriveBits', 'deriveKey');\n    return crypto_1.KeyObject.from(key).export();\n  }\n  throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types, 'Uint8Array'));\n}\nconst encrypt = async (alg, key, cek, p2c = 2048, p2s = (0, random_js_1.default)(new Uint8Array(16))) => {\n  (0, check_p2s_js_1.default)(p2s);\n  const salt = (0, buffer_utils_js_1.p2s)(alg, p2s);\n  const keylen = parseInt(alg.slice(13, 16), 10) >> 3;\n  const password = getPassword(key, alg);\n  const derivedKey = await pbkdf2(password, salt, p2c, keylen, `sha${alg.slice(8, 11)}`);\n  const encryptedKey = await (0, aeskw_js_1.wrap)(alg.slice(-6), derivedKey, cek);\n  return {\n    encryptedKey,\n    p2c,\n    p2s: (0, base64url_js_1.encode)(p2s)\n  };\n};\nexports.encrypt = encrypt;\nconst decrypt = async (alg, key, encryptedKey, p2c, p2s) => {\n  (0, check_p2s_js_1.default)(p2s);\n  const salt = (0, buffer_utils_js_1.p2s)(alg, p2s);\n  const keylen = parseInt(alg.slice(13, 16), 10) >> 3;\n  const password = getPassword(key, alg);\n  const derivedKey = await pbkdf2(password, salt, p2c, keylen, `sha${alg.slice(8, 11)}`);\n  return (0, aeskw_js_1.unwrap)(alg.slice(-6), derivedKey, encryptedKey);\n};\nexports.decrypt = decrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/pbes2kw.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nvar crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nObject.defineProperty(exports, \"default\", ({\n  enumerable: true,\n  get: function () {\n    return crypto_1.randomFillSync;\n  }\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcmFuZG9tLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxrQkFBZSxHQUFHLEtBQUssQ0FBQztBQUN4QixJQUFJRyxRQUFRLEdBQUdDLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNoQ04sMkNBQTBDO0VBQUVPLFVBQVUsRUFBRSxJQUFJO0VBQUVDLEdBQUcsRUFBRSxTQUFBQSxDQUFBLEVBQVk7SUFBRSxPQUFPSCxRQUFRLENBQUNJLGNBQWM7RUFBRTtBQUFFLENBQUMsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcmFuZG9tLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGNyeXB0b18xID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyeXB0b18xLnJhbmRvbUZpbGxTeW5jOyB9IH0pO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsImNyeXB0b18xIiwicmVxdWlyZSIsImVudW1lcmFibGUiLCJnZXQiLCJyYW5kb21GaWxsU3luYyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/random.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.decrypt = exports.encrypt = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst check_modulus_length_js_1 = __webpack_require__(/*! ./check_modulus_length.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/check_modulus_length.js\");\nconst webcrypto_js_1 = __webpack_require__(/*! ./webcrypto.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\");\nconst crypto_key_js_1 = __webpack_require__(/*! ../lib/crypto_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/crypto_key.js\");\nconst is_key_object_js_1 = __webpack_require__(/*! ./is_key_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_object.js\");\nconst invalid_key_input_js_1 = __webpack_require__(/*! ../lib/invalid_key_input.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/invalid_key_input.js\");\nconst is_key_like_js_1 = __webpack_require__(/*! ./is_key_like.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/is_key_like.js\");\nconst checkKey = (key, alg) => {\n  if (key.asymmetricKeyType !== 'rsa') {\n    throw new TypeError('Invalid key for this operation, its asymmetricKeyType must be rsa');\n  }\n  (0, check_modulus_length_js_1.default)(key, alg);\n};\nconst resolvePadding = alg => {\n  switch (alg) {\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      return crypto_1.constants.RSA_PKCS1_OAEP_PADDING;\n    case 'RSA1_5':\n      return crypto_1.constants.RSA_PKCS1_PADDING;\n    default:\n      return undefined;\n  }\n};\nconst resolveOaepHash = alg => {\n  switch (alg) {\n    case 'RSA-OAEP':\n      return 'sha1';\n    case 'RSA-OAEP-256':\n      return 'sha256';\n    case 'RSA-OAEP-384':\n      return 'sha384';\n    case 'RSA-OAEP-512':\n      return 'sha512';\n    default:\n      return undefined;\n  }\n};\nfunction ensureKeyObject(key, alg, ...usages) {\n  if ((0, is_key_object_js_1.default)(key)) {\n    return key;\n  }\n  if ((0, webcrypto_js_1.isCryptoKey)(key)) {\n    (0, crypto_key_js_1.checkEncCryptoKey)(key, alg, ...usages);\n    return crypto_1.KeyObject.from(key);\n  }\n  throw new TypeError((0, invalid_key_input_js_1.default)(key, ...is_key_like_js_1.types));\n}\nconst encrypt = (alg, key, cek) => {\n  const padding = resolvePadding(alg);\n  const oaepHash = resolveOaepHash(alg);\n  const keyObject = ensureKeyObject(key, alg, 'wrapKey', 'encrypt');\n  checkKey(keyObject, alg);\n  return (0, crypto_1.publicEncrypt)({\n    key: keyObject,\n    oaepHash,\n    padding\n  }, cek);\n};\nexports.encrypt = encrypt;\nconst decrypt = (alg, key, encryptedKey) => {\n  const padding = resolvePadding(alg);\n  const oaepHash = resolveOaepHash(alg);\n  const keyObject = ensureKeyObject(key, alg, 'unwrapKey', 'decrypt');\n  checkKey(keyObject, alg);\n  return (0, crypto_1.privateDecrypt)({\n    key: keyObject,\n    oaepHash,\n    padding\n  }, encryptedKey);\n};\nexports.decrypt = decrypt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcnNhZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELGVBQWUsR0FBR0EsZUFBZSxHQUFHLEtBQUssQ0FBQztBQUMxQyxNQUFNSSxRQUFRLEdBQUdDLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNsQyxNQUFNQyx5QkFBeUIsR0FBR0QsbUJBQU8sQ0FBQyxxSUFBMkIsQ0FBQztBQUN0RSxNQUFNRSxjQUFjLEdBQUdGLG1CQUFPLENBQUMsK0dBQWdCLENBQUM7QUFDaEQsTUFBTUcsZUFBZSxHQUFHSCxtQkFBTyxDQUFDLGtIQUFzQixDQUFDO0FBQ3ZELE1BQU1JLGtCQUFrQixHQUFHSixtQkFBTyxDQUFDLHVIQUFvQixDQUFDO0FBQ3hELE1BQU1LLHNCQUFzQixHQUFHTCxtQkFBTyxDQUFDLGdJQUE2QixDQUFDO0FBQ3JFLE1BQU1NLGdCQUFnQixHQUFHTixtQkFBTyxDQUFDLG1IQUFrQixDQUFDO0FBQ3BELE1BQU1PLFFBQVEsR0FBR0EsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEtBQUs7RUFDM0IsSUFBSUQsR0FBRyxDQUFDRSxpQkFBaUIsS0FBSyxLQUFLLEVBQUU7SUFDakMsTUFBTSxJQUFJQyxTQUFTLENBQUMsbUVBQW1FLENBQUM7RUFDNUY7RUFDQSxDQUFDLENBQUMsRUFBRVYseUJBQXlCLENBQUNXLE9BQU8sRUFBRUosR0FBRyxFQUFFQyxHQUFHLENBQUM7QUFDcEQsQ0FBQztBQUNELE1BQU1JLGNBQWMsR0FBSUosR0FBRyxJQUFLO0VBQzVCLFFBQVFBLEdBQUc7SUFDUCxLQUFLLFVBQVU7SUFDZixLQUFLLGNBQWM7SUFDbkIsS0FBSyxjQUFjO0lBQ25CLEtBQUssY0FBYztNQUNmLE9BQU9WLFFBQVEsQ0FBQ2UsU0FBUyxDQUFDQyxzQkFBc0I7SUFDcEQsS0FBSyxRQUFRO01BQ1QsT0FBT2hCLFFBQVEsQ0FBQ2UsU0FBUyxDQUFDRSxpQkFBaUI7SUFDL0M7TUFDSSxPQUFPQyxTQUFTO0VBQ3hCO0FBQ0osQ0FBQztBQUNELE1BQU1DLGVBQWUsR0FBSVQsR0FBRyxJQUFLO0VBQzdCLFFBQVFBLEdBQUc7SUFDUCxLQUFLLFVBQVU7TUFDWCxPQUFPLE1BQU07SUFDakIsS0FBSyxjQUFjO01BQ2YsT0FBTyxRQUFRO0lBQ25CLEtBQUssY0FBYztNQUNmLE9BQU8sUUFBUTtJQUNuQixLQUFLLGNBQWM7TUFDZixPQUFPLFFBQVE7SUFDbkI7TUFDSSxPQUFPUSxTQUFTO0VBQ3hCO0FBQ0osQ0FBQztBQUNELFNBQVNFLGVBQWVBLENBQUNYLEdBQUcsRUFBRUMsR0FBRyxFQUFFLEdBQUdXLE1BQU0sRUFBRTtFQUMxQyxJQUFJLENBQUMsQ0FBQyxFQUFFaEIsa0JBQWtCLENBQUNRLE9BQU8sRUFBRUosR0FBRyxDQUFDLEVBQUU7SUFDdEMsT0FBT0EsR0FBRztFQUNkO0VBQ0EsSUFBSSxDQUFDLENBQUMsRUFBRU4sY0FBYyxDQUFDbUIsV0FBVyxFQUFFYixHQUFHLENBQUMsRUFBRTtJQUN0QyxDQUFDLENBQUMsRUFBRUwsZUFBZSxDQUFDbUIsaUJBQWlCLEVBQUVkLEdBQUcsRUFBRUMsR0FBRyxFQUFFLEdBQUdXLE1BQU0sQ0FBQztJQUMzRCxPQUFPckIsUUFBUSxDQUFDd0IsU0FBUyxDQUFDQyxJQUFJLENBQUNoQixHQUFHLENBQUM7RUFDdkM7RUFDQSxNQUFNLElBQUlHLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRU4sc0JBQXNCLENBQUNPLE9BQU8sRUFBRUosR0FBRyxFQUFFLEdBQUdGLGdCQUFnQixDQUFDbUIsS0FBSyxDQUFDLENBQUM7QUFDNUY7QUFDQSxNQUFNM0IsT0FBTyxHQUFHQSxDQUFDVyxHQUFHLEVBQUVELEdBQUcsRUFBRWtCLEdBQUcsS0FBSztFQUMvQixNQUFNQyxPQUFPLEdBQUdkLGNBQWMsQ0FBQ0osR0FBRyxDQUFDO0VBQ25DLE1BQU1tQixRQUFRLEdBQUdWLGVBQWUsQ0FBQ1QsR0FBRyxDQUFDO0VBQ3JDLE1BQU1vQixTQUFTLEdBQUdWLGVBQWUsQ0FBQ1gsR0FBRyxFQUFFQyxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztFQUNqRUYsUUFBUSxDQUFDc0IsU0FBUyxFQUFFcEIsR0FBRyxDQUFDO0VBQ3hCLE9BQU8sQ0FBQyxDQUFDLEVBQUVWLFFBQVEsQ0FBQytCLGFBQWEsRUFBRTtJQUFFdEIsR0FBRyxFQUFFcUIsU0FBUztJQUFFRCxRQUFRO0lBQUVEO0VBQVEsQ0FBQyxFQUFFRCxHQUFHLENBQUM7QUFDbEYsQ0FBQztBQUNEL0IsZUFBZSxHQUFHRyxPQUFPO0FBQ3pCLE1BQU1ELE9BQU8sR0FBR0EsQ0FBQ1ksR0FBRyxFQUFFRCxHQUFHLEVBQUV1QixZQUFZLEtBQUs7RUFDeEMsTUFBTUosT0FBTyxHQUFHZCxjQUFjLENBQUNKLEdBQUcsQ0FBQztFQUNuQyxNQUFNbUIsUUFBUSxHQUFHVixlQUFlLENBQUNULEdBQUcsQ0FBQztFQUNyQyxNQUFNb0IsU0FBUyxHQUFHVixlQUFlLENBQUNYLEdBQUcsRUFBRUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUM7RUFDbkVGLFFBQVEsQ0FBQ3NCLFNBQVMsRUFBRXBCLEdBQUcsQ0FBQztFQUN4QixPQUFPLENBQUMsQ0FBQyxFQUFFVixRQUFRLENBQUNpQyxjQUFjLEVBQUU7SUFBRXhCLEdBQUcsRUFBRXFCLFNBQVM7SUFBRUQsUUFBUTtJQUFFRDtFQUFRLENBQUMsRUFBRUksWUFBWSxDQUFDO0FBQzVGLENBQUM7QUFDRHBDLGVBQWUsR0FBR0UsT0FBTyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcnNhZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlY3J5cHQgPSBleHBvcnRzLmVuY3J5cHQgPSB2b2lkIDA7XG5jb25zdCBjcnlwdG9fMSA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCBjaGVja19tb2R1bHVzX2xlbmd0aF9qc18xID0gcmVxdWlyZShcIi4vY2hlY2tfbW9kdWx1c19sZW5ndGguanNcIik7XG5jb25zdCB3ZWJjcnlwdG9fanNfMSA9IHJlcXVpcmUoXCIuL3dlYmNyeXB0by5qc1wiKTtcbmNvbnN0IGNyeXB0b19rZXlfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvY3J5cHRvX2tleS5qc1wiKTtcbmNvbnN0IGlzX2tleV9vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuL2lzX2tleV9vYmplY3QuanNcIik7XG5jb25zdCBpbnZhbGlkX2tleV9pbnB1dF9qc18xID0gcmVxdWlyZShcIi4uL2xpYi9pbnZhbGlkX2tleV9pbnB1dC5qc1wiKTtcbmNvbnN0IGlzX2tleV9saWtlX2pzXzEgPSByZXF1aXJlKFwiLi9pc19rZXlfbGlrZS5qc1wiKTtcbmNvbnN0IGNoZWNrS2V5ID0gKGtleSwgYWxnKSA9PiB7XG4gICAgaWYgKGtleS5hc3ltbWV0cmljS2V5VHlwZSAhPT0gJ3JzYScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBrZXkgZm9yIHRoaXMgb3BlcmF0aW9uLCBpdHMgYXN5bW1ldHJpY0tleVR5cGUgbXVzdCBiZSByc2EnKTtcbiAgICB9XG4gICAgKDAsIGNoZWNrX21vZHVsdXNfbGVuZ3RoX2pzXzEuZGVmYXVsdCkoa2V5LCBhbGcpO1xufTtcbmNvbnN0IHJlc29sdmVQYWRkaW5nID0gKGFsZykgPT4ge1xuICAgIHN3aXRjaCAoYWxnKSB7XG4gICAgICAgIGNhc2UgJ1JTQS1PQUVQJzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMjU2JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMzg0JzpcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtNTEyJzpcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG9fMS5jb25zdGFudHMuUlNBX1BLQ1MxX09BRVBfUEFERElORztcbiAgICAgICAgY2FzZSAnUlNBMV81JzpcbiAgICAgICAgICAgIHJldHVybiBjcnlwdG9fMS5jb25zdGFudHMuUlNBX1BLQ1MxX1BBRERJTkc7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn07XG5jb25zdCByZXNvbHZlT2FlcEhhc2ggPSAoYWxnKSA9PiB7XG4gICAgc3dpdGNoIChhbGcpIHtcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAnOlxuICAgICAgICAgICAgcmV0dXJuICdzaGExJztcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMjU2JzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMjU2JztcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtMzg0JzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhMzg0JztcbiAgICAgICAgY2FzZSAnUlNBLU9BRVAtNTEyJzpcbiAgICAgICAgICAgIHJldHVybiAnc2hhNTEyJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGVuc3VyZUtleU9iamVjdChrZXksIGFsZywgLi4udXNhZ2VzKSB7XG4gICAgaWYgKCgwLCBpc19rZXlfb2JqZWN0X2pzXzEuZGVmYXVsdCkoa2V5KSkge1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgICBpZiAoKDAsIHdlYmNyeXB0b19qc18xLmlzQ3J5cHRvS2V5KShrZXkpKSB7XG4gICAgICAgICgwLCBjcnlwdG9fa2V5X2pzXzEuY2hlY2tFbmNDcnlwdG9LZXkpKGtleSwgYWxnLCAuLi51c2FnZXMpO1xuICAgICAgICByZXR1cm4gY3J5cHRvXzEuS2V5T2JqZWN0LmZyb20oa2V5KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigoMCwgaW52YWxpZF9rZXlfaW5wdXRfanNfMS5kZWZhdWx0KShrZXksIC4uLmlzX2tleV9saWtlX2pzXzEudHlwZXMpKTtcbn1cbmNvbnN0IGVuY3J5cHQgPSAoYWxnLCBrZXksIGNlaykgPT4ge1xuICAgIGNvbnN0IHBhZGRpbmcgPSByZXNvbHZlUGFkZGluZyhhbGcpO1xuICAgIGNvbnN0IG9hZXBIYXNoID0gcmVzb2x2ZU9hZXBIYXNoKGFsZyk7XG4gICAgY29uc3Qga2V5T2JqZWN0ID0gZW5zdXJlS2V5T2JqZWN0KGtleSwgYWxnLCAnd3JhcEtleScsICdlbmNyeXB0Jyk7XG4gICAgY2hlY2tLZXkoa2V5T2JqZWN0LCBhbGcpO1xuICAgIHJldHVybiAoMCwgY3J5cHRvXzEucHVibGljRW5jcnlwdCkoeyBrZXk6IGtleU9iamVjdCwgb2FlcEhhc2gsIHBhZGRpbmcgfSwgY2VrKTtcbn07XG5leHBvcnRzLmVuY3J5cHQgPSBlbmNyeXB0O1xuY29uc3QgZGVjcnlwdCA9IChhbGcsIGtleSwgZW5jcnlwdGVkS2V5KSA9PiB7XG4gICAgY29uc3QgcGFkZGluZyA9IHJlc29sdmVQYWRkaW5nKGFsZyk7XG4gICAgY29uc3Qgb2FlcEhhc2ggPSByZXNvbHZlT2FlcEhhc2goYWxnKTtcbiAgICBjb25zdCBrZXlPYmplY3QgPSBlbnN1cmVLZXlPYmplY3Qoa2V5LCBhbGcsICd1bndyYXBLZXknLCAnZGVjcnlwdCcpO1xuICAgIGNoZWNrS2V5KGtleU9iamVjdCwgYWxnKTtcbiAgICByZXR1cm4gKDAsIGNyeXB0b18xLnByaXZhdGVEZWNyeXB0KSh7IGtleToga2V5T2JqZWN0LCBvYWVwSGFzaCwgcGFkZGluZyB9LCBlbmNyeXB0ZWRLZXkpO1xufTtcbmV4cG9ydHMuZGVjcnlwdCA9IGRlY3J5cHQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNyeXB0IiwiZW5jcnlwdCIsImNyeXB0b18xIiwicmVxdWlyZSIsImNoZWNrX21vZHVsdXNfbGVuZ3RoX2pzXzEiLCJ3ZWJjcnlwdG9fanNfMSIsImNyeXB0b19rZXlfanNfMSIsImlzX2tleV9vYmplY3RfanNfMSIsImludmFsaWRfa2V5X2lucHV0X2pzXzEiLCJpc19rZXlfbGlrZV9qc18xIiwiY2hlY2tLZXkiLCJrZXkiLCJhbGciLCJhc3ltbWV0cmljS2V5VHlwZSIsIlR5cGVFcnJvciIsImRlZmF1bHQiLCJyZXNvbHZlUGFkZGluZyIsImNvbnN0YW50cyIsIlJTQV9QS0NTMV9PQUVQX1BBRERJTkciLCJSU0FfUEtDUzFfUEFERElORyIsInVuZGVmaW5lZCIsInJlc29sdmVPYWVwSGFzaCIsImVuc3VyZUtleU9iamVjdCIsInVzYWdlcyIsImlzQ3J5cHRvS2V5IiwiY2hlY2tFbmNDcnlwdG9LZXkiLCJLZXlPYmplY3QiLCJmcm9tIiwidHlwZXMiLCJjZWsiLCJwYWRkaW5nIiwib2FlcEhhc2giLCJrZXlPYmplY3QiLCJwdWJsaWNFbmNyeXB0IiwiZW5jcnlwdGVkS2V5IiwicHJpdmF0ZURlY3J5cHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/rsaes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/runtime.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/runtime.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = 'node:crypto';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQsa0JBQWUsR0FBRyxhQUFhIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS9ydW50aW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gJ25vZGU6Y3J5cHRvJztcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst dsa_digest_js_1 = __webpack_require__(/*! ./dsa_digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js\");\nconst hmac_digest_js_1 = __webpack_require__(/*! ./hmac_digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/hmac_digest.js\");\nconst node_key_js_1 = __webpack_require__(/*! ./node_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js\");\nconst get_sign_verify_key_js_1 = __webpack_require__(/*! ./get_sign_verify_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js\");\nlet oneShotSign;\nif (crypto.sign.length > 3) {\n  oneShotSign = (0, util_1.promisify)(crypto.sign);\n} else {\n  oneShotSign = crypto.sign;\n}\nconst sign = async (alg, key, data) => {\n  const keyObject = (0, get_sign_verify_key_js_1.default)(alg, key, 'sign');\n  if (alg.startsWith('HS')) {\n    const hmac = crypto.createHmac((0, hmac_digest_js_1.default)(alg), keyObject);\n    hmac.update(data);\n    return hmac.digest();\n  }\n  return oneShotSign((0, dsa_digest_js_1.default)(alg), data, (0, node_key_js_1.default)(alg, keyObject));\n};\nexports[\"default\"] = sign;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvc2lnbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxNQUFNLEdBQUdDLG1CQUFPLENBQUMsc0JBQVEsQ0FBQztBQUNoQyxNQUFNQyxNQUFNLEdBQUdELG1CQUFPLENBQUMsa0JBQU0sQ0FBQztBQUM5QixNQUFNRSxlQUFlLEdBQUdGLG1CQUFPLENBQUMsaUhBQWlCLENBQUM7QUFDbEQsTUFBTUcsZ0JBQWdCLEdBQUdILG1CQUFPLENBQUMsbUhBQWtCLENBQUM7QUFDcEQsTUFBTUksYUFBYSxHQUFHSixtQkFBTyxDQUFDLDZHQUFlLENBQUM7QUFDOUMsTUFBTUssd0JBQXdCLEdBQUdMLG1CQUFPLENBQUMsbUlBQTBCLENBQUM7QUFDcEUsSUFBSU0sV0FBVztBQUNmLElBQUlQLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0VBQ3hCRixXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUVMLE1BQU0sQ0FBQ1EsU0FBUyxFQUFFVixNQUFNLENBQUNRLElBQUksQ0FBQztBQUNwRCxDQUFDLE1BQ0k7RUFDREQsV0FBVyxHQUFHUCxNQUFNLENBQUNRLElBQUk7QUFDN0I7QUFDQSxNQUFNQSxJQUFJLEdBQUcsTUFBQUEsQ0FBT0csR0FBRyxFQUFFQyxHQUFHLEVBQUVDLElBQUksS0FBSztFQUNuQyxNQUFNQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUVSLHdCQUF3QixDQUFDUyxPQUFPLEVBQUVKLEdBQUcsRUFBRUMsR0FBRyxFQUFFLE1BQU0sQ0FBQztFQUN6RSxJQUFJRCxHQUFHLENBQUNLLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUN0QixNQUFNQyxJQUFJLEdBQUdqQixNQUFNLENBQUNrQixVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUVkLGdCQUFnQixDQUFDVyxPQUFPLEVBQUVKLEdBQUcsQ0FBQyxFQUFFRyxTQUFTLENBQUM7SUFDN0VHLElBQUksQ0FBQ0UsTUFBTSxDQUFDTixJQUFJLENBQUM7SUFDakIsT0FBT0ksSUFBSSxDQUFDRyxNQUFNLENBQUMsQ0FBQztFQUN4QjtFQUNBLE9BQU9iLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRUosZUFBZSxDQUFDWSxPQUFPLEVBQUVKLEdBQUcsQ0FBQyxFQUFFRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUVSLGFBQWEsQ0FBQ1UsT0FBTyxFQUFFSixHQUFHLEVBQUVHLFNBQVMsQ0FBQyxDQUFDO0FBQzNHLENBQUM7QUFDRGhCLGtCQUFlLEdBQUdVLElBQUkiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL3NpZ24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcInV0aWxcIik7XG5jb25zdCBkc2FfZGlnZXN0X2pzXzEgPSByZXF1aXJlKFwiLi9kc2FfZGlnZXN0LmpzXCIpO1xuY29uc3QgaG1hY19kaWdlc3RfanNfMSA9IHJlcXVpcmUoXCIuL2htYWNfZGlnZXN0LmpzXCIpO1xuY29uc3Qgbm9kZV9rZXlfanNfMSA9IHJlcXVpcmUoXCIuL25vZGVfa2V5LmpzXCIpO1xuY29uc3QgZ2V0X3NpZ25fdmVyaWZ5X2tleV9qc18xID0gcmVxdWlyZShcIi4vZ2V0X3NpZ25fdmVyaWZ5X2tleS5qc1wiKTtcbmxldCBvbmVTaG90U2lnbjtcbmlmIChjcnlwdG8uc2lnbi5sZW5ndGggPiAzKSB7XG4gICAgb25lU2hvdFNpZ24gPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoY3J5cHRvLnNpZ24pO1xufVxuZWxzZSB7XG4gICAgb25lU2hvdFNpZ24gPSBjcnlwdG8uc2lnbjtcbn1cbmNvbnN0IHNpZ24gPSBhc3luYyAoYWxnLCBrZXksIGRhdGEpID0+IHtcbiAgICBjb25zdCBrZXlPYmplY3QgPSAoMCwgZ2V0X3NpZ25fdmVyaWZ5X2tleV9qc18xLmRlZmF1bHQpKGFsZywga2V5LCAnc2lnbicpO1xuICAgIGlmIChhbGcuc3RhcnRzV2l0aCgnSFMnKSkge1xuICAgICAgICBjb25zdCBobWFjID0gY3J5cHRvLmNyZWF0ZUhtYWMoKDAsIGhtYWNfZGlnZXN0X2pzXzEuZGVmYXVsdCkoYWxnKSwga2V5T2JqZWN0KTtcbiAgICAgICAgaG1hYy51cGRhdGUoZGF0YSk7XG4gICAgICAgIHJldHVybiBobWFjLmRpZ2VzdCgpO1xuICAgIH1cbiAgICByZXR1cm4gb25lU2hvdFNpZ24oKDAsIGRzYV9kaWdlc3RfanNfMS5kZWZhdWx0KShhbGcpLCBkYXRhLCAoMCwgbm9kZV9rZXlfanNfMS5kZWZhdWx0KShhbGcsIGtleU9iamVjdCkpO1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNpZ247XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcnlwdG8iLCJyZXF1aXJlIiwidXRpbF8xIiwiZHNhX2RpZ2VzdF9qc18xIiwiaG1hY19kaWdlc3RfanNfMSIsIm5vZGVfa2V5X2pzXzEiLCJnZXRfc2lnbl92ZXJpZnlfa2V5X2pzXzEiLCJvbmVTaG90U2lnbiIsInNpZ24iLCJsZW5ndGgiLCJwcm9taXNpZnkiLCJhbGciLCJrZXkiLCJkYXRhIiwia2V5T2JqZWN0IiwiZGVmYXVsdCIsInN0YXJ0c1dpdGgiLCJobWFjIiwiY3JlYXRlSG1hYyIsInVwZGF0ZSIsImRpZ2VzdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/timing_safe_equal.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/timing_safe_equal.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst timingSafeEqual = crypto_1.timingSafeEqual;\nexports[\"default\"] = timingSafeEqual;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvdGltaW5nX3NhZmVfZXF1YWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsUUFBUSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFRLENBQUM7QUFDbEMsTUFBTUMsZUFBZSxHQUFHRixRQUFRLENBQUNFLGVBQWU7QUFDaERKLGtCQUFlLEdBQUdJLGVBQWUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL3RpbWluZ19zYWZlX2VxdWFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY3J5cHRvXzEgPSByZXF1aXJlKFwiY3J5cHRvXCIpO1xuY29uc3QgdGltaW5nU2FmZUVxdWFsID0gY3J5cHRvXzEudGltaW5nU2FmZUVxdWFsO1xuZXhwb3J0cy5kZWZhdWx0ID0gdGltaW5nU2FmZUVxdWFsO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3J5cHRvXzEiLCJyZXF1aXJlIiwidGltaW5nU2FmZUVxdWFsIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/timing_safe_equal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/verify.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/verify.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst dsa_digest_js_1 = __webpack_require__(/*! ./dsa_digest.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/dsa_digest.js\");\nconst node_key_js_1 = __webpack_require__(/*! ./node_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/node_key.js\");\nconst sign_js_1 = __webpack_require__(/*! ./sign.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/sign.js\");\nconst get_sign_verify_key_js_1 = __webpack_require__(/*! ./get_sign_verify_key.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/get_sign_verify_key.js\");\nconst flags_js_1 = __webpack_require__(/*! ./flags.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/flags.js\");\nlet oneShotVerify;\nif (crypto.verify.length > 4 && flags_js_1.oneShotCallback) {\n  oneShotVerify = (0, util_1.promisify)(crypto.verify);\n} else {\n  oneShotVerify = crypto.verify;\n}\nconst verify = async (alg, key, signature, data) => {\n  const keyObject = (0, get_sign_verify_key_js_1.default)(alg, key, 'verify');\n  if (alg.startsWith('HS')) {\n    const expected = await (0, sign_js_1.default)(alg, keyObject, data);\n    const actual = signature;\n    try {\n      return crypto.timingSafeEqual(actual, expected);\n    } catch {\n      return false;\n    }\n  }\n  const algorithm = (0, dsa_digest_js_1.default)(alg);\n  const keyInput = (0, node_key_js_1.default)(alg, keyObject);\n  try {\n    return await oneShotVerify(algorithm, data, keyInput, signature);\n  } catch {\n    return false;\n  }\n};\nexports[\"default\"] = verify;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvdmVyaWZ5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxzQkFBUSxDQUFDO0FBQ2hDLE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyxrQkFBTSxDQUFDO0FBQzlCLE1BQU1FLGVBQWUsR0FBR0YsbUJBQU8sQ0FBQyxpSEFBaUIsQ0FBQztBQUNsRCxNQUFNRyxhQUFhLEdBQUdILG1CQUFPLENBQUMsNkdBQWUsQ0FBQztBQUM5QyxNQUFNSSxTQUFTLEdBQUdKLG1CQUFPLENBQUMscUdBQVcsQ0FBQztBQUN0QyxNQUFNSyx3QkFBd0IsR0FBR0wsbUJBQU8sQ0FBQyxtSUFBMEIsQ0FBQztBQUNwRSxNQUFNTSxVQUFVLEdBQUdOLG1CQUFPLENBQUMsdUdBQVksQ0FBQztBQUN4QyxJQUFJTyxhQUFhO0FBQ2pCLElBQUlSLE1BQU0sQ0FBQ1MsTUFBTSxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxJQUFJSCxVQUFVLENBQUNJLGVBQWUsRUFBRTtFQUN4REgsYUFBYSxHQUFHLENBQUMsQ0FBQyxFQUFFTixNQUFNLENBQUNVLFNBQVMsRUFBRVosTUFBTSxDQUFDUyxNQUFNLENBQUM7QUFDeEQsQ0FBQyxNQUNJO0VBQ0RELGFBQWEsR0FBR1IsTUFBTSxDQUFDUyxNQUFNO0FBQ2pDO0FBQ0EsTUFBTUEsTUFBTSxHQUFHLE1BQUFBLENBQU9JLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxTQUFTLEVBQUVDLElBQUksS0FBSztFQUNoRCxNQUFNQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUVYLHdCQUF3QixDQUFDWSxPQUFPLEVBQUVMLEdBQUcsRUFBRUMsR0FBRyxFQUFFLFFBQVEsQ0FBQztFQUMzRSxJQUFJRCxHQUFHLENBQUNNLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUN0QixNQUFNQyxRQUFRLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRWYsU0FBUyxDQUFDYSxPQUFPLEVBQUVMLEdBQUcsRUFBRUksU0FBUyxFQUFFRCxJQUFJLENBQUM7SUFDbkUsTUFBTUssTUFBTSxHQUFHTixTQUFTO0lBQ3hCLElBQUk7TUFDQSxPQUFPZixNQUFNLENBQUNzQixlQUFlLENBQUNELE1BQU0sRUFBRUQsUUFBUSxDQUFDO0lBQ25ELENBQUMsQ0FDRCxNQUFNO01BQ0YsT0FBTyxLQUFLO0lBQ2hCO0VBQ0o7RUFDQSxNQUFNRyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUVwQixlQUFlLENBQUNlLE9BQU8sRUFBRUwsR0FBRyxDQUFDO0VBQ25ELE1BQU1XLFFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRXBCLGFBQWEsQ0FBQ2MsT0FBTyxFQUFFTCxHQUFHLEVBQUVJLFNBQVMsQ0FBQztFQUMzRCxJQUFJO0lBQ0EsT0FBTyxNQUFNVCxhQUFhLENBQUNlLFNBQVMsRUFBRVAsSUFBSSxFQUFFUSxRQUFRLEVBQUVULFNBQVMsQ0FBQztFQUNwRSxDQUFDLENBQ0QsTUFBTTtJQUNGLE9BQU8sS0FBSztFQUNoQjtBQUNKLENBQUM7QUFDRGpCLGtCQUFlLEdBQUdXLE1BQU0iLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL3ZlcmlmeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoXCJjcnlwdG9cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IGRzYV9kaWdlc3RfanNfMSA9IHJlcXVpcmUoXCIuL2RzYV9kaWdlc3QuanNcIik7XG5jb25zdCBub2RlX2tleV9qc18xID0gcmVxdWlyZShcIi4vbm9kZV9rZXkuanNcIik7XG5jb25zdCBzaWduX2pzXzEgPSByZXF1aXJlKFwiLi9zaWduLmpzXCIpO1xuY29uc3QgZ2V0X3NpZ25fdmVyaWZ5X2tleV9qc18xID0gcmVxdWlyZShcIi4vZ2V0X3NpZ25fdmVyaWZ5X2tleS5qc1wiKTtcbmNvbnN0IGZsYWdzX2pzXzEgPSByZXF1aXJlKFwiLi9mbGFncy5qc1wiKTtcbmxldCBvbmVTaG90VmVyaWZ5O1xuaWYgKGNyeXB0by52ZXJpZnkubGVuZ3RoID4gNCAmJiBmbGFnc19qc18xLm9uZVNob3RDYWxsYmFjaykge1xuICAgIG9uZVNob3RWZXJpZnkgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoY3J5cHRvLnZlcmlmeSk7XG59XG5lbHNlIHtcbiAgICBvbmVTaG90VmVyaWZ5ID0gY3J5cHRvLnZlcmlmeTtcbn1cbmNvbnN0IHZlcmlmeSA9IGFzeW5jIChhbGcsIGtleSwgc2lnbmF0dXJlLCBkYXRhKSA9PiB7XG4gICAgY29uc3Qga2V5T2JqZWN0ID0gKDAsIGdldF9zaWduX3ZlcmlmeV9rZXlfanNfMS5kZWZhdWx0KShhbGcsIGtleSwgJ3ZlcmlmeScpO1xuICAgIGlmIChhbGcuc3RhcnRzV2l0aCgnSFMnKSkge1xuICAgICAgICBjb25zdCBleHBlY3RlZCA9IGF3YWl0ICgwLCBzaWduX2pzXzEuZGVmYXVsdCkoYWxnLCBrZXlPYmplY3QsIGRhdGEpO1xuICAgICAgICBjb25zdCBhY3R1YWwgPSBzaWduYXR1cmU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gY3J5cHRvLnRpbWluZ1NhZmVFcXVhbChhY3R1YWwsIGV4cGVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYWxnb3JpdGhtID0gKDAsIGRzYV9kaWdlc3RfanNfMS5kZWZhdWx0KShhbGcpO1xuICAgIGNvbnN0IGtleUlucHV0ID0gKDAsIG5vZGVfa2V5X2pzXzEuZGVmYXVsdCkoYWxnLCBrZXlPYmplY3QpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBvbmVTaG90VmVyaWZ5KGFsZ29yaXRobSwgZGF0YSwga2V5SW5wdXQsIHNpZ25hdHVyZSk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSB2ZXJpZnk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjcnlwdG8iLCJyZXF1aXJlIiwidXRpbF8xIiwiZHNhX2RpZ2VzdF9qc18xIiwibm9kZV9rZXlfanNfMSIsInNpZ25fanNfMSIsImdldF9zaWduX3ZlcmlmeV9rZXlfanNfMSIsImZsYWdzX2pzXzEiLCJvbmVTaG90VmVyaWZ5IiwidmVyaWZ5IiwibGVuZ3RoIiwib25lU2hvdENhbGxiYWNrIiwicHJvbWlzaWZ5IiwiYWxnIiwia2V5Iiwic2lnbmF0dXJlIiwiZGF0YSIsImtleU9iamVjdCIsImRlZmF1bHQiLCJzdGFydHNXaXRoIiwiZXhwZWN0ZWQiLCJhY3R1YWwiLCJ0aW1pbmdTYWZlRXF1YWwiLCJhbGdvcml0aG0iLCJrZXlJbnB1dCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/verify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.isCryptoKey = void 0;\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst util = __webpack_require__(/*! util */ \"util\");\nconst webcrypto = crypto.webcrypto;\nexports[\"default\"] = webcrypto;\nexports.isCryptoKey = util.types.isCryptoKey ? key => util.types.isCryptoKey(key) : key => false;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvd2ViY3J5cHRvLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLLENBQUM7QUFDNUIsTUFBTUcsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFRLENBQUM7QUFDaEMsTUFBTUMsSUFBSSxHQUFHRCxtQkFBTyxDQUFDLGtCQUFNLENBQUM7QUFDNUIsTUFBTUUsU0FBUyxHQUFHSCxNQUFNLENBQUNHLFNBQVM7QUFDbENOLGtCQUFlLEdBQUdNLFNBQVM7QUFDM0JOLG1CQUFtQixHQUFHSyxJQUFJLENBQUNHLEtBQUssQ0FBQ04sV0FBVyxHQUNyQ08sR0FBRyxJQUFLSixJQUFJLENBQUNHLEtBQUssQ0FBQ04sV0FBVyxDQUFDTyxHQUFHLENBQUMsR0FFakNBLEdBQUcsSUFBSyxLQUFLIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvcnVudGltZS93ZWJjcnlwdG8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQ3J5cHRvS2V5ID0gdm9pZCAwO1xuY29uc3QgY3J5cHRvID0gcmVxdWlyZShcImNyeXB0b1wiKTtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IHdlYmNyeXB0byA9IGNyeXB0by53ZWJjcnlwdG87XG5leHBvcnRzLmRlZmF1bHQgPSB3ZWJjcnlwdG87XG5leHBvcnRzLmlzQ3J5cHRvS2V5ID0gdXRpbC50eXBlcy5pc0NyeXB0b0tleVxuICAgID8gKGtleSkgPT4gdXRpbC50eXBlcy5pc0NyeXB0b0tleShrZXkpXG4gICAgOlxuICAgICAgICAoa2V5KSA9PiBmYWxzZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImlzQ3J5cHRvS2V5IiwiY3J5cHRvIiwicmVxdWlyZSIsInV0aWwiLCJ3ZWJjcnlwdG8iLCJkZWZhdWx0IiwidHlwZXMiLCJrZXkiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/webcrypto.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.deflate = exports.inflate = void 0;\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst zlib_1 = __webpack_require__(/*! zlib */ \"zlib\");\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nconst inflateRaw = (0, util_1.promisify)(zlib_1.inflateRaw);\nconst deflateRaw = (0, util_1.promisify)(zlib_1.deflateRaw);\nconst inflate = input => inflateRaw(input, {\n  maxOutputLength: 250000\n}).catch(() => {\n  throw new errors_js_1.JWEDecompressionFailed();\n});\nexports.inflate = inflate;\nconst deflate = input => deflateRaw(input);\nexports.deflate = deflate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3J1bnRpbWUvemxpYi5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQsZUFBZSxHQUFHQSxlQUFlLEdBQUcsS0FBSyxDQUFDO0FBQzFDLE1BQU1JLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyxrQkFBTSxDQUFDO0FBQzlCLE1BQU1DLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyxrQkFBTSxDQUFDO0FBQzlCLE1BQU1FLFdBQVcsR0FBR0YsbUJBQU8sQ0FBQyw0R0FBbUIsQ0FBQztBQUNoRCxNQUFNRyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUVKLE1BQU0sQ0FBQ0ssU0FBUyxFQUFFSCxNQUFNLENBQUNFLFVBQVUsQ0FBQztBQUMzRCxNQUFNRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUVOLE1BQU0sQ0FBQ0ssU0FBUyxFQUFFSCxNQUFNLENBQUNJLFVBQVUsQ0FBQztBQUMzRCxNQUFNUCxPQUFPLEdBQUlRLEtBQUssSUFBS0gsVUFBVSxDQUFDRyxLQUFLLEVBQUU7RUFBRUMsZUFBZSxFQUFFO0FBQU8sQ0FBQyxDQUFDLENBQUNDLEtBQUssQ0FBQyxNQUFNO0VBQ2xGLE1BQU0sSUFBSU4sV0FBVyxDQUFDTyxzQkFBc0IsQ0FBQyxDQUFDO0FBQ2xELENBQUMsQ0FBQztBQUNGZCxlQUFlLEdBQUdHLE9BQU87QUFDekIsTUFBTUQsT0FBTyxHQUFJUyxLQUFLLElBQUtELFVBQVUsQ0FBQ0MsS0FBSyxDQUFDO0FBQzVDWCxlQUFlLEdBQUdFLE9BQU8iLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy9ydW50aW1lL3psaWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmxhdGUgPSBleHBvcnRzLmluZmxhdGUgPSB2b2lkIDA7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwidXRpbFwiKTtcbmNvbnN0IHpsaWJfMSA9IHJlcXVpcmUoXCJ6bGliXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5jb25zdCBpbmZsYXRlUmF3ID0gKDAsIHV0aWxfMS5wcm9taXNpZnkpKHpsaWJfMS5pbmZsYXRlUmF3KTtcbmNvbnN0IGRlZmxhdGVSYXcgPSAoMCwgdXRpbF8xLnByb21pc2lmeSkoemxpYl8xLmRlZmxhdGVSYXcpO1xuY29uc3QgaW5mbGF0ZSA9IChpbnB1dCkgPT4gaW5mbGF0ZVJhdyhpbnB1dCwgeyBtYXhPdXRwdXRMZW5ndGg6IDI1MDAwMCB9KS5jYXRjaCgoKSA9PiB7XG4gICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXRURlY29tcHJlc3Npb25GYWlsZWQoKTtcbn0pO1xuZXhwb3J0cy5pbmZsYXRlID0gaW5mbGF0ZTtcbmNvbnN0IGRlZmxhdGUgPSAoaW5wdXQpID0+IGRlZmxhdGVSYXcoaW5wdXQpO1xuZXhwb3J0cy5kZWZsYXRlID0gZGVmbGF0ZTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmxhdGUiLCJpbmZsYXRlIiwidXRpbF8xIiwicmVxdWlyZSIsInpsaWJfMSIsImVycm9yc19qc18xIiwiaW5mbGF0ZVJhdyIsInByb21pc2lmeSIsImRlZmxhdGVSYXciLCJpbnB1dCIsIm1heE91dHB1dExlbmd0aCIsImNhdGNoIiwiSldFRGVjb21wcmVzc2lvbkZhaWxlZCJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/zlib.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.decode = exports.encode = void 0;\nconst base64url = __webpack_require__(/*! ../runtime/base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/base64url.js\");\nexports.encode = base64url.encode;\nexports.decode = base64url.decode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvYmFzZTY0dXJsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSw4Q0FBNkM7RUFBRUcsS0FBSyxFQUFFO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdBLGNBQWMsR0FBRyxLQUFLLENBQUM7QUFDeEMsTUFBTUksU0FBUyxHQUFHQyxtQkFBTyxDQUFDLHdIQUF5QixDQUFDO0FBQ3BETCxjQUFjLEdBQUdJLFNBQVMsQ0FBQ0QsTUFBTTtBQUNqQ0gsY0FBYyxHQUFHSSxTQUFTLENBQUNGLE1BQU0iLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy91dGlsL2Jhc2U2NHVybC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5lbmNvZGUgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmwgPSByZXF1aXJlKFwiLi4vcnVudGltZS9iYXNlNjR1cmwuanNcIik7XG5leHBvcnRzLmVuY29kZSA9IGJhc2U2NHVybC5lbmNvZGU7XG5leHBvcnRzLmRlY29kZSA9IGJhc2U2NHVybC5kZWNvZGU7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGUiLCJlbmNvZGUiLCJiYXNlNjR1cmwiLCJyZXF1aXJlIl0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_jwt.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_jwt.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.decodeJwt = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nconst errors_js_1 = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\");\nfunction decodeJwt(jwt) {\n  if (typeof jwt !== 'string') throw new errors_js_1.JWTInvalid('JWTs must use Compact JWS serialization, JWT must be a string');\n  const {\n    1: payload,\n    length\n  } = jwt.split('.');\n  if (length === 5) throw new errors_js_1.JWTInvalid('Only JWTs using Compact JWS serialization can be decoded');\n  if (length !== 3) throw new errors_js_1.JWTInvalid('Invalid JWT');\n  if (!payload) throw new errors_js_1.JWTInvalid('JWTs must contain a payload');\n  let decoded;\n  try {\n    decoded = (0, base64url_js_1.decode)(payload);\n  } catch {\n    throw new errors_js_1.JWTInvalid('Failed to base64url decode the payload');\n  }\n  let result;\n  try {\n    result = JSON.parse(buffer_utils_js_1.decoder.decode(decoded));\n  } catch {\n    throw new errors_js_1.JWTInvalid('Failed to parse the decoded payload as JSON');\n  }\n  if (!(0, is_object_js_1.default)(result)) throw new errors_js_1.JWTInvalid('Invalid JWT Claims Set');\n  return result;\n}\nexports.decodeJwt = decodeJwt;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvZGVjb2RlX2p3dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQzFCLE1BQU1HLGNBQWMsR0FBR0MsbUJBQU8sQ0FBQyw0R0FBZ0IsQ0FBQztBQUNoRCxNQUFNQyxpQkFBaUIsR0FBR0QsbUJBQU8sQ0FBQyxzSEFBd0IsQ0FBQztBQUMzRCxNQUFNRSxjQUFjLEdBQUdGLG1CQUFPLENBQUMsZ0hBQXFCLENBQUM7QUFDckQsTUFBTUcsV0FBVyxHQUFHSCxtQkFBTyxDQUFDLHNHQUFhLENBQUM7QUFDMUMsU0FBU0YsU0FBU0EsQ0FBQ00sR0FBRyxFQUFFO0VBQ3BCLElBQUksT0FBT0EsR0FBRyxLQUFLLFFBQVEsRUFDdkIsTUFBTSxJQUFJRCxXQUFXLENBQUNFLFVBQVUsQ0FBQywrREFBK0QsQ0FBQztFQUNyRyxNQUFNO0lBQUUsQ0FBQyxFQUFFQyxPQUFPO0lBQUVDO0VBQU8sQ0FBQyxHQUFHSCxHQUFHLENBQUNJLEtBQUssQ0FBQyxHQUFHLENBQUM7RUFDN0MsSUFBSUQsTUFBTSxLQUFLLENBQUMsRUFDWixNQUFNLElBQUlKLFdBQVcsQ0FBQ0UsVUFBVSxDQUFDLDBEQUEwRCxDQUFDO0VBQ2hHLElBQUlFLE1BQU0sS0FBSyxDQUFDLEVBQ1osTUFBTSxJQUFJSixXQUFXLENBQUNFLFVBQVUsQ0FBQyxhQUFhLENBQUM7RUFDbkQsSUFBSSxDQUFDQyxPQUFPLEVBQ1IsTUFBTSxJQUFJSCxXQUFXLENBQUNFLFVBQVUsQ0FBQyw2QkFBNkIsQ0FBQztFQUNuRSxJQUFJSSxPQUFPO0VBQ1gsSUFBSTtJQUNBQSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUVWLGNBQWMsQ0FBQ1csTUFBTSxFQUFFSixPQUFPLENBQUM7RUFDakQsQ0FBQyxDQUNELE1BQU07SUFDRixNQUFNLElBQUlILFdBQVcsQ0FBQ0UsVUFBVSxDQUFDLHdDQUF3QyxDQUFDO0VBQzlFO0VBQ0EsSUFBSU0sTUFBTTtFQUNWLElBQUk7SUFDQUEsTUFBTSxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBQ1osaUJBQWlCLENBQUNhLE9BQU8sQ0FBQ0osTUFBTSxDQUFDRCxPQUFPLENBQUMsQ0FBQztFQUNsRSxDQUFDLENBQ0QsTUFBTTtJQUNGLE1BQU0sSUFBSU4sV0FBVyxDQUFDRSxVQUFVLENBQUMsNkNBQTZDLENBQUM7RUFDbkY7RUFDQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUVILGNBQWMsQ0FBQ2EsT0FBTyxFQUFFSixNQUFNLENBQUMsRUFDcEMsTUFBTSxJQUFJUixXQUFXLENBQUNFLFVBQVUsQ0FBQyx3QkFBd0IsQ0FBQztFQUM5RCxPQUFPTSxNQUFNO0FBQ2pCO0FBQ0FmLGlCQUFpQixHQUFHRSxTQUFTIiwic291cmNlcyI6WyIvVXNlcnMvamVyZW1pYWgvRG9jdW1lbnRzL0dpdEh1Yi9DaE1TL25vZGVfbW9kdWxlcy9vcGVuaWQtY2xpZW50L25vZGVfbW9kdWxlcy9qb3NlL2Rpc3Qvbm9kZS9janMvdXRpbC9kZWNvZGVfand0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVKd3QgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi9lcnJvcnMuanNcIik7XG5mdW5jdGlvbiBkZWNvZGVKd3Qoand0KSB7XG4gICAgaWYgKHR5cGVvZiBqd3QgIT09ICdzdHJpbmcnKVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnSldUcyBtdXN0IHVzZSBDb21wYWN0IEpXUyBzZXJpYWxpemF0aW9uLCBKV1QgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgIGNvbnN0IHsgMTogcGF5bG9hZCwgbGVuZ3RoIH0gPSBqd3Quc3BsaXQoJy4nKTtcbiAgICBpZiAobGVuZ3RoID09PSA1KVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnT25seSBKV1RzIHVzaW5nIENvbXBhY3QgSldTIHNlcmlhbGl6YXRpb24gY2FuIGJlIGRlY29kZWQnKTtcbiAgICBpZiAobGVuZ3RoICE9PSAzKVxuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzX2pzXzEuSldUSW52YWxpZCgnSW52YWxpZCBKV1QnKTtcbiAgICBpZiAoIXBheWxvYWQpXG4gICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5KV1RJbnZhbGlkKCdKV1RzIG11c3QgY29udGFpbiBhIHBheWxvYWQnKTtcbiAgICBsZXQgZGVjb2RlZDtcbiAgICB0cnkge1xuICAgICAgICBkZWNvZGVkID0gKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkocGF5bG9hZCk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0ZhaWxlZCB0byBiYXNlNjR1cmwgZGVjb2RlIHRoZSBwYXlsb2FkJyk7XG4gICAgfVxuICAgIGxldCByZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShidWZmZXJfdXRpbHNfanNfMS5kZWNvZGVyLmRlY29kZShkZWNvZGVkKSk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0ZhaWxlZCB0byBwYXJzZSB0aGUgZGVjb2RlZCBwYXlsb2FkIGFzIEpTT04nKTtcbiAgICB9XG4gICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkocmVzdWx0KSlcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLkpXVEludmFsaWQoJ0ludmFsaWQgSldUIENsYWltcyBTZXQnKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5kZWNvZGVKd3QgPSBkZWNvZGVKd3Q7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNvZGVKd3QiLCJiYXNlNjR1cmxfanNfMSIsInJlcXVpcmUiLCJidWZmZXJfdXRpbHNfanNfMSIsImlzX29iamVjdF9qc18xIiwiZXJyb3JzX2pzXzEiLCJqd3QiLCJKV1RJbnZhbGlkIiwicGF5bG9hZCIsImxlbmd0aCIsInNwbGl0IiwiZGVjb2RlZCIsImRlY29kZSIsInJlc3VsdCIsIkpTT04iLCJwYXJzZSIsImRlY29kZXIiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_jwt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_protected_header.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_protected_header.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.decodeProtectedHeader = void 0;\nconst base64url_js_1 = __webpack_require__(/*! ./base64url.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/base64url.js\");\nconst buffer_utils_js_1 = __webpack_require__(/*! ../lib/buffer_utils.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/buffer_utils.js\");\nconst is_object_js_1 = __webpack_require__(/*! ../lib/is_object.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/lib/is_object.js\");\nfunction decodeProtectedHeader(token) {\n  let protectedB64u;\n  if (typeof token === 'string') {\n    const parts = token.split('.');\n    if (parts.length === 3 || parts.length === 5) {\n      ;\n      [protectedB64u] = parts;\n    }\n  } else if (typeof token === 'object' && token) {\n    if ('protected' in token) {\n      protectedB64u = token.protected;\n    } else {\n      throw new TypeError('Token does not contain a Protected Header');\n    }\n  }\n  try {\n    if (typeof protectedB64u !== 'string' || !protectedB64u) {\n      throw new Error();\n    }\n    const result = JSON.parse(buffer_utils_js_1.decoder.decode((0, base64url_js_1.decode)(protectedB64u)));\n    if (!(0, is_object_js_1.default)(result)) {\n      throw new Error();\n    }\n    return result;\n  } catch {\n    throw new TypeError('Invalid Token or Protected Header formatting');\n  }\n}\nexports.decodeProtectedHeader = decodeProtectedHeader;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvZGVjb2RlX3Byb3RlY3RlZF9oZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBQ2JBLDhDQUE2QztFQUFFRyxLQUFLLEVBQUU7QUFBSyxDQUFDLEVBQUM7QUFDN0RELDZCQUE2QixHQUFHLEtBQUssQ0FBQztBQUN0QyxNQUFNRyxjQUFjLEdBQUdDLG1CQUFPLENBQUMsNEdBQWdCLENBQUM7QUFDaEQsTUFBTUMsaUJBQWlCLEdBQUdELG1CQUFPLENBQUMsc0hBQXdCLENBQUM7QUFDM0QsTUFBTUUsY0FBYyxHQUFHRixtQkFBTyxDQUFDLGdIQUFxQixDQUFDO0FBQ3JELFNBQVNGLHFCQUFxQkEsQ0FBQ0ssS0FBSyxFQUFFO0VBQ2xDLElBQUlDLGFBQWE7RUFDakIsSUFBSSxPQUFPRCxLQUFLLEtBQUssUUFBUSxFQUFFO0lBQzNCLE1BQU1FLEtBQUssR0FBR0YsS0FBSyxDQUFDRyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBQzlCLElBQUlELEtBQUssQ0FBQ0UsTUFBTSxLQUFLLENBQUMsSUFBSUYsS0FBSyxDQUFDRSxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQzFDO01BQ0EsQ0FBQ0gsYUFBYSxDQUFDLEdBQUdDLEtBQUs7SUFDM0I7RUFDSixDQUFDLE1BQ0ksSUFBSSxPQUFPRixLQUFLLEtBQUssUUFBUSxJQUFJQSxLQUFLLEVBQUU7SUFDekMsSUFBSSxXQUFXLElBQUlBLEtBQUssRUFBRTtNQUN0QkMsYUFBYSxHQUFHRCxLQUFLLENBQUNLLFNBQVM7SUFDbkMsQ0FBQyxNQUNJO01BQ0QsTUFBTSxJQUFJQyxTQUFTLENBQUMsMkNBQTJDLENBQUM7SUFDcEU7RUFDSjtFQUNBLElBQUk7SUFDQSxJQUFJLE9BQU9MLGFBQWEsS0FBSyxRQUFRLElBQUksQ0FBQ0EsYUFBYSxFQUFFO01BQ3JELE1BQU0sSUFBSU0sS0FBSyxDQUFDLENBQUM7SUFDckI7SUFDQSxNQUFNQyxNQUFNLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFDWixpQkFBaUIsQ0FBQ2EsT0FBTyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVoQixjQUFjLENBQUNnQixNQUFNLEVBQUVYLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDdEcsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFRixjQUFjLENBQUNjLE9BQU8sRUFBRUwsTUFBTSxDQUFDLEVBQUU7TUFDdEMsTUFBTSxJQUFJRCxLQUFLLENBQUMsQ0FBQztJQUNyQjtJQUNBLE9BQU9DLE1BQU07RUFDakIsQ0FBQyxDQUNELE1BQU07SUFDRixNQUFNLElBQUlGLFNBQVMsQ0FBQyw4Q0FBOEMsQ0FBQztFQUN2RTtBQUNKO0FBQ0FiLDZCQUE2QixHQUFHRSxxQkFBcUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL2pvc2UvZGlzdC9ub2RlL2Nqcy91dGlsL2RlY29kZV9wcm90ZWN0ZWRfaGVhZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWNvZGVQcm90ZWN0ZWRIZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBiYXNlNjR1cmxfanNfMSA9IHJlcXVpcmUoXCIuL2Jhc2U2NHVybC5qc1wiKTtcbmNvbnN0IGJ1ZmZlcl91dGlsc19qc18xID0gcmVxdWlyZShcIi4uL2xpYi9idWZmZXJfdXRpbHMuanNcIik7XG5jb25zdCBpc19vYmplY3RfanNfMSA9IHJlcXVpcmUoXCIuLi9saWIvaXNfb2JqZWN0LmpzXCIpO1xuZnVuY3Rpb24gZGVjb2RlUHJvdGVjdGVkSGVhZGVyKHRva2VuKSB7XG4gICAgbGV0IHByb3RlY3RlZEI2NHU7XG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xuICAgICAgICBpZiAocGFydHMubGVuZ3RoID09PSAzIHx8IHBhcnRzLmxlbmd0aCA9PT0gNSkge1xuICAgICAgICAgICAgO1xuICAgICAgICAgICAgW3Byb3RlY3RlZEI2NHVdID0gcGFydHM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHRva2VuID09PSAnb2JqZWN0JyAmJiB0b2tlbikge1xuICAgICAgICBpZiAoJ3Byb3RlY3RlZCcgaW4gdG9rZW4pIHtcbiAgICAgICAgICAgIHByb3RlY3RlZEI2NHUgPSB0b2tlbi5wcm90ZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUb2tlbiBkb2VzIG5vdCBjb250YWluIGEgUHJvdGVjdGVkIEhlYWRlcicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvdGVjdGVkQjY0dSAhPT0gJ3N0cmluZycgfHwgIXByb3RlY3RlZEI2NHUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UoYnVmZmVyX3V0aWxzX2pzXzEuZGVjb2Rlci5kZWNvZGUoKDAsIGJhc2U2NHVybF9qc18xLmRlY29kZSkocHJvdGVjdGVkQjY0dSkpKTtcbiAgICAgICAgaWYgKCEoMCwgaXNfb2JqZWN0X2pzXzEuZGVmYXVsdCkocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2gge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIFRva2VuIG9yIFByb3RlY3RlZCBIZWFkZXIgZm9ybWF0dGluZycpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVjb2RlUHJvdGVjdGVkSGVhZGVyID0gZGVjb2RlUHJvdGVjdGVkSGVhZGVyO1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVjb2RlUHJvdGVjdGVkSGVhZGVyIiwiYmFzZTY0dXJsX2pzXzEiLCJyZXF1aXJlIiwiYnVmZmVyX3V0aWxzX2pzXzEiLCJpc19vYmplY3RfanNfMSIsInRva2VuIiwicHJvdGVjdGVkQjY0dSIsInBhcnRzIiwic3BsaXQiLCJsZW5ndGgiLCJwcm90ZWN0ZWQiLCJUeXBlRXJyb3IiLCJFcnJvciIsInJlc3VsdCIsIkpTT04iLCJwYXJzZSIsImRlY29kZXIiLCJkZWNvZGUiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/decode_protected_header.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.JWSSignatureVerificationFailed = exports.JWKSTimeout = exports.JWKSMultipleMatchingKeys = exports.JWKSNoMatchingKey = exports.JWKSInvalid = exports.JWKInvalid = exports.JWTInvalid = exports.JWSInvalid = exports.JWEInvalid = exports.JWEDecompressionFailed = exports.JWEDecryptionFailed = exports.JOSENotSupported = exports.JOSEAlgNotAllowed = exports.JWTExpired = exports.JWTClaimValidationFailed = exports.JOSEError = void 0;\nclass JOSEError extends Error {\n  static get code() {\n    return 'ERR_JOSE_GENERIC';\n  }\n  constructor(message) {\n    var _a;\n    super(message);\n    this.code = 'ERR_JOSE_GENERIC';\n    this.name = this.constructor.name;\n    (_a = Error.captureStackTrace) === null || _a === void 0 ? void 0 : _a.call(Error, this, this.constructor);\n  }\n}\nexports.JOSEError = JOSEError;\nclass JWTClaimValidationFailed extends JOSEError {\n  static get code() {\n    return 'ERR_JWT_CLAIM_VALIDATION_FAILED';\n  }\n  constructor(message, claim = 'unspecified', reason = 'unspecified') {\n    super(message);\n    this.code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';\n    this.claim = claim;\n    this.reason = reason;\n  }\n}\nexports.JWTClaimValidationFailed = JWTClaimValidationFailed;\nclass JWTExpired extends JOSEError {\n  static get code() {\n    return 'ERR_JWT_EXPIRED';\n  }\n  constructor(message, claim = 'unspecified', reason = 'unspecified') {\n    super(message);\n    this.code = 'ERR_JWT_EXPIRED';\n    this.claim = claim;\n    this.reason = reason;\n  }\n}\nexports.JWTExpired = JWTExpired;\nclass JOSEAlgNotAllowed extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JOSE_ALG_NOT_ALLOWED';\n  }\n  static get code() {\n    return 'ERR_JOSE_ALG_NOT_ALLOWED';\n  }\n}\nexports.JOSEAlgNotAllowed = JOSEAlgNotAllowed;\nclass JOSENotSupported extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JOSE_NOT_SUPPORTED';\n  }\n  static get code() {\n    return 'ERR_JOSE_NOT_SUPPORTED';\n  }\n}\nexports.JOSENotSupported = JOSENotSupported;\nclass JWEDecryptionFailed extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWE_DECRYPTION_FAILED';\n    this.message = 'decryption operation failed';\n  }\n  static get code() {\n    return 'ERR_JWE_DECRYPTION_FAILED';\n  }\n}\nexports.JWEDecryptionFailed = JWEDecryptionFailed;\nclass JWEDecompressionFailed extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWE_DECOMPRESSION_FAILED';\n    this.message = 'decompression operation failed';\n  }\n  static get code() {\n    return 'ERR_JWE_DECOMPRESSION_FAILED';\n  }\n}\nexports.JWEDecompressionFailed = JWEDecompressionFailed;\nclass JWEInvalid extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWE_INVALID';\n  }\n  static get code() {\n    return 'ERR_JWE_INVALID';\n  }\n}\nexports.JWEInvalid = JWEInvalid;\nclass JWSInvalid extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWS_INVALID';\n  }\n  static get code() {\n    return 'ERR_JWS_INVALID';\n  }\n}\nexports.JWSInvalid = JWSInvalid;\nclass JWTInvalid extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWT_INVALID';\n  }\n  static get code() {\n    return 'ERR_JWT_INVALID';\n  }\n}\nexports.JWTInvalid = JWTInvalid;\nclass JWKInvalid extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWK_INVALID';\n  }\n  static get code() {\n    return 'ERR_JWK_INVALID';\n  }\n}\nexports.JWKInvalid = JWKInvalid;\nclass JWKSInvalid extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWKS_INVALID';\n  }\n  static get code() {\n    return 'ERR_JWKS_INVALID';\n  }\n}\nexports.JWKSInvalid = JWKSInvalid;\nclass JWKSNoMatchingKey extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWKS_NO_MATCHING_KEY';\n    this.message = 'no applicable key found in the JSON Web Key Set';\n  }\n  static get code() {\n    return 'ERR_JWKS_NO_MATCHING_KEY';\n  }\n}\nexports.JWKSNoMatchingKey = JWKSNoMatchingKey;\nclass JWKSMultipleMatchingKeys extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';\n    this.message = 'multiple matching keys found in the JSON Web Key Set';\n  }\n  static get code() {\n    return 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';\n  }\n}\nexports.JWKSMultipleMatchingKeys = JWKSMultipleMatchingKeys;\nSymbol.asyncIterator;\nclass JWKSTimeout extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWKS_TIMEOUT';\n    this.message = 'request timed out';\n  }\n  static get code() {\n    return 'ERR_JWKS_TIMEOUT';\n  }\n}\nexports.JWKSTimeout = JWKSTimeout;\nclass JWSSignatureVerificationFailed extends JOSEError {\n  constructor() {\n    super(...arguments);\n    this.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';\n    this.message = 'signature verification failed';\n  }\n  static get code() {\n    return 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';\n  }\n}\nexports.JWSSignatureVerificationFailed = JWSSignatureVerificationFailed;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/runtime.js":
/*!************************************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/runtime.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nconst runtime_js_1 = __webpack_require__(/*! ../runtime/runtime.js */ \"(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/runtime/runtime.js\");\nexports[\"default\"] = runtime_js_1.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsOENBQTZDO0VBQUVHLEtBQUssRUFBRTtBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxZQUFZLEdBQUdDLG1CQUFPLENBQUMsb0hBQXVCLENBQUM7QUFDckRILGtCQUFlLEdBQUdFLFlBQVksQ0FBQ0UsT0FBTyIsInNvdXJjZXMiOlsiL1VzZXJzL2plcmVtaWFoL0RvY3VtZW50cy9HaXRIdWIvQ2hNUy9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMvam9zZS9kaXN0L25vZGUvY2pzL3V0aWwvcnVudGltZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHJ1bnRpbWVfanNfMSA9IHJlcXVpcmUoXCIuLi9ydW50aW1lL3J1bnRpbWUuanNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSBydW50aW1lX2pzXzEuZGVmYXVsdDtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInJ1bnRpbWVfanNfMSIsInJlcXVpcmUiLCJkZWZhdWx0Il0sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/jose/dist/node/cjs/util/runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/lru-cache/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/lru-cache/index.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n// A linked list to keep track of recently-used-ness\nconst Yallist = __webpack_require__(/*! yallist */ \"(rsc)/./node_modules/openid-client/node_modules/yallist/yallist.js\");\nconst MAX = Symbol('max');\nconst LENGTH = Symbol('length');\nconst LENGTH_CALCULATOR = Symbol('lengthCalculator');\nconst ALLOW_STALE = Symbol('allowStale');\nconst MAX_AGE = Symbol('maxAge');\nconst DISPOSE = Symbol('dispose');\nconst NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');\nconst LRU_LIST = Symbol('lruList');\nconst CACHE = Symbol('cache');\nconst UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');\nconst naiveLength = () => 1;\n\n// lruList is a yallist where the head is the youngest\n// item, and the tail is the oldest.  the list contains the Hit\n// objects as the entries.\n// Each Hit object has a reference to its Yallist.Node.  This\n// never changes.\n//\n// cache is a Map (or PseudoMap) that matches the keys to\n// the Yallist.Node object.\nclass LRUCache {\n  constructor(options) {\n    if (typeof options === 'number') options = {\n      max: options\n    };\n    if (!options) options = {};\n    if (options.max && (typeof options.max !== 'number' || options.max < 0)) throw new TypeError('max must be a non-negative number');\n    // Kind of weird to have a default max of Infinity, but oh well.\n    const max = this[MAX] = options.max || Infinity;\n    const lc = options.length || naiveLength;\n    this[LENGTH_CALCULATOR] = typeof lc !== 'function' ? naiveLength : lc;\n    this[ALLOW_STALE] = options.stale || false;\n    if (options.maxAge && typeof options.maxAge !== 'number') throw new TypeError('maxAge must be a number');\n    this[MAX_AGE] = options.maxAge || 0;\n    this[DISPOSE] = options.dispose;\n    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;\n    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;\n    this.reset();\n  }\n\n  // resize the cache when the max changes.\n  set max(mL) {\n    if (typeof mL !== 'number' || mL < 0) throw new TypeError('max must be a non-negative number');\n    this[MAX] = mL || Infinity;\n    trim(this);\n  }\n  get max() {\n    return this[MAX];\n  }\n  set allowStale(allowStale) {\n    this[ALLOW_STALE] = !!allowStale;\n  }\n  get allowStale() {\n    return this[ALLOW_STALE];\n  }\n  set maxAge(mA) {\n    if (typeof mA !== 'number') throw new TypeError('maxAge must be a non-negative number');\n    this[MAX_AGE] = mA;\n    trim(this);\n  }\n  get maxAge() {\n    return this[MAX_AGE];\n  }\n\n  // resize the cache when the lengthCalculator changes.\n  set lengthCalculator(lC) {\n    if (typeof lC !== 'function') lC = naiveLength;\n    if (lC !== this[LENGTH_CALCULATOR]) {\n      this[LENGTH_CALCULATOR] = lC;\n      this[LENGTH] = 0;\n      this[LRU_LIST].forEach(hit => {\n        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);\n        this[LENGTH] += hit.length;\n      });\n    }\n    trim(this);\n  }\n  get lengthCalculator() {\n    return this[LENGTH_CALCULATOR];\n  }\n  get length() {\n    return this[LENGTH];\n  }\n  get itemCount() {\n    return this[LRU_LIST].length;\n  }\n  rforEach(fn, thisp) {\n    thisp = thisp || this;\n    for (let walker = this[LRU_LIST].tail; walker !== null;) {\n      const prev = walker.prev;\n      forEachStep(this, fn, walker, thisp);\n      walker = prev;\n    }\n  }\n  forEach(fn, thisp) {\n    thisp = thisp || this;\n    for (let walker = this[LRU_LIST].head; walker !== null;) {\n      const next = walker.next;\n      forEachStep(this, fn, walker, thisp);\n      walker = next;\n    }\n  }\n  keys() {\n    return this[LRU_LIST].toArray().map(k => k.key);\n  }\n  values() {\n    return this[LRU_LIST].toArray().map(k => k.value);\n  }\n  reset() {\n    if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {\n      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));\n    }\n    this[CACHE] = new Map(); // hash of items by key\n    this[LRU_LIST] = new Yallist(); // list of items in order of use recency\n    this[LENGTH] = 0; // length of items in the list\n  }\n\n  dump() {\n    return this[LRU_LIST].map(hit => isStale(this, hit) ? false : {\n      k: hit.key,\n      v: hit.value,\n      e: hit.now + (hit.maxAge || 0)\n    }).toArray().filter(h => h);\n  }\n  dumpLru() {\n    return this[LRU_LIST];\n  }\n  set(key, value, maxAge) {\n    maxAge = maxAge || this[MAX_AGE];\n    if (maxAge && typeof maxAge !== 'number') throw new TypeError('maxAge must be a number');\n    const now = maxAge ? Date.now() : 0;\n    const len = this[LENGTH_CALCULATOR](value, key);\n    if (this[CACHE].has(key)) {\n      if (len > this[MAX]) {\n        del(this, this[CACHE].get(key));\n        return false;\n      }\n      const node = this[CACHE].get(key);\n      const item = node.value;\n\n      // dispose of the old one before overwriting\n      // split out into 2 ifs for better coverage tracking\n      if (this[DISPOSE]) {\n        if (!this[NO_DISPOSE_ON_SET]) this[DISPOSE](key, item.value);\n      }\n      item.now = now;\n      item.maxAge = maxAge;\n      item.value = value;\n      this[LENGTH] += len - item.length;\n      item.length = len;\n      this.get(key);\n      trim(this);\n      return true;\n    }\n    const hit = new Entry(key, value, len, now, maxAge);\n\n    // oversized objects fall out of cache automatically.\n    if (hit.length > this[MAX]) {\n      if (this[DISPOSE]) this[DISPOSE](key, value);\n      return false;\n    }\n    this[LENGTH] += hit.length;\n    this[LRU_LIST].unshift(hit);\n    this[CACHE].set(key, this[LRU_LIST].head);\n    trim(this);\n    return true;\n  }\n  has(key) {\n    if (!this[CACHE].has(key)) return false;\n    const hit = this[CACHE].get(key).value;\n    return !isStale(this, hit);\n  }\n  get(key) {\n    return get(this, key, true);\n  }\n  peek(key) {\n    return get(this, key, false);\n  }\n  pop() {\n    const node = this[LRU_LIST].tail;\n    if (!node) return null;\n    del(this, node);\n    return node.value;\n  }\n  del(key) {\n    del(this, this[CACHE].get(key));\n  }\n  load(arr) {\n    // reset the cache\n    this.reset();\n    const now = Date.now();\n    // A previous serialized cache has the most recent items first\n    for (let l = arr.length - 1; l >= 0; l--) {\n      const hit = arr[l];\n      const expiresAt = hit.e || 0;\n      if (expiresAt === 0)\n        // the item was created without expiration in a non aged cache\n        this.set(hit.k, hit.v);else {\n        const maxAge = expiresAt - now;\n        // dont add already expired items\n        if (maxAge > 0) {\n          this.set(hit.k, hit.v, maxAge);\n        }\n      }\n    }\n  }\n  prune() {\n    this[CACHE].forEach((value, key) => get(this, key, false));\n  }\n}\nconst get = (self, key, doUse) => {\n  const node = self[CACHE].get(key);\n  if (node) {\n    const hit = node.value;\n    if (isStale(self, hit)) {\n      del(self, node);\n      if (!self[ALLOW_STALE]) return undefined;\n    } else {\n      if (doUse) {\n        if (self[UPDATE_AGE_ON_GET]) node.value.now = Date.now();\n        self[LRU_LIST].unshiftNode(node);\n      }\n    }\n    return hit.value;\n  }\n};\nconst isStale = (self, hit) => {\n  if (!hit || !hit.maxAge && !self[MAX_AGE]) return false;\n  const diff = Date.now() - hit.now;\n  return hit.maxAge ? diff > hit.maxAge : self[MAX_AGE] && diff > self[MAX_AGE];\n};\nconst trim = self => {\n  if (self[LENGTH] > self[MAX]) {\n    for (let walker = self[LRU_LIST].tail; self[LENGTH] > self[MAX] && walker !== null;) {\n      // We know that we're about to delete this one, and also\n      // what the next least recently used key will be, so just\n      // go ahead and set it now.\n      const prev = walker.prev;\n      del(self, walker);\n      walker = prev;\n    }\n  }\n};\nconst del = (self, node) => {\n  if (node) {\n    const hit = node.value;\n    if (self[DISPOSE]) self[DISPOSE](hit.key, hit.value);\n    self[LENGTH] -= hit.length;\n    self[CACHE].delete(hit.key);\n    self[LRU_LIST].removeNode(node);\n  }\n};\nclass Entry {\n  constructor(key, value, length, now, maxAge) {\n    this.key = key;\n    this.value = value;\n    this.length = length;\n    this.now = now;\n    this.maxAge = maxAge || 0;\n  }\n}\nconst forEachStep = (self, fn, node, thisp) => {\n  let hit = node.value;\n  if (isStale(self, hit)) {\n    del(self, node);\n    if (!self[ALLOW_STALE]) hit = undefined;\n  }\n  if (hit) fn.call(thisp, hit.value, hit.key, self);\n};\nmodule.exports = LRUCache;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/lru-cache/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/yallist/iterator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/yallist/iterator.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = function (Yallist) {\n  Yallist.prototype[Symbol.iterator] = function* () {\n    for (let walker = this.head; walker; walker = walker.next) {\n      yield walker.value;\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb3BlbmlkLWNsaWVudC9ub2RlX21vZHVsZXMveWFsbGlzdC9pdGVyYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFDWkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsT0FBTyxFQUFFO0VBQ2xDQSxPQUFPLENBQUNDLFNBQVMsQ0FBQ0MsTUFBTSxDQUFDQyxRQUFRLENBQUMsR0FBRyxhQUFhO0lBQ2hELEtBQUssSUFBSUMsTUFBTSxHQUFHLElBQUksQ0FBQ0MsSUFBSSxFQUFFRCxNQUFNLEVBQUVBLE1BQU0sR0FBR0EsTUFBTSxDQUFDRSxJQUFJLEVBQUU7TUFDekQsTUFBTUYsTUFBTSxDQUFDRyxLQUFLO0lBQ3BCO0VBQ0YsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbWlhaC9Eb2N1bWVudHMvR2l0SHViL0NoTVMvbm9kZV9tb2R1bGVzL29wZW5pZC1jbGllbnQvbm9kZV9tb2R1bGVzL3lhbGxpc3QvaXRlcmF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChZYWxsaXN0KSB7XG4gIFlhbGxpc3QucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiogKCkge1xuICAgIGZvciAobGV0IHdhbGtlciA9IHRoaXMuaGVhZDsgd2Fsa2VyOyB3YWxrZXIgPSB3YWxrZXIubmV4dCkge1xuICAgICAgeWllbGQgd2Fsa2VyLnZhbHVlXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIllhbGxpc3QiLCJwcm90b3R5cGUiLCJTeW1ib2wiLCJpdGVyYXRvciIsIndhbGtlciIsImhlYWQiLCJuZXh0IiwidmFsdWUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/yallist/iterator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/node_modules/yallist/yallist.js":
/*!********************************************************************!*\
  !*** ./node_modules/openid-client/node_modules/yallist/yallist.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports = Yallist;\nYallist.Node = Node;\nYallist.create = Yallist;\nfunction Yallist(list) {\n  var self = this;\n  if (!(self instanceof Yallist)) {\n    self = new Yallist();\n  }\n  self.tail = null;\n  self.head = null;\n  self.length = 0;\n  if (list && typeof list.forEach === 'function') {\n    list.forEach(function (item) {\n      self.push(item);\n    });\n  } else if (arguments.length > 0) {\n    for (var i = 0, l = arguments.length; i < l; i++) {\n      self.push(arguments[i]);\n    }\n  }\n  return self;\n}\nYallist.prototype.removeNode = function (node) {\n  if (node.list !== this) {\n    throw new Error('removing node which does not belong to this list');\n  }\n  var next = node.next;\n  var prev = node.prev;\n  if (next) {\n    next.prev = prev;\n  }\n  if (prev) {\n    prev.next = next;\n  }\n  if (node === this.head) {\n    this.head = next;\n  }\n  if (node === this.tail) {\n    this.tail = prev;\n  }\n  node.list.length--;\n  node.next = null;\n  node.prev = null;\n  node.list = null;\n  return next;\n};\nYallist.prototype.unshiftNode = function (node) {\n  if (node === this.head) {\n    return;\n  }\n  if (node.list) {\n    node.list.removeNode(node);\n  }\n  var head = this.head;\n  node.list = this;\n  node.next = head;\n  if (head) {\n    head.prev = node;\n  }\n  this.head = node;\n  if (!this.tail) {\n    this.tail = node;\n  }\n  this.length++;\n};\nYallist.prototype.pushNode = function (node) {\n  if (node === this.tail) {\n    return;\n  }\n  if (node.list) {\n    node.list.removeNode(node);\n  }\n  var tail = this.tail;\n  node.list = this;\n  node.prev = tail;\n  if (tail) {\n    tail.next = node;\n  }\n  this.tail = node;\n  if (!this.head) {\n    this.head = node;\n  }\n  this.length++;\n};\nYallist.prototype.push = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    push(this, arguments[i]);\n  }\n  return this.length;\n};\nYallist.prototype.unshift = function () {\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    unshift(this, arguments[i]);\n  }\n  return this.length;\n};\nYallist.prototype.pop = function () {\n  if (!this.tail) {\n    return undefined;\n  }\n  var res = this.tail.value;\n  this.tail = this.tail.prev;\n  if (this.tail) {\n    this.tail.next = null;\n  } else {\n    this.head = null;\n  }\n  this.length--;\n  return res;\n};\nYallist.prototype.shift = function () {\n  if (!this.head) {\n    return undefined;\n  }\n  var res = this.head.value;\n  this.head = this.head.next;\n  if (this.head) {\n    this.head.prev = null;\n  } else {\n    this.tail = null;\n  }\n  this.length--;\n  return res;\n};\nYallist.prototype.forEach = function (fn, thisp) {\n  thisp = thisp || this;\n  for (var walker = this.head, i = 0; walker !== null; i++) {\n    fn.call(thisp, walker.value, i, this);\n    walker = walker.next;\n  }\n};\nYallist.prototype.forEachReverse = function (fn, thisp) {\n  thisp = thisp || this;\n  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {\n    fn.call(thisp, walker.value, i, this);\n    walker = walker.prev;\n  }\n};\nYallist.prototype.get = function (n) {\n  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.next;\n  }\n  if (i === n && walker !== null) {\n    return walker.value;\n  }\n};\nYallist.prototype.getReverse = function (n) {\n  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {\n    // abort out of the list early if we hit a cycle\n    walker = walker.prev;\n  }\n  if (i === n && walker !== null) {\n    return walker.value;\n  }\n};\nYallist.prototype.map = function (fn, thisp) {\n  thisp = thisp || this;\n  var res = new Yallist();\n  for (var walker = this.head; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this));\n    walker = walker.next;\n  }\n  return res;\n};\nYallist.prototype.mapReverse = function (fn, thisp) {\n  thisp = thisp || this;\n  var res = new Yallist();\n  for (var walker = this.tail; walker !== null;) {\n    res.push(fn.call(thisp, walker.value, this));\n    walker = walker.prev;\n  }\n  return res;\n};\nYallist.prototype.reduce = function (fn, initial) {\n  var acc;\n  var walker = this.head;\n  if (arguments.length > 1) {\n    acc = initial;\n  } else if (this.head) {\n    walker = this.head.next;\n    acc = this.head.value;\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value');\n  }\n  for (var i = 0; walker !== null; i++) {\n    acc = fn(acc, walker.value, i);\n    walker = walker.next;\n  }\n  return acc;\n};\nYallist.prototype.reduceReverse = function (fn, initial) {\n  var acc;\n  var walker = this.tail;\n  if (arguments.length > 1) {\n    acc = initial;\n  } else if (this.tail) {\n    walker = this.tail.prev;\n    acc = this.tail.value;\n  } else {\n    throw new TypeError('Reduce of empty list with no initial value');\n  }\n  for (var i = this.length - 1; walker !== null; i--) {\n    acc = fn(acc, walker.value, i);\n    walker = walker.prev;\n  }\n  return acc;\n};\nYallist.prototype.toArray = function () {\n  var arr = new Array(this.length);\n  for (var i = 0, walker = this.head; walker !== null; i++) {\n    arr[i] = walker.value;\n    walker = walker.next;\n  }\n  return arr;\n};\nYallist.prototype.toArrayReverse = function () {\n  var arr = new Array(this.length);\n  for (var i = 0, walker = this.tail; walker !== null; i++) {\n    arr[i] = walker.value;\n    walker = walker.prev;\n  }\n  return arr;\n};\nYallist.prototype.slice = function (from, to) {\n  to = to || this.length;\n  if (to < 0) {\n    to += this.length;\n  }\n  from = from || 0;\n  if (from < 0) {\n    from += this.length;\n  }\n  var ret = new Yallist();\n  if (to < from || to < 0) {\n    return ret;\n  }\n  if (from < 0) {\n    from = 0;\n  }\n  if (to > this.length) {\n    to = this.length;\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {\n    walker = walker.next;\n  }\n  for (; walker !== null && i < to; i++, walker = walker.next) {\n    ret.push(walker.value);\n  }\n  return ret;\n};\nYallist.prototype.sliceReverse = function (from, to) {\n  to = to || this.length;\n  if (to < 0) {\n    to += this.length;\n  }\n  from = from || 0;\n  if (from < 0) {\n    from += this.length;\n  }\n  var ret = new Yallist();\n  if (to < from || to < 0) {\n    return ret;\n  }\n  if (from < 0) {\n    from = 0;\n  }\n  if (to > this.length) {\n    to = this.length;\n  }\n  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {\n    walker = walker.prev;\n  }\n  for (; walker !== null && i > from; i--, walker = walker.prev) {\n    ret.push(walker.value);\n  }\n  return ret;\n};\nYallist.prototype.splice = function (start, deleteCount, ...nodes) {\n  if (start > this.length) {\n    start = this.length - 1;\n  }\n  if (start < 0) {\n    start = this.length + start;\n  }\n  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {\n    walker = walker.next;\n  }\n  var ret = [];\n  for (var i = 0; walker && i < deleteCount; i++) {\n    ret.push(walker.value);\n    walker = this.removeNode(walker);\n  }\n  if (walker === null) {\n    walker = this.tail;\n  }\n  if (walker !== this.head && walker !== this.tail) {\n    walker = walker.prev;\n  }\n  for (var i = 0; i < nodes.length; i++) {\n    walker = insert(this, walker, nodes[i]);\n  }\n  return ret;\n};\nYallist.prototype.reverse = function () {\n  var head = this.head;\n  var tail = this.tail;\n  for (var walker = head; walker !== null; walker = walker.prev) {\n    var p = walker.prev;\n    walker.prev = walker.next;\n    walker.next = p;\n  }\n  this.head = tail;\n  this.tail = head;\n  return this;\n};\nfunction insert(self, node, value) {\n  var inserted = node === self.head ? new Node(value, null, node, self) : new Node(value, node, node.next, self);\n  if (inserted.next === null) {\n    self.tail = inserted;\n  }\n  if (inserted.prev === null) {\n    self.head = inserted;\n  }\n  self.length++;\n  return inserted;\n}\nfunction push(self, item) {\n  self.tail = new Node(item, self.tail, null, self);\n  if (!self.head) {\n    self.head = self.tail;\n  }\n  self.length++;\n}\nfunction unshift(self, item) {\n  self.head = new Node(item, null, self.head, self);\n  if (!self.tail) {\n    self.tail = self.head;\n  }\n  self.length++;\n}\nfunction Node(value, prev, next, list) {\n  if (!(this instanceof Node)) {\n    return new Node(value, prev, next, list);\n  }\n  this.list = list;\n  this.value = value;\n  if (prev) {\n    prev.next = this;\n    this.prev = prev;\n  } else {\n    this.prev = null;\n  }\n  if (next) {\n    next.prev = this;\n    this.next = next;\n  } else {\n    this.next = null;\n  }\n}\ntry {\n  // add if support for Symbol.iterator is present\n  __webpack_require__(/*! ./iterator.js */ \"(rsc)/./node_modules/openid-client/node_modules/yallist/iterator.js\")(Yallist);\n} catch (er) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/openid-client/node_modules/yallist/yallist.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/openid-client/package.json":
/*!*************************************************!*\
  !*** ./node_modules/openid-client/package.json ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"openid-client","version":"5.7.1","description":"OpenID Connect Relying Party (RP, Client) implementation for Node.js runtime, supports passportjs","keywords":["auth","authentication","basic","certified","client","connect","dynamic","electron","hybrid","identity","implicit","oauth","oauth2","oidc","openid","passport","relying party","strategy"],"homepage":"https://github.com/panva/openid-client","repository":"panva/openid-client","funding":{"url":"https://github.com/sponsors/panva"},"license":"MIT","author":"Filip Skokan <panva.ip@gmail.com>","exports":{"types":"./types/index.d.ts","import":"./lib/index.mjs","require":"./lib/index.js"},"main":"./lib/index.js","types":"./types/index.d.ts","files":["lib","types/index.d.ts"],"scripts":{"format":"npx prettier --loglevel silent --write ./lib ./test ./certification ./types","test":"mocha test/**/*.test.js"},"dependencies":{"jose":"^4.15.9","lru-cache":"^6.0.0","object-hash":"^2.2.0","oidc-token-hash":"^5.0.3"},"devDependencies":{"@types/node":"^16.18.106","@types/passport":"^1.0.16","base64url":"^3.0.1","chai":"^4.5.0","mocha":"^10.7.3","nock":"^13.5.5","prettier":"^2.8.8","readable-mock-req":"^0.2.2","sinon":"^9.2.4","timekeeper":"^2.3.1"},"standard-version":{"scripts":{"postchangelog":"sed -i \'\' -e \'s/### \\\\[/## [/g\' CHANGELOG.md"},"types":[{"type":"feat","section":"Features"},{"type":"fix","section":"Fixes"},{"type":"chore","hidden":true},{"type":"docs","hidden":true},{"type":"style","hidden":true},{"type":"refactor","section":"Refactor","hidden":false},{"type":"perf","section":"Performance","hidden":false},{"type":"test","hidden":true}]}}');

/***/ })

};
;